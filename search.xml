<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Applying TPM to Cloud</title>
    <url>/2020/10/12/Applying-TPM-to-Cloud/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:left">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">原文PDF</td>
<td style="text-align:center"><a href="https://onlinelibrary.wiley.com/doi/pdf/10.1002/spy2.93" target="_blank" rel="noopener">Survey</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:left">作者信息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">核心内容</td>
<td style="text-align:center">调研了13年至18年的近120篇文献，且这些论文都利用TPM提高云计算安全。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:left">研究领域</td>
<td style="text-align:center">可信计算</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">全文总览</td>
<td style="text-align:center">本文对TPM在云计算安全方面进行的细致的调研，并结合调研结果认为TPM在云计算安全的保护领域具有很大的趋势。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Paper-Source"><a href="#Paper-Source" class="headerlink" title="Paper Source"></a>Paper Source</h3><p><img src="/2020/10/12/Applying-TPM-to-Cloud/sources.png" width="500"></p>
<p><img src="/2020/10/12/Applying-TPM-to-Cloud/papercountry.png" width="500"></p>
<font color="DodgerBlue"> Paper Structure </font>

<p><img src="/2020/10/12/Applying-TPM-to-Cloud/Summary.png" width="600" height="400"></p>
<h3 id="Answering-the-Following-Question"><a href="#Answering-the-Following-Question" class="headerlink" title="Answering the Following Question"></a>Answering the Following Question</h3><h4 id="RQ1-For-what-purposes-is-TPM-used-in-the-cloud"><a href="#RQ1-For-what-purposes-is-TPM-used-in-the-cloud" class="headerlink" title="RQ1: For what purposes is TPM used in the cloud?"></a>RQ1: For what purposes is TPM used in the cloud?</h4><blockquote>
<p><strong>TPM 在云中的作用是什么？为什么要用到TPM？</strong></p>
</blockquote>
<h4 id="RQ2-What-types-of-threats-have-been-reportedly-mitigated-via-the-utilization-of-TPM-in-cloud"><a href="#RQ2-What-types-of-threats-have-been-reportedly-mitigated-via-the-utilization-of-TPM-in-cloud" class="headerlink" title="RQ2: What types of threats have been reportedly mitigated via the utilization of TPM in cloud?"></a>RQ2: What types of threats have been reportedly mitigated via the utilization of TPM in cloud?</h4><blockquote>
<p><strong>TPM的确缓解了的云中的哪些攻击？</strong></p>
</blockquote>
<h4 id="RQ3-What-is-the-exact-component-of-the-assessment？What-interpretations-are-given-for-integrity-in-cloud？"><a href="#RQ3-What-is-the-exact-component-of-the-assessment？What-interpretations-are-given-for-integrity-in-cloud？" class="headerlink" title="RQ3: What is the exact component of the assessment？What interpretations are given for integrity in cloud？"></a>RQ3: What is the exact component of the assessment？What interpretations are given for integrity in cloud？</h4><blockquote>
<p><strong>完整性度量的组件到底是什么？云中完整性度量的解释是什么？</strong></p>
</blockquote>
<h4 id="RQ4-At-what-level-are-TPM-primitives-invoked"><a href="#RQ4-At-what-level-are-TPM-primitives-invoked" class="headerlink" title="RQ4: At what level are TPM primitives invoked?"></a>RQ4: At what level are TPM primitives invoked?</h4><blockquote>
<p><strong>TPM被调用的级别是什么？</strong></p>
</blockquote>
<h4 id="RQ5-At-which-phase-are-the-TPM-features-used"><a href="#RQ5-At-which-phase-are-the-TPM-features-used" class="headerlink" title="RQ5: At which phase are the TPM features used?"></a>RQ5: At which phase are the TPM features used?</h4><blockquote>
<p><strong>在什么阶段用到了TPM？</strong><br><strong>A：boot time, run time and both.</strong></p>
</blockquote>
<p><img src="/2020/10/12/Applying-TPM-to-Cloud/Phase.png" width="400" height="250"></p>
<h3 id="TPM"><a href="#TPM" class="headerlink" title="TPM"></a>TPM</h3><p>​        可信计算利用硬件信任根以及与之关联的软件构建可信环境，提供信任和隐私保护。TPM这个模块，提供安全启动、远程验证、完整性检测以及机密功能。2011年发布了TPM1.2版本，2016年公布了TPM2.0版本。</p>
<p>​        远程证明是可信计算技术提供的主要功能，它将信任逐步从较低级别扩展到较高级别和应用程序。 这被称为信任链。 在信任链方案中，所有将要加载的组件都被认为是不可信的，因此，在加载之前需要对其进行测量。 TPM包含平台配置寄存器（PCR）受保护的内存位置，该位置存储敏感的安全信息（例如测量信息）。</p>
<p>​        除了强大的隔离存储，TPM还拥有用于加密操作的唯一认可密钥（EK）。该密钥是在TPM制造时生成的，密钥的私有部分永远不会离开TPM。 在远程认证时，为了保护平台身份的私密性，使用了认证身份密钥（AIK）。 当平台（证明者）收到（来自验证者的）远程证明请求时，它会发送一个完整性报告，该报告由PCR值及其数字签名（由AIK计算）组成。 由于AIK的私有部分从未离开过TPM，因此可以保证报告的完整性和真实性。</p>
<p>​        初步理解，TPM有几种存在模式，比如：以芯片方式存在电脑主板上或者以firmware形式存在于BIOS中。</p>
<h4 id="The-Aims-of-TPM"><a href="#The-Aims-of-TPM" class="headerlink" title="The Aims of TPM"></a>The Aims of TPM</h4><p><img src="/2020/10/12/Applying-TPM-to-Cloud/TPMAims.png" width="500" height="280"></p>
<font color="DodgerBlue"> 远程验证（Remote Attestation ）</font>

<blockquote>
<ol>
<li>请求验证者向被验证者发送验证请求，这个请求中包括 <em>nonce</em><sup><a href="#fn_1" id="reffn_1">1</a></sup> ，目的是防止重播攻击（Replay attack）</li>
<li>接收到验证请求的一方向自己的TPM提出验证请求，TPM验证自身需要度量的模块</li>
<li>验证后的结果发送给远端的验证发起者（发起者要验证(a)TPM 的真实性(b) 发送数值的真实性）</li>
</ol>
</blockquote>
<font color="DodgerBlue"> 完整性度量 （Integrity Measurement）</font>

<blockquote>
<p>TPM计算并存储不同组件的哈希值，并将这些哈希值在哈希链中进行转换，并将结果与已经存储的数值相比较。<br>完整性度量分为静态与动态两种类型：<br>        静态：保证在运行之前没有发生篡改<br>        动态：保证在运行过程中没有发生恶意篡改</p>
</blockquote>
<font color="DodgerBlue"> Generation and secure storage ofkeys</font>

<blockquote>
<p>生成随机秘钥的方法：种子、随机数生成器、直接导入TPM中。<br>生成的秘钥保存在TPM中</p>
</blockquote>
<font color="DodgerBlue"> Trusted boot</font>

<blockquote>
<p>在开机时，TPM会检查硬件、软件、固件组件的异同，保证在启动系统之前的环境是可信的。</p>
<p>本文的参考文献 [14] 利用TPM的可信启动构造一个可信的环境，保证在开机过程中没有恶意入侵。<br>[15] 提出一个用于监控整个云平台的框架，可信启动保证被监控环境的完整性，既对云中租户也是针对云供应商。</p>
</blockquote>
<font color="DodgerBlue"> Hardware root of trust</font>

<blockquote>
<p>信任根是可以在密码系统中信任的来源，加密安全依赖于秘钥来进行加密解密与生成或者验证数字签名，因此，在这种系统中包括不易损坏的硬件模块，并且提供了一定程度的信任保障。<br>TPM可以提供硬件信任根、提供开机与运行时的完整性度量并且保护度量结果。</p>
</blockquote>
<h4 id="Security-Threats"><a href="#Security-Threats" class="headerlink" title="Security Threats"></a>Security Threats</h4><p><img src="/2020/10/12/Applying-TPM-to-Cloud/TopThreats.png" width="380" height="500"></p>
<h4 id="The-level-of-TPM-invoking"><a href="#The-level-of-TPM-invoking" class="headerlink" title="The level of TPM invoking"></a>The level of TPM invoking</h4><font color="DodgerBlue"> Hardware </font>

<blockquote>
<p>在IoT和云计算等分布式系统模型中，主机平台的安全性至关重要，因为它托管着存储或处理（大量）数据。 TPM是一种用于平台身份验证以及验证其完整性的强大解决方案。在参考文献90中提出的解决方案中，扩展了HCloud（用于医疗保健数据的私有云），并且TPM嵌入在主机平台上以对客户端进行身份验证，并测量静态和动态完整性。讨论了可信云可以提供外部认证服务并进行内部可信调度。提供给外部的每个服务都有一个唯一的映像/进程在内存中运行。加载到内存时，需要验证此过程。可以使用TPM执行静态测量，以验证存储在物理存储库中的文件和软件包。同样，使用TPM签名保护数据库的完整性，以提供硬件级别的安全性。对于过程的动态完整性测量，TPM PCR用于存储和显示逐步的测量值。 Yang等[86]提出了一种设计，旨在为客户提供有关存储在云中的数据的新鲜度，有效性和完整性的保证。为了实现此目标，他们在不受信任的服务器上使用受信任的硬件设备，使客户端能够验证其数据的新鲜度和完整性。在系统运行之前，需要验证平台是否以受信任的方式启动。参考文献91讨论TPM是衡量启动过程和确定平台启动完整性的关键步骤的信任基础。在虚拟环境中，TPM提供了根植于硬件的信任链，该信任链将扩展到虚拟机管理程序。如果关键组件（例如BIOS，固件和虚拟机管理程序）已证明其完整性，则可以确保平台引导的完整性。为了确保启动组件的完整性，需要执行两个步骤：首先，测量引导过程，其次，进行证明，即保证和已执行的组件是受信任的组件。</p>
</blockquote>
<font color="DodgerBlue"> Hypervisor </font>

<blockquote>
<p>本文参考文献28构造了基于Xen的迁移框架：</p>
<p>Xen虚拟机管理程序的安全迁移框架。该设计使用可信计算和相邻完整性度量来动态监视相邻虚拟机管理程序的完整性。更具体地说，为确保始终监视主机，当主机初始化时，TPM模块会验证虚拟机监控程序并将更新消息发送到完整性验证表（该表包含受信任的虚拟机监控程序列表），并将该虚拟机监控程序标记为受信任的。这意味着，如果未收到此类消息，则认为该特定的管理程序不可信。此外，系统会动态监控虚拟机监控程序的运行状态，如果虚拟机监控程序遭到破坏，则会发送相应的更新消息以报告受到破坏的情况。根据此完整性表的结果，确定源虚拟机管理程序是否受信任以及是否应启动VM迁移过程。</p>
</blockquote>
<h4 id="Phase-of-integrity-measurement"><a href="#Phase-of-integrity-measurement" class="headerlink" title="Phase of integrity measurement"></a>Phase of integrity measurement</h4><font color="DodgerBlue"> Boot time </font>

<blockquote>
<p>可信平台技术追求的原则之一是在关键组件加载和执行之前验证它们的信任和完整性。因此，在运行时完整性检查之前，需要确保正确引导了系统并且正在运行适当的操作系统。受信任的平台通过创建信任链来实现这种信任，该信任链以BIOS引导块中的受信任代码（CRTM）为核心信任根。 CRTM衡量其他实体的完整性价值，并且在平台的整个生命周期内保持不变。 CRTM是普通BIOS的补充，它首先运行以测量BIOS块和硬件，然后将控制权传递给引导加载程序。然后在将控件传递给OS之前测量OS内核映像。在此引导过程的每个步骤中，都会获取测量值，并据此扩展相关的TPM PCR值。该测量过程证明了系统的完整性，并确保引导和操作系统软件是制造商想要的版本，并且未被恶意第三方或恶意软件篡改。100Nanavati等人74指出，在虚拟环境中，可信引导技术允许用户证明基础启动平台的身份，并确保加载的虚拟化平台值得信赖。这为用户提供了有关可以向其提交关键数据的虚拟化平台的具体保证。 TPM通过使用加密原语为虚拟化平台提供此受信任的引导，并为其建立信任根。在ALIBI可信监视框架中，17 TPM用于在服务提供商平台上提供信任根。 TPM PCR记录平台上正在执行的软件的状态，并且由于PCR值仅是附加值，因此仅通过重新启动才能消除以前的记录。 TPM还拥有一个公共-私人密钥对。私钥仅保留在TPM的安全环境中，并用于计算TPM生成的证明值（从经过身份验证的启动累积的度量）的签名。使用TPM的公钥，外部验证程序可以检查签名的有效性，并推断出PCR值表示平台软件的状态。</p>
</blockquote>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>​        本文所统计并分析了120篇文献后，认为TPM技术在云中应用是一种趋势。在云中TPM技术的主要目标是远程验证以及完整性度量。本文主要分析了TPM的功能，TPM可应对云中的安全威胁，TPM提供完整性度量的阶段以及层次并指出了留有的研究空间，最后指出主要的研究差距。</p>
<blockquote id="fn_1">
<sup>1</sup>. 在加密技术中的初始向量和加密散列函数都发挥着重要作用，在各类验证协议的通信应用中确保验证信息不被重复使用以对抗重放攻击(Replay Attack)<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<h3 id="引文延伸阅读"><a href="#引文延伸阅读" class="headerlink" title="引文延伸阅读"></a>引文延伸阅读</h3><p>Here are the papers worth reading further.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>theme</th>
<th>Reference Number &amp; Summary</th>
<th>Reference Number &amp; Summary</th>
<th>more</th>
</tr>
</thead>
<tbody>
<tr>
<td>远程验证</td>
<td>6：TPM进行远程验证VMs</td>
<td>7：验证用户所在地理位置</td>
<td></td>
</tr>
<tr>
<td>完整性度量</td>
<td>10：多用户环境中数据拥有完整性</td>
<td>11：动态的完成性度量的模型（Xen）</td>
<td>8、9</td>
</tr>
<tr>
<td>生成秘钥安全存储</td>
<td>12</td>
<td>13</td>
<td></td>
</tr>
<tr>
<td>安全启动</td>
<td><a href="https://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=2969&amp;context=sis_research" target="_blank" rel="noopener">14</a>：protect the hypervisor</td>
<td>15 ：monitoring the cloud platform</td>
<td></td>
</tr>
<tr>
<td>硬件信任根</td>
<td>17 25 33 34 35</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://www.zhihu.com/question/19790488/answer/19290308" target="_blank" rel="noopener">什么是彩虹表？</a> </p>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>TPM</tag>
        <tag>Security</tag>
        <tag>Cloud Computing</tag>
        <tag>可信计算</tag>
      </tags>
  </entry>
  <entry>
    <title>A FULLY HOMOMORPHIC ENCRYPTION SCHEME</title>
    <url>/2020/08/13/A-FULLY-HOMOMORPHIC-ENCRYPTION-SCHEME/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Attacks Directories, Not Caches</title>
    <url>/2020/07/17/Attacks-Directories-Not-Caches/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href>Attack Directories, Not Caches: Side-Channel Attacks in a Non-Inclusive World</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">Side Channel Attack</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">Attack, Cache</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">基于缓存的侧信道攻击在新型缓存的攻击实践</td>
</tr>
</tbody>
</table>
</div>
<h3 id="0-Main-idea"><a href="#0-Main-idea" class="headerlink" title="0. Main idea"></a>0. Main idea</h3>]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>side channel attack</tag>
      </tags>
  </entry>
  <entry>
    <title>BatchCrypt</title>
    <url>/2020/09/13/BatchCrypt/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://marcoszh.github.io/batchcrypt_atc20.pdf" target="_blank" rel="noopener">Batchcrypt</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"><a href="https://marcoszh.github.io/" target="_blank" rel="noopener">Chengliang Zhang</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">利用同态加密技术实现FL的安全数据传输，通过改进系统模型，降低同态加密带来的加密与通讯代价。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">Federal Learning; HE</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">利用同态加密构造一个适合联邦学习的模型，通过优化降低同态加密带来的加密计算与通讯的时间代价。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="BatchCrypt"><a href="#BatchCrypt" class="headerlink" title="BatchCrypt"></a>BatchCrypt</h3><p>&emsp;&emsp;这篇论文的目的是利用同态加密构造一个适合联邦学习的模型，能够利用同态加密的安全特性满足联邦学习对安全的需求，并在此基础上对同态加密进行改进，从而获得一个更加高效的处理系统。通过引入批处理，缓解同态加密的加密代价，这样就可以在满足安全性的同时保证性能。</p>
<h3 id="联邦学习"><a href="#联邦学习" class="headerlink" title="联邦学习"></a>联邦学习</h3><h4 id="联邦学习系统架构"><a href="#联邦学习系统架构" class="headerlink" title="联邦学习系统架构"></a><font color="Blue"><strong>联邦学习系统架构</strong></font></h4><blockquote>
<p>假设企业A、B想要联合训练一个机器学习模型，两者业务系统分别拥有各自用户的相关数据，企业B拥有模型需要预测的便签数据，出于安全考虑，A与B无法直接进行数据交换，下图是利用联邦学习模型架构的组成。</p>
<p>第一部分： 加密样本对齐。由于两个公司的用户群体并非完全重合，系统利用基于加密的用户样本对齐，在A与B不公开各自数据的前提下确认双方的共有用户，便于联合这些用户特征进行建模。</p>
<p>第二部分： 加密模型训练。在确定共有用户群体之后，利用这些数据训练机器学习模型，为了保证训练过程中数据的保密性，需要借助第三方协作者C进行加密训练，以线性回归模型为例，训练过程如下：</p>
<blockquote>
<ol>
<li><p>协作者C把公钥分发给A与B，对训练过程中需要交换的数据进行加密；</p>
</li>
<li><p>A、B之间以加密形式交互用于计算梯度的中间结果；</p>
</li>
<li><p>A、B分别基于加密的梯度值进行计算，同时B根据便签数据计算损失，并把这些结果汇总给C，C通过汇总结果计算总梯度并将其解密；</p>
</li>
<li><p>C将解密后的梯度分别回传给A和B，并根据梯度更新各自模型的参数。</p>
</li>
</ol>
</blockquote>
<p>对上述过程进行迭代，直至损失函数收敛，这样就完成了整个训练过程，在样本对齐以及模型训练过程中， A、B各自的数据均留在本地，且训练中的数据交互也不会导致数据隐私泄露，因此，双方在联邦学习的帮助下可以实现合作训练模型的目的。</p>
<p>第三部分： 效果激励。联邦学习的特点是解决了为什么不同机构要加入联邦共同建模的问题。提供数据多的机构获得的模型效果会更好，模型效果取决于数据提供方对自己和他人的贡献，这些模型的效果在联邦机制上会分发给各个机构反馈，并继续激励更多机构加入这一数据联邦。</p>
</blockquote>
<p><img src="/2020/09/13/BatchCrypt/FL_Architecture.png" width="600px" height="300px"></p>
<p>​                                                                   图1. 联邦学习架构图</p>
<h4 id="联邦学习优势"><a href="#联邦学习优势" class="headerlink" title="联邦学习优势 "></a><font color="RoyalBlue"><strong>联邦学习优势</strong> </font></h4><blockquote>
<p>数据隔离，满足用户隐私保护和数据安全的需求；</p>
<p>保证模型质量无损，不会出现负迁移，保证联邦模型比割裂的独立模型效果好；</p>
<p>参与者地位对等，能够实现公平合作；</p>
<p>能够保证参与方在保持独立的情况下，进行信息与模型参数的加密交换，并同时获得成长。</p>
</blockquote>
<h4 id="联邦学习方式"><a href="#联邦学习方式" class="headerlink" title="联邦学习方式 "></a><font color="RoyalBlue"><strong>联邦学习方式</strong> </font></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Method</th>
<th>Differential Privacy</th>
<th>Secure Multi Party Comput.</th>
<th>Secure Aggregation</th>
<th>Homomorphic Encryption</th>
</tr>
</thead>
<tbody>
<tr>
<td>Efficiency</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>Strong Privacy</td>
<td>×</td>
<td>√</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>No accuracy loss</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√-</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p><font color="green"> <strong>DP</strong></font>  通过注入噪声增加对数据的保护(安全性较差)</p>
</li>
<li><p><font color="green"> <strong>MPC</strong></font> 多方合作，利用达成一致的同种方式计算。多方客户端通过一种特定受保护的同步协议进行同步，但是不适合于跨孤岛的联邦学习，对隐私或者计算性能都有很大的影响。</p>
</li>
<li><p><font color="green"> <strong>Secure Aggregation</strong></font> 易被其他实体获取</p>
</li>
<li><font color="green"> **HE**</font> 

<blockquote>
<p>1.对训练模型的保护</p>
<p>2.没有学习精度的缺失，没有噪声的引入</p>
<p>3.应用的话对系统无需额外的更改，仅仅是加密解密上的更新,但是，这增加了很多的系统负载（计算以及交互代价过高）</p>
</blockquote>
</li>
</ul>
<h3 id="HE应用于FL"><a href="#HE应用于FL" class="headerlink" title="HE应用于FL"></a><font color="b"><strong>HE应用于FL</strong></font></h3><p>​        上传数据到中心服务器的过程中，密钥对是通过加密信道在客户端之间传输的，客户上传加密过的数据到服务器，服务器聚集所有客户上传的密文，并将结果返回给客户为了保证在上传数据的时候不发生数据泄露，采用的方式包括同态加密，这种方式在保证加密的同时不降低学习的准确率。客户端通过已获取的密钥对解密返回的密文。这样无论客户端是否可信，读取的数据都是密文，即对数据进行了保护。</p>
<h4 id="HE性能瓶颈"><a href="#HE性能瓶颈" class="headerlink" title="HE性能瓶颈"></a><font color="blue"><strong>HE性能瓶颈</strong></font></h4><p>​        通过测试三个联邦学习的深度学习模型实例得出了性能瓶颈，主要是同态加密过程与通讯过程成为了主要性能瓶颈。</p>
<font color="green">**实验测试**</font>

<p>​    模拟不同的地理位置的客户，在EC2上开9个客户端，分布在5个不同的地理位置，利用FATE (Federated AI Technology Enabler)进行训练。</p>
<font color="green">**加密与通讯代价**</font>

<p>​        2.1 在三个数据集上的训练时间增加量分别为 96、135、154倍，提高了两个数量级，加密后的数据量分别带来了161、156、163倍的额外数据量。</p>
<p>​        2.2 客户端数据加密及解密时间占据8成；在聚合端（服务端），7成以上的时间用来等待数据的传输，聚合数据的时间只有10%</p>
<p><img src="/2020/09/13/BatchCrypt/Iterationtime.png" width="500px" height="300px"></p>
<p>​        其余时间用来从不同客户端收集数据、分发数据。（因为不同 客户端在不同的地理位置，因此不是同步传输）</p>
<font color="green">**为什么同态的代价如此高昂**</font>

<p>​        随着秘钥长度的增加，安全性会随之增加，但是带来的加密代价也是随之增加的。由于pailier只能处理整形的数据，在遇到浮点数的时候需要事先进行转化，因此这些数据加密时间并不是严格按照线性关系增加的。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Keysize</th>
<th>Plaintext</th>
<th>Ciphertext</th>
<th>Encryption</th>
<th>Decryption</th>
</tr>
</thead>
<tbody>
<tr>
<td>1024</td>
<td>6.87MB</td>
<td>287.64MB</td>
<td>216.87S</td>
<td>68.63S</td>
</tr>
<tr>
<td>2048</td>
<td>6.87MB</td>
<td>527.17MB</td>
<td>1152.98S</td>
<td>357.17S</td>
</tr>
<tr>
<td>3072</td>
<td>6.87MB</td>
<td>754.62MB</td>
<td>3111.14S</td>
<td>993.80S</td>
</tr>
</tbody>
</table>
</div>
<font color="green">**总结**</font>

<p>​        4.1 由于同态加密在此过程中占据主导地位，如果利用硬件加速模型计算，例如GPU、TPU，获得的意义不大；</p>
<p>​        4.2 不同的数据孤岛在不同的地理位置，因此大量的数据传输会带来额外的网络通讯费用。</p>
<font color="green">**解决方法**</font>

<ol>
<li>加速HE的操作时间：FPGA仅提高三倍的处理时间，但是通讯上未改进；</li>
<li>减少加密的操作（减少密文的长度），或者利用批处理方式对目标值进行处理。</li>
</ol>
<h4 id="FATE改进"><a href="#FATE改进" class="headerlink" title="FATE改进"></a><font color="blue"><strong>FATE改进</strong></font></h4><p>==目标==  想要获得高效的处理时间并且不会引入精度上的缺失。</p>
<p>==FATE局限性==</p>
<blockquote>
<ol>
<li>仅可以处理整数，无法处理浮点数，而梯度值不仅是浮点数而且是有符号的浮点数；</li>
<li>处理的数都是正整数，处理负数时要转化为正数，无法判断数字是正溢出还是负溢出。</li>
</ol>
</blockquote>
<p>==对梯度值进行量化==</p>
<p><img src="/2020/09/13/BatchCrypt/sign.png" width="500px" height="100px"></p>
<p>由于对浮点数进行加减需要对齐指数（阶码）后才能操作，因此对于仅可以处理整数的系统来说是不太现实的，需要对浮点数进行转化。</p>
<p>1.将浮点数转化为整数，利用转化后的整数进行计算；</p>
<p>2.采用两个符号位对浮点数进行正负标识，可以推断出数字的正负溢出。</p>
<p><img src="/2020/09/13/BatchCrypt/doublesign.png" width="500px" height="200px"></p>
<p>通过以上的处理，可以使用FATE系统对量化后的梯度值进行HE处理。</p>
<p>3.利用机器学习的方式，对数据进行剪枝处理，减少处理的数据量（去噪声），并且模型是动态变化的。（在线模型）</p>
<p>==架构图==</p>
<p><img src="/2020/09/13/BatchCrypt/batcharchitecture.png" width="500px" height="300px"></p>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a><font color="blue"><strong>实验结果</strong></font></h4><p>==实验环境==</p>
<p>AWS </p>
<p>Cluster of 10, spanning 5 locations （部署在五大洲）</p>
<p>C5.4xlarge instances (16 vCPUs, 32 GB memory) </p>
<p>==处理时间==</p>
<p><img src="/2020/09/13/BatchCrypt/lab-1.png" width="500px" height="200px"></p>
<p>==通讯时间==</p>
<p><img src="/2020/09/13/BatchCrypt/lab-2.png" width="500px" height="200px"></p>
<p>==总计时间==</p>
<p><img src="/2020/09/13/BatchCrypt/lab-3.png" width="500px" height="300px"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://blog.csdn.net/cao812755156/article/details/89598410?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">联邦学习</a></p>
<p>[2] <a href="https://ai.googleblog.com/2017/04/federated-learning-collaborative.html" target="_blank" rel="noopener">https://ai.googleblog.com/2017/04/federated-learning-collaborative.html</a></p>
]]></content>
      <categories>
        <category>paper</category>
        <category>ATC</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>Federal Learning</tag>
        <tag>Homomorphic</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudVisor-D</title>
    <url>/2020/10/17/CloudVisor-D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CloudMon</title>
    <url>/2020/09/14/CloudMon/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href>CloudMon</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"><a href="https://chuliangweng.github.io/" target="_blank" rel="noopener">Cl.W</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">这篇文章信任hypervisor并在此基础上对guestVM进行保护，主要是从内存角度出发，针对rootkit攻击进行运行时检测。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">System Security; Virtual Machine</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文构造一个动态的监控架构，并在此基础上保证guest VM 运行时的安全性，主要功能是在客户虚拟机中检测出rootkits攻击。</td>
</tr>
</tbody>
</table>
</div>
<p>​        本文构建了一个动态的监控架构，运行在特权级别，通过对guestVM内存的扫描，检测客户机是否受到rootkit攻击，从而保证guestVM的运行时安全性。利用虚拟化技术对客户机内存进行实时监控，且这些监控对于客户机是透明的，为了实现检测的有效与高效，本系统在性能和安全之间权衡。</p>
<h4 id="Rootkit-攻击"><a href="#Rootkit-攻击" class="headerlink" title="Rootkit 攻击 "></a><font color="blue"><strong>Rootkit 攻击</strong> </font></h4><p>​        rootkit 能够以特权级指令访问 host，并且可以通过对系统进行更改隐藏自己的存在。</p>
<p>​        检测rootkit，最好是对客户机透明，不更改客户机系统的前提下对其进行检测。</p>
<h3 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h3><p>​        假设VMM（hypervisor）与priviliged VM  是可信的，guest VM 会受到攻击，在开机阶段的安全性受到VMM的保护，并且对guest VM的攻击不会对privileged VM 的安全性造成影响。</p>
<p>（有些保护是针对VMM的，但是这不在本文的考虑范围内，本文聚焦在对客户机的保护上）</p>
<h3 id="CloudMon-系统设计"><a href="#CloudMon-系统设计" class="headerlink" title="CloudMon 系统设计"></a>CloudMon 系统设计</h3><p>​        目的是实现一个可以访问较低权限级别内存信息、检测潜在的攻击并且可以保证检测的实时性与系统性能。访问内存的操作实现是基于 Xen的xenctrl 库，这个库能够读取较低权限的内存（如guest VM的内存信息）。</p>
<p>​        构建一个guest VM 内存的监控器，目标是对VM透明、高效且是瞬时性的，这种方式可行性是因为攻击者对VM内存任何的更改都是可见的。CloudMon扫描内核memory与寄存器，从而可以实时的检测内存状态变化。这是一个特权级别的VM，能够通过VMM访问其他VMs的内存信息，而不是单纯的一个安全的guest VM。</p>
<p><img src="/2020/09/14/CloudMon/CloudMonArchitecture.png" width="400px" height="240px"></p>
<p>​        从云中大量的攻击实例中提取rootkit攻击特征，并将该特征记录在Feature Lib中，通过比较RT Value 与 SV Table 中数值的差异情况，可以检测出系统调用表中的攻击情况，设置较小的检测时间间隔，可以近似实时的检测嵌入内核的 rootkit ，通过设置检测的时间间隔，可以控制性能开销。并且CloudMon会直接检索其内存，因此，包括DKSM 和Shadow Walker 在内的任何来宾内核rootkit都不会欺骗CloudMon。 </p>
<font color="green">**获取开始地址信息**</font>

<p>​        KV Searcher查找 guest VM 系统调用的起始地址，SV generator 通过扫描，比对通过大量OS攻击实例中获取到的攻击特征，从而可以判断出被攻击者。</p>
<h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a><font color="blue"><strong>实验环境</strong></font></h4><div class="table-container">
<table>
<thead>
<tr>
<th>Xen</th>
<th>priviliged VM</th>
<th>guest VM</th>
</tr>
</thead>
<tbody>
<tr>
<td>Xen-3.4.2</td>
<td>Ubuntu 9.04</td>
<td>Ubuntu 8.04</td>
</tr>
</tbody>
</table>
</div>
<p>已经存在的检测方式：</p>
<ol>
<li><p>获取guest OS的system.map信息</p>
</li>
<li><p>one-on-one 运行在guest VM上</p>
</li>
</ol>
<h3 id="相关工作介绍"><a href="#相关工作介绍" class="headerlink" title="相关工作介绍"></a>相关工作介绍</h3><p>本文将对VM的保护机制分为了 out-of-VM  与 in-VM两种</p>
<p>A类：out-of-VM</p>
<ol>
<li><p>利用受信任的VM充当监控器。OSck,是一种one-on-one的监控模式</p>
</li>
<li><p>XenKIMONO 在VM中聚集信息时会暂停OS的执行</p>
</li>
<li><p>vIPS 通过预先设置，这种检测规则需要有固定的检测时间间隔</p>
</li>
</ol>
<p>B类：in-VM</p>
<ol>
<li><p>硬件虚拟化技术</p>
</li>
<li><p>Lares 在guest VM 中内置hooks（钩子函数）实时的检测虚拟机的安全（事件检测）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>paper</category>
        <category>TC</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>Virtual Machine</tag>
        <tag>System Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</title>
    <url>/2020/05/15/Amazon-Aurora-Design-Considerations-for-High%20Throughput%20Cloud-Native%20Relational%20Databases/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://dl.acm.org/doi/epdf/10.1145/3035918.3056101" target="_blank" rel="noopener">Aurora</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Amazon</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">分布式数据库</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">致力于构建一个分布式数据库</td>
</tr>
</tbody>
</table>
</div>
<h3 id="0-研究背景-为什么出现Aurora？"><a href="#0-研究背景-为什么出现Aurora？" class="headerlink" title="0 研究背景 为什么出现Aurora？"></a>0 研究背景 为什么出现Aurora？</h3><p>&emsp; &emsp; Aurora是亚马逊云服务AWS中的关系型数据库服务，主要面向OLTP场景。 <strong>Aurora</strong>基本设计理念是在云上环境下，数据库的最大瓶颈不再是计算或者存储资源，而是网络，因此基于一套存储计算分离架构，将日志处理下推到分布式存储层，通过架构上的优化来解决网络瓶颈。 </p>
<p>&emsp; &emsp; 在云上环境下，存储计算分离作为解决系统弹性和伸缩性的方案越来越普遍。广义来说，任何数据库，底下文件系统挂一个分布式存储，即可以认为做到了存储计算分离。通过存储计算分离，可以透明添加存储节点，剔除故障节点，进行故障切换，扩展存储空间等。在这个背景下，IO不再成为数据库的瓶颈，因为IO压力可以打散在多个存储节点上，反而是<strong>网络成为瓶颈</strong>，因为数据库实例与所有存储节点的交互都需要通过网络，尤其是为了提升数据库性能，数据库实例与存储节点可能是并行交互的，这进一步加重了网络压力。</p>
<p>&emsp; &emsp; 传统数据库中的IO操作是需要同步执行的，当需要进行IO等待时，这往往会导致线程上下文切换，影响数据库性能。比如IO读操作，当需要访问一个数据页时，如果在缓冲池没有命中，则需要进行磁盘IO，那么读线程需要等待IO完成才能继续其它操作，同时这种动作可能会进一步引发刷脏页等。另外一个我们熟悉场景是事务提交操作(IO写操作)，事务提交成功返回前一定要等待事务对应日志刷盘才能返回，由于事务是串行提交，因此其它事务也必须同步等待这个事务提交。 <strong>传统数据库中的两阶段事务尤其不适合与分布式云环境，因为二阶段提交协议对系统中参与的节点和网络要求很高，自身容错能力有限，这点与大规模分布式云环境中，软件和硬件故障是常态的特征是矛盾的。</strong></p>
<p>&emsp; &emsp; 本文介绍的Aurora是一个云上环境全新的数据库服务可以很好的解决上述传统数据库遇到的问题。 <strong>它基于存储计算分离的架构，并将回放日志部分下推到分布式存储层，存储节点与数据库实例(计算节点)松耦合，并包含部分计算功能。</strong> Aurora体系下的数据库实例仍然包含了大部分核心功能，比如查询处理，事务，锁，缓存管理，访问接口和undo日志管理等；但redo日志相关的功能已经下推到存储层，包括日志处理，故障恢复，备份还原等。</p>
<h3 id="1-面临问题"><a href="#1-面临问题" class="headerlink" title="1 面临问题"></a>1 面临问题</h3><p>&emsp;&emsp;在云环境中，将存储和计算分离已经成为解决系统弹性和可伸缩性的方案。实现存储计算分离，可以进行故障切换，扩展存储空间等。因此磁盘IO压力可以打散在多个存储节点上，所以IO不再成为数据库的瓶颈。存储和计算分离之后，数据库实例与所有存储节点的交互都需要通过网络，加重了网络带宽压力，从而网络成为瓶颈。</p>
<h3 id="2-问题带来的挑战"><a href="#2-问题带来的挑战" class="headerlink" title="2 问题带来的挑战"></a>2 问题带来的挑战</h3><p>&emsp;&emsp;在云环境中数据库的瓶颈不再是计算或者是资源存储，而是网络。基于此，Aurora设计了存储和计算分离的架构，与传统数据库相比较，这些问题带来的挑战如下。</p>
<p>&emsp;&emsp;传统数据库中的IO操作是需要同步执行的，当需要进行IO等待时，这往往会导致线程上下文切换，影响数据库性能。如IO读操作，当需要访问一个数据页时，如果在缓冲池没有命中，则需要进行磁盘IO，那么读线程需要等待IO完成才能继续其它操作，同时这种动作可能会进一步引发刷脏页等。云环境中的IO操作与传统数据库中的操作是不同的，这带来了IO操作的挑战。</p>
<p>&emsp;&emsp;事务提交操作，事务提交成功返回前一定要等待事务对应日志刷盘才能返回，由于事务是串行提交，因此其它事务也必须同步等待这个事务提交。传统数据库中的两阶段事务尤其不适合与分布式云环境，因为二阶段提交协议对系统中参与的节点和网络要求很高，自身容错能力有限，这点与大规模分布式云环境中，软件和硬件故障是常态的特征是矛盾的，这又是一大挑战。</p>
<h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3 解决方法"></a>3 解决方法</h3><p>&emsp;&emsp;Aurora是一个云上环境全新的数据库服务可以很好的解决上述问题带来的挑战。它基于存储计算分离的架构，并将回放日志部分下推到分布式存储层，存储节点与数据库实例(计算节点)松耦合，并包含部分计算功能。Aurora体系下的数据库实例仍然包含了大部分核心功能，但redo日志相关的功能已经下推到存储层，包括日志处理，故障恢复，备份还原等。</p>
<h5 id="3-1-数据存储"><a href="#3-1-数据存储" class="headerlink" title="3.1 数据存储"></a><strong>3.1</strong> <strong>数据存储</strong></h5><p>&emsp;&emsp;Aurora存储层的复制基于Quorum协议，假设复制拓扑中有V个节点，每个节点有一个投票权，读或写必须拿到Vr 或 Vw个投票才能返回。为了满足一致性，需要满足两个条件，首先Vr + Vw &gt; V，这个保证了每次读都能读到拥有最新数据的节点；第二，Vw &gt; V/2，每次写都要保证能获取到上次写的最新数据，避免写冲突。</p>
<p>&emsp;&emsp;结合Quorum模型，V=6 ，Vw=4，Vr=3，Aurora可以容忍任何一个AZ出现故障，不会影响写服务；任何一个AZ出现故障，以及另外一个AZ中的一个节点出现故障，不会影响读服务且不会丢失数据。通过Quorum协议，Aurora可以保证只要AZ级别的故障(火灾，洪水，网络故障)和节点故障(磁盘故障，掉电，机器损坏)不同时发生，就不会破坏协议本身，数据库可用性和正确性就能得到保证。</p>
<h5 id="3-2-日志即数据"><a href="#3-2-日志即数据" class="headerlink" title="3.2 日志即数据"></a><strong>3.2</strong> <strong>日志即数据</strong></h5><p>&emsp;&emsp;以MySQL为例，考虑主备复制，如图1所示，AZ1和AZ2分别部署一个MySQL实例做同步镜像复制，底层存储采用EBS，并且每个EBS还有自己的一份镜像，另外部署S3进行redo日志和binlog日志归档，以支持基于时间点的恢复。每个步骤都需要传递5种类型的数据，包括redo，binlog，data-page，double-write和frm元数据。图中的1，3，5步骤是顺序的，要进行4次网络IO，且其中3次是同步串行的。从存储角度来看，数据在EBS上存了4份，需要4份都写成功才能返回。所以在这种架构下，无论是IO量还是串行化模型都会导致性能损耗。</p>
<p><img src="/2020/05/15/Amazon-Aurora-Design-Considerations-for-High%20Throughput%20Cloud-Native%20Relational%20Databases/1.png" width="300px" height="300px"></p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;图1. Mirrored MySQL写操作流程</p>
<p>&emsp;&emsp;在Aurora中，所有的写类型只有一种，那就是redo日志。修改一个数据页，会同步产生对应的redo日志。事务提交时，需要事务对应的redo日志都落盘成功后才能返回。存储节点接收redo日志，基于旧版本数据页回放日志，可以得到新版本的数据页。为了避免每次都从头开始回放数据页变更产生的redo日志，存储节点会定期物化数据页版本。Aurora由跨AZ的一个主实例和多个副本实例组成，主实例与副本实例或者存储节点间只传递redo日志和元信息。主实例并发向6个存储节点和副本实例发送日志，当4/6的存储节点应答后，则认为日志已经持久化。传统数据库宕机重启后，恢复从最近的一个检查点开始，读取检查点后的所有redo日志进行回放，确保已经提交的事务对应的数据页得到更新。</p>
<p>&emsp;&emsp;在Aurora中，redo日志相关的功能下推到存储层，回放日志的工作可以一直在后台做。真正进行故障恢复时，需要做的事情很少，所以故障恢复的速度非常快。Aurora存储服务设计的一个关键原则是减少前台用户写的响应时间，因此将尽可能多的操作移到后台异步执行，并且存储节点会根据前台的请求压力，自适应分配资源做不同的工作。对于Aurora而言，分离的存储服务层使得后台线程推进检查点动作完全不影响数据库实例，并且是推进地越快，越有利于前台的磁盘IO读操作。Aurora写基于Quorum模型，存储分片后，按片达成多数即可返回，由于分布足够离散，少数的磁盘IO压力大也不会影响到整体的写性能。</p>
<p><img src="/2020/05/15/Amazon-Aurora-Design-Considerations-for-High%20Throughput%20Cloud-Native%20Relational%20Databases/2.png" width="400px" height="300px"></p>
<p>如上图所示，图中详细介绍了主要的写流程，</p>
<p>1).存储节点接收数据库实例的日志，并追加到内存队列；</p>
<p>2).将日志在本地持久化成功后，给实例应答；</p>
<p>3).按分片归类日志，并确认丢失了哪些日志；</p>
<p>4).与其它存储节点交互，填充丢失的日志；</p>
<p>5).回放日志生成新的数据页；</p>
<p>6).周期性地备份数据页和日志到S3系统；</p>
<p>7).周期性地回收过期的数据页版本；</p>
<p>8).周期性地对数据页进行CRC校验。</p>
<p>&emsp;&emsp;上述所有写相关的操作，只有第1)和第2)步是串行同步的，会直接影响前台请求的响应时间，其它操作都是异步的。</p>
<h4 id="3-3-事务提交"><a href="#3-3-事务提交" class="headerlink" title="3.3 事务提交"></a><strong>3.3</strong> <strong>事务提交</strong></h4><p>&emsp;&emsp;在Aurora中，数据库实例向存储节点传递redo日志，达成多数派后将事务标记为提交状态，然后推进VDL，使数据库进入一个新的一致状态。每个事务的每条redo日志都会分配一个唯一的LSN，这个LSN一定大于当前最新的VDL。由于底层存储按segment分片，每个分片管理一部分页面，当一个事务涉及的修改跨多个分片时，事务对应的日志被打散，每个分片只能看到这个事务的部分日志。为了确保各个分片日志的完整性，每条日志都记录前一条日志的链接，通过前向链接确保分片拥有了完整的日志。Segment Complete LSN(SCL)表示分片拥有完整日志的位点，存储节点相互间通过gossip协议来弥补本地日志空洞，推进SCL。</p>
<p>&emsp;&emsp;在Aurora中，事务提交是完全异步的。每个事务由若干个日志组成，并包含有一个唯一的“commit LSN”，工作线程处理事务提交请求时，将事务相关的日志提交到持久化队列并将事务挂起，并继续处理其它数据库请求。当VDL的位点大于事务的LSN时，表示这个事务redo日志都已经持久化，可以向客户端回包，通知事务已经成功执行。在Aurora中，有一个独立的线程处理事务成功执行的回包工作，因此，从整个提交流程来看，所有工作线程不会因为事务提交等待日志推进而堵塞，他们会继续处理新的请求，通过这种异步提交方式，大大提高了系统的吞吐。</p>
<h4 id="3-4-故障恢复"><a href="#3-4-故障恢复" class="headerlink" title="3.4 故障恢复"></a><strong>3.4</strong> <strong>故障恢复</strong></h4><p>&emsp;&emsp;大多数数据库系统通常会周期性地做检查点，并将检查点信息计入日志。故障时，数据页中同时可能包含了提交和未提交的数据，因此，在故障恢复时，系统首先需要从上一个检查点开始回放日志，将数据页恢复到故障时的状态，然后根据undo日志回滚未交事务。从故障恢复的过程来看，故障恢复是一个比较耗时的操作，并且与检查点操作频率强相关。通过提高检查点频率，可以减少故障恢复时间，但是这直接会影响系统处理前台请求吞吐，所以需要在检查点频率和故障恢复时间做一个权衡，而在Aurora中不需要做这种权衡。</p>
<p>&emsp;&emsp;Aurora将回放日志逻辑下推到存储节点，并且在数据库在线提供服务时在后台常态运行。因此，当出现故障重启时，存储服务能快速恢复。数据库实例宕机重启后，需要故障恢复来获得运行时的一致状态，实例与仲裁协议确定的N个存储节点通信，这样确保能读到最新的数据，并重新计算新的VDL，超过VDL部分的日志都可以被截断丢弃。在Aurora中，对于新分配的LSN范围做了限制，这个主要是为了避免数据库实例上堆积过多的未提交事务。</p>
<h3 id="4-实验验证"><a href="#4-实验验证" class="headerlink" title="4 实验验证"></a>4 实验验证</h3><p>&emsp;&emsp;本文的实验对Aurora的读写能力，吞吐量大小，以及部署后用户的使用数据对Aurora进行了分析。</p>
<p>&emsp;&emsp;从sysbench测试的数据来看，Aurora是基于镜像MySQL吞吐能力的35倍，每个事务的日志量比基于镜像MySQL日志量要少7.7倍。从用户的使用数据来看，某游戏公司使用后web应用响应时间明显降低，由之前的15ms降低到5.5ms,性能提高了近3倍，而且时间延迟明显降低。</p>
<p>&emsp;&emsp;基于实验验证，Aurora相对于传统数据库的优势如下：</p>
<p>&emsp;&emsp;第一，底层数据库存储是一个分布式存储服务，可以轻松应对故障；</p>
<p>&emsp;&emsp;第二，数据库实例往底层存储层只写redo日志，因此数据库实例与存储节点之间的网络压力大大减小，这为提升数据库性能提供了保障；</p>
<p>&emsp;&emsp;第三，将部分核心功能(故障恢复，备份还原)下推到存储层，这些任务可以在后台不间歇地异步执行，并且不影响前台用户任务。</p>
<h3 id="5-相关工作"><a href="#5-相关工作" class="headerlink" title="5 相关工作"></a>5 相关工作</h3><p>&emsp;&emsp;本文的相关工作主要是在分布式存储的将存储与计算解耦、分布式系统、并发控制、日志结构的存储与数据恢复等几个方面分别进行描述的。在描述的过程中，首先通过对Aurora面临的问题进行逐个层面的分析，并对相关工作进行总结，在分析之后，将已有工作与Aurora相结合，并通过Aurora与先有工作进行比较说明，进一步阐述Aurora的实现原理。</p>
<p>&emsp;&emsp;将存储与计算解耦：在此处本文提出与传统系统通常作为整体不同的数据库系统，介绍了有一些关于将内核分解为不同组件的数据库的研究。Deuteronomy 将提供并发控制和恢复的事务组件（TC）与提供LLAMA访问方法的数据组件（DC）分开，结构化缓存和存储管理器。Sinfonia和Hyder是在横向扩展服务上抽象事务访问方法的系统，并且可以使用这些抽象来实现数据库系统。Yesquel系统实现了多版本分布式平衡树，并将并发控制与查询处理器分离。在Aurora中，将查询处理、事务、并发、缓冲区高速缓存和访问方法与作为横向扩展服务实现的日志记录，存储和恢复分离。</p>
<p>&emsp;&emsp;分布式系统：首先指出已经证明过的Brewer CAP定理，指出高度可用的系统无法在存在网络分区的情况下提供“强”的一致性保证。这个结果激发了作者对一致性目标的追求。并对相关工作进行总结，Bailis等人研究了提供高可用事务（HATs）的问题，该事务既不会在分区期间遭受不可用，也不会导致高网络延迟。他们表明可串行性，快照隔离和可重复读取隔离不符合HAT的要求，而大多数其他隔离级别都可以通过高可用性实现。Aurora通过简化假设，即在任何时候只有一个写入器使用从单个有序域分配的LSN生成日志更新来提供所有这些隔离级别。Google的Spanner提供外部一致的读写操作，并在一个时间戳上跨数据库提供全局一致的读取信息。这些功能使Spanner支持一致的备份，一致的分布式查询处理以及原子模式更新，所有这些都是在全球范围内进行的，甚至在正在进行的事务存在的情况下也是如此。Spanner专门针对Google的繁重工作负载，并依靠两阶段提交和两阶段锁定来进行读/写事务。</p>
<p>&emsp;&emsp;并发控制：本文指出较弱的一致性和隔离模型在分布式数据库中是众所周知的，并导致了乐观的复制技术以及最终的一致性系统。集中式系统中的其他方法包括基于锁定的经典悲观方案，Hekaton中的多方案并发控制之类的乐观方案，VoltDB等分片方法和HyPer中的时间戳排序和Deuteronomy . Aurora的存储服务为数据库引擎提供了持久保留的本地磁盘的抽象，并允许引擎确定隔离和并发控制。</p>
<p>&emsp;&emsp;日志结构存储：先介绍日志结构的起源，日志结构的存储系统由LFS 在1992年引入。并对最近的日志结构存储的相关工作进行总结，Deuteronomy 以及LLAMA 和Bw-Tree 的相关工作在存储引擎堆栈中以多种方式使用日志结构化技术。最后对本文提出的Aurora与Deuteronomy 进行横向比较说明。Aurora，通过编写增量而不是整个页面来减少写放大，Deuteronomy 和Aurora都实现纯重做日志记录，并跟踪最高稳定的LSN以确认提交。</p>
<p>&emsp;&emsp;恢复：尽管传统数据库依赖于基于ARIES 的恢复协议，但是一些最近的系统已经选择了其他途径来提高性能。例如，Hekaton和VoltDB在崩溃后使用某种形式的更新日志来重建其内存状态。像Sinfonia这样的系统通过使用诸如进程对和状态机复制之类的技术来避免恢复。Graefe 描述了一种具有每页日志记录链的系统，该系统可以按需进行逐页重做，从而可以快速恢复。与Aurora一样，Deuteronomy 不需要重做恢复。这是因为Deuteronomy 会延迟事务，因此只有已提交的更新才会发布到持久存储中。结果，与Aurora不同，Deuteronomy 中的交易规模可能受到限制。</p>
<h3 id="6-总结建议"><a href="#6-总结建议" class="headerlink" title="6 总结建议"></a>6 总结建议</h3><p>&emsp;&emsp;在计算与存储分离的云基础设施之上，通过仅传输redo log，大幅减少跨网络的IO数据传输，将产生大量IO的数据页合并和持久化交由本地存储来解决，大幅减缓了网络延迟对数据库性能的影响。即使网络传输的速度不再是分布式数据库的瓶颈，这种“日志即数据“的思想也是有意义的，因为在分布式数据库中的计算，存储，网络中，网络通信的功耗是最大的。</p>
<p>&emsp;&emsp;Aurora诞生的原因是在弹性伸缩的云环境下，传统的高吞吐<strong>OLTP</strong>数据库既不能保证可用性，又不能保证持久性。 <strong>Aurora</strong>的关键点在于将传统数据库中的存储与计算分离，具体而言，将日志部分下推到一个独立的分布式存储服务层。由于这种分离架构下，所有IO操作都是通过网络，网络将成为最大的瓶颈，因此Aurora集中精力优化网络以便提高系统吞吐能力。Aurora依靠Quorum模型，在性能影响可控的前提下，解决云环境下的各种异常错误。在Aurora中，日志处理技术减少了I/O写放大，异步提交协议避免了同步等待，同时分离的存储服务层还避免了离线故障恢复和检查点操作。</p>
<p>&emsp; &emsp;Aurora相对于传统数据库有三大优势，首先，底层数据库存储是一个分布式存储服务，可以轻松应对故障；其次，数据库实例往底层存储层只写redo日志，因此数据库实例与存储节点之间的网络压力大大减小，这为提升数据库性能提供了保障；第三，将部分核心功能(故障恢复，备份还原)下推到存储层，这些任务可以在后台不间歇地异步执行，并且不影响前台用户任务。</p>
<p>&emsp;&emsp;批评性建议：</p>
<p>&emsp;&emsp;1.在存储结构方面，论文中没有给出caching很明确的细节说明，Caching是位于了存储层内还是计算层内？读者只能靠猜测。如果在文中给出了具体的细节说明，可能对读者理解本文具有很大的帮助。</p>
<p>&emsp;&emsp;2.Amazon Aurora是基于开源MySQL的数据库，理论上修改GPL协议的开源软件再开发一个新软件是需要开源的，但它本身没有开放源代码，是一个闭源数据库。</p>
<p>&emsp;&emsp;3.为什么备机节点可以多达15个呢？是为了应对数据库的读负载还是作为故障转移的目标，需要这么多备机做备选？本文在15个备份节点的解释上不是很清楚，读后存有疑惑。</p>
<p>下面引用两位专家对Aurora的评价：</p>
<p>Percona Vadim Tkachenko: Aurora没有解决写拓展和分库分表的问题。（2017）</p>
<p>Bill Karwin：Aurora不适合对具有二级索引的表进行大量写操作的场景。（2017）</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>SIGMOD</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>HIMA</title>
    <url>/2020/07/21/HIMA/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://www.researchgate.net/publication/221046631_HIMA_A_Hypervisor-Based_Integrity_Measurement_Agent" target="_blank" rel="noopener">HIMA</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">本文提出的HIMA用于度量在Hypervisor上部署虚拟机之间的完整性。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">分布式系统构建信任</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">完整性度量</td>
</tr>
</tbody>
</table>
</div>
<h3 id="main-idea"><a href="#main-idea" class="headerlink" title="main idea"></a>main idea</h3><p>完整性度量是在分布式系统间构建信任的关键问题。完整性度量需要在度量代理和度量目标之间构建强大的隔离，并在使用时间检查之间实现良好的隔离。</p>
<p>本问题提出的HIMA是一种基于Hypervisor的代理，可以测量在Hypervisor上运行虚拟机的完整性。</p>
<ol>
<li><p>主动监测关键guest 事件</p>
</li>
<li><p>guest内存保护</p>
</li>
</ol>
]]></content>
      <categories>
        <category>paper</category>
        <category>ACSAC</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>Detection</tag>
        <tag>Hypervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Dancing with Wolves</title>
    <url>/2020/06/27/Dancing-with-Wolves/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://dl.acm.org/doi/pdf/10.1145/3050748.3050750" target="_blank" rel="noopener">Dancing with wolves</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Liang Deng,Nanjing University</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">对非可信的VMM进行事件监测</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">检测</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">通过ASR与IPR技术，ED-monitor可以及时、频繁地对VMM的监测</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Main-idea"><a href="#Main-idea" class="headerlink" title="Main idea"></a>Main idea</h3><p>&emsp;&emsp;VMM的执行权限最高，一旦VMM受到威胁，那么其所处的整个云环境都会受到威胁。因此本文目标是对云计算中非可信的VMM实时攻击进行事件驱动监控。为了保证VMM事件监控的可靠性，需要保证monitor自身的可靠。在具体实现过程中，将VMM的特权级指令清空，并转移到monitor执行。通过IPR实现对VMM特权级指令的拦截，通过ASR技术防止VMM篡改hook函数位置和VMM自身的代码。</p>
<p>&emsp;&emsp;Q: 为什么要提供事件监测？</p>
<p>&emsp;&emsp;A: 因为对于瞬时攻击而言，仅通过轮询的方式对VMM进行完整性监测，很难捕捉到攻击的踪迹，但是基于事件的方式则可以对攻击所触发的事件进行拦截。</p>
<p>本文是国家自然基金项目支持，代码并未开源。</p>
<h3 id="ED-monitor"><a href="#ED-monitor" class="headerlink" title="ED-monitor"></a>ED-monitor</h3><p>&emsp;&emsp;实现事件监控对monitor的要求：monitor与VMM具有相同的执行权限（避免了不同权限之间转换带来的性能损失），monitor需要及时频繁地被调用。</p>
<p>&emsp;&emsp;读到这里，感觉再往下深入就是解决几个问题：</p>
<ol>
<li><p>如何实现ASR？</p>
</li>
<li><p>如何实现IPR？</p>
</li>
<li><p>如何触发monitor？</p>
<p>当需要在VMM中调用特权级指令的时候，会对monitor进行调用。</p>
</li>
<li><p>如何保证monitor的完整性？</p>
<p>分为monitor memory完整性、控制流完整性和定制VMM调用monitor接口实现。</p>
</li>
<li><p>如何保证VMM不对自身hook函数的篡改？对hypervisor所有事件添加hook？</p>
<p>采用W+X mapping policy对code hook的保护；</p>
<p>使用SPT保护data hook.</p>
</li>
<li><p>安全性分析？</p>
<p>几种保护机制可以满足安全的需求。可以实现对特权级指令的拦截、对其验证、防止对monitor的篡改，从而保证了monitor的完整性。IPR与ASR可以实现对原型的保护。</p>
</li>
<li><p>原型实现？</p>
</li>
</ol>
<h3 id="0-Abstract"><a href="#0-Abstract" class="headerlink" title="0 Abstract"></a>0 Abstract</h3><p>高风险漏洞可能会使VMMS完全受损</p>
<p>（这里提出的目的是说明在非信任环境中进行检测是十分必要的）</p>
<p>VMM拥有最高执行权限，如果它被攻击的话，将会威胁整个环境，因此对VMM进行检测是必要的。</p>
<p>main idea: 对云计算中非可信的VMM进行事件监控，不需要比VMM更高的特权级别也不需要特殊硬件的支持。</p>
<h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h3><p>监控器应与VMM 处于相同的特权级别，并且在之间的转换上不能产生大量的时间代价</p>
<p>且为了实现通过监控器就能捕获VMM的事件，需要保证监控器本身的完整性以及能够获取到VMM的事件，此时认为VMM是处于非可信状态的。</p>
<p>Q: SMM不能读取MMU的配置，所以不适格作为事件驱动器的实现，也就是事件驱动监控器必须要获得MMU的配置？</p>
<p>Q：这种基于事件驱动的监控，与时间依赖的关系？</p>
<p>瞬时攻击能不能进行？</p>
<p>本意：如果及时并且频繁的调用该监控器，那么就可以阻止瞬时攻击？</p>
<p>当事件被触发就可以调用monitor，从而对VMM进行保护？</p>
<p>当VMM访问监控器数据的时候，将会及时地调用监控程序进行完整性评估</p>
<h3 id="2-Overview"><a href="#2-Overview" class="headerlink" title="2 Overview"></a>2 Overview</h3><h4 id="2-1-Threat-model"><a href="#2-1-Threat-model" class="headerlink" title="2.1 Threat model"></a>2.1 Threat model</h4><p>&emsp;&emsp;认为威胁来自于VMM，VMM拥有最高的执行权限，而且能够获取到内存或者磁盘中任意数据。如果VMM受到攻击的话，则攻击者具备VMM的权限，威胁整个机器。不考虑硬件威胁，开机过程也受信任。</p>
<h4 id="2-2-Eventdriven-VMM-Monitoring"><a href="#2-2-Eventdriven-VMM-Monitoring" class="headerlink" title="2.2 Eventdriven VMM Monitoring"></a>2.2 Eventdriven VMM Monitoring</h4><p>hook 函数</p>
<p>做什么的？</p>
<p>钩子函数是置于VMM中的触发函数，目的是捕获指定的VMM事件行为，当产生这些行为的时候，VMM会运行钩子函数，从而激发对VMM完整性的检测。</p>
<p>钩子函数通常如何设置？</p>
<p>这些钩子函数可以是插入VMM代码中任意位置的代码挂钩（跳转指令），调用表内的数据挂钩或任何其他可以传输控制流的技术。</p>
<h4 id="2-3-Placing-the-Monitor-in-the-Same-World"><a href="#2-3-Placing-the-Monitor-in-the-Same-World" class="headerlink" title="2.3 Placing the Monitor in the Same World"></a>2.3 Placing the Monitor in the Same World</h4><h4 id="2-4-Requirements-and-Challenges"><a href="#2-4-Requirements-and-Challenges" class="headerlink" title="2.4 Requirements and Challenges"></a>2.4 Requirements and Challenges</h4><p>保证ED-monitor 是受信任的，即保证monitor自身的完整性，该monitor不能被VMM篡改</p>
<ol>
<li><p>内存、控制流、入口</p>
</li>
<li><p>hook 函数的位置不应该别VMM篡改（这个如何实现？）【因为VMM有 最高执行权限】</p>
</li>
</ol>
<h4 id="2-5-Our-Approach-Multual-Protection"><a href="#2-5-Our-Approach-Multual-Protection" class="headerlink" title="2.5 Our Approach: Multual-Protection"></a>2.5 Our Approach: Multual-Protection</h4><p>Q:这里写的比较简略，地址空间随机化如何能保证code和data？但VMM具备了最高执行权限，会有效果吗？（应用级别攻击）</p>
<p>下文提到，VMM的权限可以获取到随机化后的monitor的remap，因此目前的ASR对事件的监控可能是无效的。本文的想法是限制VMM的特权指令，并让monitor代替执行最高权限。（这样VMM中进行最高权限的操作将会被monitor捕获）</p>
<p>本文的解决方法是：同时使用ASR和本文提出的IPR（基于工具的指令限制）方法，IPR通过ASR保证对VMM最高权限操作的拦截与验证，同时ASR基于IPR减轻部分威胁（来自于谁的威胁？）</p>
<p>ASR：这种技术主要是对进程的表、堆、主程序代码、静态数据段、共享库等所在的地址进行随机化。如果某些代码的位置固定，那么一份攻击成功的话，就可以应用到其他机器继续进行攻击。因此ASR技术可以降低攻击成功的概率，并且使得攻击难以移植。</p>
<p>另：一种技术叫做ALSR，Address space layout randomization，地址空间布局随机化</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>VEE</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>System Security</tag>
        <tag>Detection</tag>
        <tag>Event-driven</tag>
      </tags>
  </entry>
  <entry>
    <title>FHEW</title>
    <url>/2020/08/13/FHEW/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://eprint.iacr.org/2014/816.pdf" target="_blank" rel="noopener">FHEW</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Centrum Wiskunde &amp; Informatica, Amsterdam</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">对全同态加密中 bootstraping 进行优化</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">同态加密</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">优化影响同态加密效率的主要瓶颈——Gentry 的引导程序</td>
</tr>
</tbody>
</table>
</div>
<h3 id><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>paper</category>
        <category>Cryptographic Techniques</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>Homomorphic</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating Systems</title>
    <url>/2020/07/17/Operating-Systems/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Lares:An Architecture for Secure Active Monitoring Using Virtualization</title>
    <url>/2020/05/03/Lares-An-Architecture-for-Secure-Active-Monitoring-Using-Virtualization/</url>
    <content><![CDATA[<h3 id="Prevention-VS-Detection"><a href="#Prevention-VS-Detection" class="headerlink" title="Prevention VS Detection"></a>Prevention VS Detection</h3><p>Prevention侧重于阻止，即在攻击前拦截攻击，如阻止一个恶意驱动的加载。Detection侧重于检测，即在攻击成功后，检测是否发生过攻击。Prevention类的虚拟机监控又称Active Monitoring（主动监控），典型的有Lares。Detection类的虚拟机监控又称Passive Monitoring（被动监控），典型的有VICTOR。</p>
<ul>
<li><strong>Active Monitoring（Synchronous）</strong></li>
</ul>
<p>主动监控一般采用同步机制，即事件发生时进行拦截。所以主动监控适合于监控发生频率较低的事件，如进程的创建。对发生频率较高的事件进行拦截，如拦截线程的切换，则会带来较大的性能损耗，尤其是当这类事件会引起陷入hypervisor的时候。</p>
<ul>
<li><strong>Passive Monitoring （Asynchronous）</strong></li>
</ul>
<p>被动监控一般采用异步机制，即事件发生后进行检测，如周期性的扫描内存。发生频率较高的事件可通过这种方式进行检测。然而这种方法需要权衡性能和风险，确定一个合适的检测周期。过于频繁的检测会带来较大的性能损耗，而周期间隔较大又可能遗漏攻击行为（攻击行为发生在两次检测之间）。</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>虚拟化安全</tag>
      </tags>
  </entry>
  <entry>
    <title>PrivateEye</title>
    <url>/2020/10/09/PrivateEye/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://www.usenix.org/system/files/nsdi20-paper-arzani.pdf" target="_blank" rel="noopener">PrivateEye</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">对部署在云上的虚拟机进行保护，而不是对hypervisor进行防护</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">保护云安全</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">通过对少数机器进行保护，得到攻击者特征，并利用此特征对云上全部机器进行保护。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>​        云中会部署一些可以检测VM是否受攻击的检测系统，但是往往都没有启用，这就使得VM在云上几乎在没有任何保护的情况下运行，这在安全的角度看是十分不可取的。让用户在不受保护的状态下运行或者完全在云供应商提供的检测系统的保护下运行，这两者似乎都不可取。如果不保护，则受攻击的VM可以攻击其余未被攻击的VM，并且不是所有的用户都需要在被严格保护的情况下运行。经过统计，约5%的用户愿意承担云供应商提供的安全监测系统的额外费用。本文基于此提出PrivateEye解决方案，它是一个可扩展、解决隐私保护的解决方案，能够对数据中心全部的VM进行防护。通过检测较少的机器，将检测后结果应用于云中其余的机器进行检测。</p>
<p>保护的定位：<br>针对云上的VMs,而不是hypervisor本身。</p>
<p>使用的方法：<br>利用机器学习的方法，根据已经存在的5%的少数用户特征，应用于云上全部主机检测。</p>
<p>​        本文目标是提供给用户一个透明的（不需要用户权限）可以保护客户机隐私、数据中心级别的保护机制，并且无需进行广泛而昂贵的监控，目标是针对全部的VM进行防护。</p>
<p><img src="/2020/10/09/PrivateEye/private_1.png" width="500px" height="300px"></p>
<h3 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h3><p>​        本文认为任何VM都不是可信的，因为他们可以运行任何的代码，但是，云供应商提供的hypervisor、网络以及硬件是可靠的。并且认为供应商提供的检测方式能够足够精确的保护供应商提供的VMs.其中恶意软件为了掩盖其攻击能够调整自身行为，但是恶意软件无法识别VM是否受到供应商的保护。并且云供应商的保护软件可以通过近期的检测重新训练PrivateEye，因此PrivateEye可以通过不断的训练起到保护云上主机安全的目的。</p>
<p>​        供应商仅能要求使用他们所提供工作负载的第一方VM使用OBDs,但是不能要求全部的VM都使用，并且在Azure的统计显示，超过95%的用户不使用OBDs。正因为用户不愿意使用供应商提供的检测器，所以基于此受限，供应商只能使用非侵入式的检测来保证VM不受侵害。</p>
<p>设计目标：</p>
<ol>
<li><p>GDPR（欧洲数据隐私法）： 要求可以追踪用户的个人隐私信息（PII），以便用户可以检查或者删除此信息。供应商需要在48小时内回答用户请求，这时供应商可以1. 使用原数据对数据进行连接和标记，2. 或者避免存储与PII相关的数据。这就要求VM的公共IP必须映射到用户账户，但公共IP 是动态及时分配的，因此GDPR 对PII的处理代价是十分昂贵的。（PrivateEye是如何处理的？）</p>
</li>
<li><p>较低的运行代价</p>
</li>
<li><p>OBD对大量的VM进行检测获取到充足的攻击数据集。</p>
</li>
<li><p>（OBDs 与PrivateEye关系：后者更宏观，前者更具有通用的保护性）</p>
</li>
</ol>
<p>OBDs是一个广泛的监控器，PrivateEye对VM有着更加严格的监控，目的是避免大量用户没必要的损失。在不必要的更进一步的检测时无需客户机的许可就会对VM进行保护，一旦发现可疑攻击，就会对VM发出警告，以请求更深入的检测VM。</p>
<p><img src="/2020/10/09/PrivateEye/architecture.png" width="500px" height="300px"></p>
<h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>• What is PrivateEye’s accuracy? </p>
<p>​        PrivateEye can detect 95.77% of compromised samples with 1% FPR.</p>
<p>• What causes PrivateEye’s false positives/negatives? </p>
<p>​        PrivateEye’s FNs were mostly OBD false positives.</p>
<p>• How does PrivateEye’s RF compare to other models? </p>
<p>​        PrivateEye’s FPs have similar flow-patterns to compro- mised VMs. </p>
<p>• How does PrivateEye’s sampling limit affect accuracy? </p>
<p>​        The choice of sampling limit is important.</p>
 <font color="green"> 蜜罐 </font>

<p>​        本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。蜜罐好比是情报收集系统。蜜罐好像是故意让人攻击的目标，引诱黑客前来攻击。所以攻击者入侵后，你就可以知道他是如何得逞的，随时了解针对服务器发动的最新的攻击和漏洞。还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络。</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>NSDI</category>
      </categories>
      <tags>
        <tag>Virtual Machine</tag>
        <tag>Hypervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>RADAR</title>
    <url>/2020/07/18/RADAR/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
      </tags>
  </entry>
  <entry>
    <title>SP&#39;15 Last-Level Cache Side-Channel Attacks are Practical</title>
    <url>/2020/05/18/SP-15-Last-Level-Cache-Side-Channel-Attacks-are-Practical/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://mykrobin.github.io/files/docs/CSCA-004-SP2015.pdf" target="_blank" rel="noopener">Last Level Cache Side Channel Attacks are Practical</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Department of Electrical Engineering, Princeton University</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">side channel attacks</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">security cross VM</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文详细地讲解了跨虚拟机的侧信道攻击</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>side channel attack</tag>
        <tag>cross VM</tag>
        <tag>last level cache</tag>
      </tags>
  </entry>
  <entry>
    <title>PCA图像压缩</title>
    <url>/2020/05/20/PCA%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<center><font face="黑体" size="8">一种基于SVD原理的PCA图像压缩算法</font></center>

<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&emsp;&emsp;伴随着信息交流频率和速度的不断加快，以及图像所展现的信息更加准确、形象，因此在众多的信息中图像信息十分重要。通过互联网传输会占用大量的网络带宽，并且大量的图像存储会占用大量的磁盘空间，为了解决图像传输过程中可能出现的带宽负载过重以及磁盘空间占用问题，本文旨在考虑保证视觉无损的情况下对输入图像进行批量的压缩处理。</p>
<p>&emsp;&emsp;图像压缩的目的是通过压缩算法减少输入图像所占磁盘那空间大小，并且保证图像压缩算法处理过的图像有较好的质量。通过压缩，可以有效的减轻磁盘占用以及网络传输负载。本文基于SVD分解矩阵的原理实现PCA图像压缩算法，首先，通过理论推导得到协方差矩阵特征值与矩阵奇异值之间的代数关系，然后对SVD奇异值从大到小进行排序，根据奇异值个数的不同，重构出不同的压缩图片。本文在保证视觉无损的情况下尽最大可能对一组航拍JPG图像进行批量压缩处理，并通过PSNR方法对压缩后的图像进行质量评价。通过实验，验证本方法的有效性以及高效性。</p>
<h3 id="一、项目概述"><a href="#一、项目概述" class="headerlink" title="一、项目概述"></a>一、项目概述</h3><p>&emsp;&emsp;随着近年来无人机技术的发展,无人机的应用逐渐普及到民用领域。利用无人机航拍可以大幅度提高很多不同类型任务的效率。如[6]中指出“国防军事、公共交通、环境监测、灾害探察、城市规划、国土勘测、资源探测、农林气象、影视制作、航拍测绘”等许多科研生活领域都离不开无人机的应用。</p>
<p>&emsp;&emsp;因此本项目的目标是，保证压缩图像不产生较大信息损失的基础上对无人机拍摄的图像进行实时的压缩处理。由于图像技术的快速发展,无人机航拍对图像的分辨率要求也越来越高。图像所包含的信息对于科学研究是十分重要的，但对于图像数据的远程传输来说,直接传输原始图像数据需要很高的带宽并占用大量的磁盘空间,所以在传输之前进行图像压缩是很有必要的。同时图像中包含信息量的多少，将会对图像研究结果产生影响，这就要求在对图像压缩的过程中既要进行压缩处理，又要保证处理之后的图像不能产生较大的信息损失。</p>
<p><strong>研究现状</strong></p>
<p>&emsp;论文[1]中提出的基于在线学习词典的压缩算法，在较低压缩比的情况下，有着较好的SNR结果。</p>
<p>论文[2]提出了一种基于K-SVD的面部图像压缩方法。该方法为预定义的图像补丁训练K-SVD字典，并根据这些字典压缩每个新图像。但是，这种方法会产生一些块状效应，K值的不同选择可能会对压缩后的图片产生很大的影响。</p>
<p>论文[3]介绍了一种由PCA和反向传播组成的混合学习方法，用于将RGB彩色图像压缩为具有与原始彩色图像相同像素数的黑白图像。这种减小实现了3.7的压缩比，同时保留了再现原始彩色图像近似值的能力，该近似值对于最小平方误差而言是最佳的。虽然本文提出的方法实现了3.7的压缩比，但是，失去了原始图像色彩上的信息量。</p>
<p>论文[4]中指出主成分分析( Principal Component Analysis，PCA)通过分析各变量之间的相关关系，利用一组较少的、互不相关的新变量来线性表示初始变量。并从理论上推导出了PCA与SVD的内在联系，即PCA产生的协方差矩阵特征值等于SVD产生的矩阵奇异值的平方，且PCA产生的特征向量等于SVD产生的左奇异向量。</p>
<p>文献[5]研究结果表明，奇异值分解 ( Singular value decomposition， SVD) 因无需计算协方差矩阵，可以避免舍入误差，且数据的重构误差较传统的PCA小。</p>
<h3 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h3><p>&emsp;&emsp;现要对一组无人机航拍图像进行PCA压缩处理，要求在对图像处理的过程中既要进行压缩处理，又要保证图像压缩算法处理过的图像有较好的质量。</p>
<h3 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h3><p>&emsp;&emsp;本文基于SVD分解矩阵的原理实现PCA图像批量压缩方法，首先，通过理论推导得到协方差矩阵特征值与矩阵奇异值之间的代数关系，然后对SVD奇异值从大到小进行排序，根据奇异值个数的不同，重构出不同的压缩图片。PCA需要计算特征值以及原始矩阵A的协方差矩阵，当矩阵A的维数较大时，协方差矩阵的计算量很大，且文献[5]指出，协方差计算时存在舍入误差。因此本文目标是在矩阵SVD分解的基础上，对图像进行压缩与重构。下文具体推导过程是对上述方法的证明。</p>
<h4 id="3-1-SVD分解"><a href="#3-1-SVD分解" class="headerlink" title="3.1 SVD分解"></a>3.1 <strong>SVD分解</strong></h4><p>对于任意矩阵，奇异值分解可以表示为 $A = U \Sigma V^T ,A \in R^{m \times n},U \in R^{m \times m}, V \in R^{n \times n}$</p>
<p>其中$U,V$分别称为左奇异矩阵和右奇异矩阵，且均为正交矩阵</p>
<p>$\Sigma = diag(\sigma_1, \sigma_2, \dots,\sigma_r)$ 为对角矩阵，其元素为降序排列的奇异值，则有$\sigma_1 \geq \sigma_2 \geq \dots \geq\sigma_r \geq 0$,$r$为矩阵A的秩</p>
<p><strong>构造特征值分解形式</strong></p>
<p>为构造矩阵的特征值分解形式，构造对称矩阵 $A A^T\in R^{m \times m}$</p>
<p>因为左右奇异矩阵均为正交矩阵，则 $V^T V = E$</p>
<p>因此有 $A A^T = (U \Sigma V^T) (U \Sigma V^T)^T =  U \Sigma V^T V\Sigma^T U^T = U \Sigma^T \Sigma U^T = U \Sigma^2U^T$</p>
<p>所以$U$是$AA^T$ 特征值分解的特征向量按列组成的正交矩阵，其中$\Sigma^2$是$A A^T$特征值组成的对角阵，记$AA^T$ 的特征值为 $\lambda_i , i = 1,2,\dots,m$ 则有 $\lambda_i = \sigma_i^2 ,i = 1,2,\dots,m$</p>
<h4 id="3-2-PCA-求解"><a href="#3-2-PCA-求解" class="headerlink" title="3.2 PCA 求解"></a>3.2 <strong>PCA 求解</strong></h4><p>降维问题的优化目标是：将一组$n$维数据降到$k$维，选择$k$个单位的正交基，使得原始数据变换之后，各字段的协方差为0，字段的方差尽可能的大.</p>
<p>矩阵$A \in R^{m \times n}$的协方差矩阵$C$的算式为</p>
<p>$C = \left[ \begin{matrix}  cov(x_1,x_1) &amp;  cov(x_1,x_2) &amp; \dots &amp; cov(x_1,x_m)  \\   cov(x_2,x_1) &amp;  cov(x_2,x_2) &amp; \dots &amp; cov(x_2,x_m)  \\ \dots &amp;\dots &amp; \dots &amp; \dots \\ cov(x_m,x_1) &amp;  cov(x_m,x_2) &amp; \dots &amp; cov(x_m,x_m)  \\  \end{matrix} \right] = \frac{1}{m} A A^T$ </p>
<p>下面对协方差矩阵对角化处理，设$P \in R^{k \times m}$是变换矩阵，通过变换$Y = PA$可以将$m$维数据$A$从$n$维降到$k$维，则新生成的矩阵为$Y \in R^{k \times n}$.</p>
<p>继续假设$Y$的协方差矩阵为$D$，则$D$与$C$的关系为</p>
<script type="math/tex; mode=display">\begin{aligned} D =& \frac{1}{m} Y Y^T  \\ =& \frac{1}  {m} (PA)(PA)^T \\ =& P(\frac{1}{m}A A^T)P^T \\ =& PCP^T\end{aligned}​</script><p>由于协方差矩阵$C​$是一个实对称矩阵，则其不同特征值对应的特征向量必然正交。记$C​$的特征值为$\lambda_1,\lambda_2, \dots,\lambda_m​$,特征向量为$e_1,e_2,\dots,e_m​$.</p>
<p>则，必然存在$Q = [e_1,e_2,\dots,e_m]​$，使得</p>
<p>$Q^TCQ = \Lambda = \left[ \begin{matrix} \lambda_1 &amp; &amp; &amp; &amp;\\&amp; \lambda_2 &amp; &amp; \\ &amp; &amp; \dots \\ &amp; &amp; &amp; \lambda_m \end{matrix}\right] $</p>
<p>此时，去$P = Q^T$,即可使矩阵 $D$ 为对角矩阵.对协方差矩阵$C$取前$k$个特征值对应的特征向量，即为变换矩阵$P$，即可达到降维的目的.</p>
<p>因此，在主成分分析过程中，主要是对协方差矩阵$C = \frac{1}{m}AA^T$ 进行特征值分解.</p>
<h4 id="3-3-PCA与SVD关系"><a href="#3-3-PCA与SVD关系" class="headerlink" title="3.3 PCA与SVD关系"></a>3.3 PCA与SVD关系</h4><p>由上述推导过程可知，PCA求解过程时，对协方差矩阵$C $ 进行特征值分解，在SVD求解过程中，主要是对$AA^T$进行特征值分解。因此二者有明显的相似性，本质都是对同一个实对称矩阵进行特征值分解，基于此，PCA的求解过程可以转化为SVD的分解进行计算。当矩阵A的维数较大时，协方差矩阵的计算量很大，通过这种转化，避免了计算协方差矩阵这一复杂的计算过程，以及通过协方差矩阵计算所产生的舍入误差，因此，在计算上的高效性得到理论上的证明。</p>
<h4 id="3-4-重构图像评价"><a href="#3-4-重构图像评价" class="headerlink" title="3.4 重构图像评价"></a>3.4 重构图像评价</h4><p>[7]中指出PSNR方法通常用来评价一幅图像压缩后和原图像相比质量的好坏，当然，压缩后图像一定会比原图像质量差的，所以就用这样一个评价指标来规定标准了。PSNR越高，压缩后失真越小。这里主要定义了两个值，一个是均方差MSE，另一个是峰值信噪比PSNR，对于$m \times n$维原始图像$A$与重构图像$ \hat{ A}$，计算公式如下：</p>
<p>$MSE = \frac{1}{m \times n} \sum\limits_{i=1}^{m} \sum\limits_{j=1}^{n} \begin{Vmatrix}  A(i,j) -\hat{A}(i,j)\end{Vmatrix} ^2$</p>
<p>$PSNR = 10 \cdot \lg (\frac{MAX_A^2}{MSE}) = 20 \cdot \lg (\frac{MAX_A}{\sqrt{MSE}})$</p>
<h4 id="3-5-图像规格化处理"><a href="#3-5-图像规格化处理" class="headerlink" title="3.5 图像规格化处理"></a>3.5 图像规格化处理</h4><p>本项目的目的是对图像进行批量压缩处理，因此，对图像的尺寸规格要求统一。</p>
<p>具体解决方法为，通过对同一数据集下的图像进行大小分析，取图像的均值进行规格化处理，如对$positive ~  image ~ set$集合中的 $650$ 张图片的宽度和高度取平均值并进行重构，具体取值为高度：610像素，宽度：939像素。</p>
<h4 id="3-6-主成分选取"><a href="#3-6-主成分选取" class="headerlink" title="3.6 主成分选取"></a>3.6 主成分选取</h4><p>由于不同的主成分选取会对压缩结果产生不同的影响，因此，本文随机选取已经规格化处理的图像，对其进行压缩处理，并依次生成不同主成分个数所对应的重构图像结果。通过人工识别以及PSNR方法分析出适合的主成分个数$k$.</p>
<p><strong>基于SVD的PCA图像批量压缩算法流程</strong></p>
<ol>
<li>对图像集进行规格化处理；</li>
<li>根据图像信息构造矩阵$A​$;</li>
<li>对$A$进行奇异值分解，获得降序排列的奇异值；</li>
<li>选择前$k$个奇异值对矩阵进行重构，获得基于不同$k$值的重构矩阵$\hat{A}$;</li>
<li>从$ \hat{A}$中恢复出图像信息，获得对应的图像;</li>
<li>通过PSNR方法对图像进行分析确定$k$值的选取.</li>
<li>通过确定的$k$值选择，对同一集合下的所有图像进行固定$k$值的图像压缩处理.</li>
</ol>
<h4 id="3-7-MATLAB图像处理"><a href="#3-7-MATLAB图像处理" class="headerlink" title="3.7 MATLAB图像处理"></a>3.7 <strong>MATLAB</strong>图像处理</h4><p>读取图像发现，在matlab中显示的是3维矩阵，对矩阵进行分析之后，发现包含了RGB三种维度数据，因此，对矩阵的SVD分解应该在三个维度上分别进行矩阵分解处理，处理之后，选取对应的前K个奇异值对图像进行重构。</p>
<h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p>实验环境</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>CPU</th>
<th>内存</th>
<th>操作系统</th>
<th>软件环境</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intel(R) Core(TM) i5-8300H<br>CPU @ 2.30GHz</td>
<td>8G</td>
<td>Windows10专业版64位操作系统</td>
<td>MATLAB 2019a</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2020/05/20/PCA%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/1.png" width="500px" height="500px"></p>
<p><img src="/2020/05/20/PCA%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/2.png" width="500px" height="300px"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>K值</th>
<th>20</th>
<th>60</th>
<th>100</th>
<th>120</th>
<th>188</th>
</tr>
</thead>
<tbody>
<tr>
<td>峰值信噪比(db)</td>
<td>32.074</td>
<td>34.046</td>
<td>36.245</td>
<td>37.507</td>
<td>41.903</td>
</tr>
</tbody>
</table>
</div>
<h3 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h3><p>[1]Jifara, W.; Jiang, F.; Zhang, B.; Wang, H.; Li, J.; Grigorev, A.; Liu, S. Hyperspectral image compression based on online learning spectral features dictionary. Multimed. Tools Appl. 2017, 76, 25003–25014.</p>
<p>[2]Bryt, O. and Elad, M. (2008) ‘Compression of facial images using the K-SVD algorithm’, J. Vis. Commun. Image R., Vol. 19, No. 4, pp.270–282. </p>
<p>[3]Clausen, C. and Wechsler, H. (2002) ‘Color image compression using PCA and backpropagation learning’, Pattern Recognition, Vol. 33, No. 9, pp.1555–1560. </p>
<p>[4]郭明军,李伟光,杨期江,赵学智.基于SVD原理的PCA特征频率提取算法及其应用[J].华南理工大学学报(自然科学版),2020,48(01):1-9.</p>
<p>[5]聂振国,赵学智.PCA与SVD信号处理效果相似性与机理分析[J].振动与冲击,2016,35(02):12-17.</p>
<p>[6]查小东. 基于ADV212的无人机超高清图像压缩系统设计[D].重庆大学,2016.</p>
<p>[7]Zhou Wang, A. C. Bovik, H. R. Sheikh and E. P. Simoncelli, “Image quality assessment: from error visibility to structural similarity,” in IEEE Transactions on Image Processing, vol. 13, no. 4, pp. 600-612, April 2004, doi: 10.1109/TIP.2003.819861.</p>
<h3 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h3><h3 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h3><p>图片压缩</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 基于SVD的图像压缩算法</span></span><br><span class="line">clear</span><br><span class="line">clc</span><br><span class="line"><span class="comment">%% 读取图片信息</span></span><br><span class="line"><span class="built_in">figure</span> = imread(<span class="string">'001.jpg'</span>);</span><br><span class="line">shape = <span class="built_in">size</span>(<span class="built_in">figure</span>);</span><br><span class="line"><span class="comment">%% 对矩阵进行SVD分解</span></span><br><span class="line"><span class="comment">% 读入的图片为三维RGB矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    [U(:,:,<span class="built_in">i</span>),S(:,:,<span class="built_in">i</span>),V(:,:,<span class="built_in">i</span>)] = svd(im2double(<span class="built_in">figure</span>(:,:,<span class="built_in">i</span>)));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 构造与U、S、V相同维度的矩阵</span></span><br><span class="line">U_new = <span class="built_in">zeros</span>(<span class="built_in">size</span>(U));</span><br><span class="line">S_new = <span class="built_in">zeros</span>(<span class="built_in">size</span>(S));</span><br><span class="line">V_new = <span class="built_in">zeros</span>(<span class="built_in">size</span>(V));</span><br><span class="line">V_T = <span class="built_in">zeros</span>(<span class="built_in">size</span>(V));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    V_T(:,:,<span class="built_in">i</span>) = V(:,:,<span class="built_in">i</span>)';</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 取前k个元素进行图像重构</span></span><br><span class="line">N = <span class="built_in">size</span>(<span class="built_in">figure</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="number">10</span>:N</span><br><span class="line">    newfigure = <span class="built_in">zeros</span>(shape);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">        U_new(:, <span class="number">1</span>:k, <span class="built_in">i</span>) = U(:, <span class="number">1</span>:k, <span class="built_in">i</span>);</span><br><span class="line">        S_new(<span class="number">1</span>:k, <span class="number">1</span>:k, <span class="built_in">i</span>) = S(<span class="number">1</span>:k, <span class="number">1</span>:k, <span class="built_in">i</span>);     </span><br><span class="line">        V_new(<span class="number">1</span>:k, :, <span class="built_in">i</span>) = V_T(<span class="number">1</span>:k, :, <span class="built_in">i</span>);</span><br><span class="line">        newfigure(:,:,<span class="built_in">i</span>) = U_new(:,:,<span class="built_in">i</span>) * S_new(:,:,<span class="built_in">i</span>) * V_new(:,:,<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% 重命名图片并保存在原始目录中</span></span><br><span class="line">    imwrite(newfigure,sprintf(<span class="string">'PCA_figure_compression_001_%d.jpg'</span>, k),<span class="string">'jpg'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>Systematic Review on FHE</title>
    <url>/2020/08/12/Systematic-Review-on-FHE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SecVisor</title>
    <url>/2020/07/21/SecVisor/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="http://www.cs.cmu.edu/~arvinds/pubs/secvisor.pdf" target="_blank" rel="noopener">SecVisor</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">检测</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>paper</category>
        <category>SOSP</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>Detection</tag>
      </tags>
  </entry>
  <entry>
    <title>The first blog</title>
    <url>/2020/04/18/The-first-blog/</url>
    <content><![CDATA[<h3 id="The-first-bolg"><a href="#The-first-bolg" class="headerlink" title="The first bolg"></a>The first bolg</h3><p>Hello，this is my first bolg of github.io.</p>
<p>I tried for about 12 hours to set up this simple website, right now, the author(me) still feel awsome.</p>
<p>I have written some technology blogs in <a href="https://www.cnblogs.com/Robin5/" target="_blank" rel="noopener">Robin5</a>.</p>
<p>Seize the time and face the bright future！</p>
<p>I will work harder and harder!</p>
<p>Witness me in github.io</p>
]]></content>
      <tags>
        <tag>英文</tag>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>The moment</title>
    <url>/2020/07/14/The-moment/</url>
    <content><![CDATA[<p>&emsp;&emsp;此时此刻，在家里敲代码+编辑文本，就在这一刻，我感觉电脑自带的键盘手感好棒，这种美妙的触感，爱了。</p>
<p>&emsp;&emsp;不矫情了，就在享受这美妙触感的一刻，脑子里思绪万千，想到了一年前的自己，想到了在济南待过的一年多的时光，想到了从毕业到彻底离开济南遇到的人和事，想法没有太多，就是单纯的心怀感恩。</p>
<p>&emsp;&emsp;这台笔记本是自己一块砖一块砖搬出来的，所以在体会到自己曾经的努力给现在的自己带来些许便利之时，这种感觉可能已经高于简单的五官感觉了，这一刻，我确想感恩，感恩从毕业那一刻决定咬牙拼一拼的自己，感恩当时陪伴自己身边的家人和朋友们，感恩在临近考研减缓我焦虑的人们，感恩提供自己一份工作的人们 ，也许需要感恩的人太多太多了，甚至连通济南大学到泉城广场的102路公交车都值得被记住，是它，让我可以在济南的市区流连忘返，也是它运行到凌晨可以让我好好欣赏泉城的夜景而不至于过分担心末班车，也是它让我可以跟济南的朋友们多次相聚，这是联通我与济南市区的主干路。如果还有一个公司在这期间值得被记住，可能就要算瑞幸咖啡了，这一份luckin真的在本命年里给自己带来了好运，从室友带我喝第一杯免费咖啡开始，整个假期，每见一位朋友，必须luckin一下，分享之后，一人一杯免费喝，满足了坐下来好好聊聊、过过慢生活的需求。</p>
<p>&emsp;&emsp;与许多的学生接触过后，有时会暗暗的发现，其实教书这一行也没有自己想的那么无趣，至少我见到的同学们多多少少都给自己带来了许多的欢乐，那一年自己被一帮孩子治愈了。在我眼中，本科毕业的自己确实在某些方面还不如自己的学生，年轻，拥有的就是希望。有几个优秀的同学，我在他们眼里看到了对未来的憧憬，果然，出口不凡，省实验中学、山师附中，浙江大学等等，那一刻，我在内心低下了头。有时我已经不太会做梦了，在以教师的身份与他们相处之后，发现自己对教育这一行业有了新的思考，至少，对自己的求学生涯有了一些反思。</p>
<p>&emsp;&emsp;暑假最让自己兴奋的，莫过于初次遇到大海，站在浅滩，任由波浪打湿裤腿，室友几人一起压海滩，去年那个暑假，想想都觉得像梦一样。</p>
<p>&emsp;&emsp;去年的我抓住了这辈子剩下为数不多稍微一努力就可以改变自己生活轨迹的机会，未来已来，愿你们都可以在将来的某一天对自己心存感激。</p>
<p> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 疫情期间于济宁</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2020年2月18日</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>PUBG JNG</title>
    <url>/2020/04/18/PUBG-JNG/</url>
    <content><![CDATA[<h3 id="JNG战队发展历程回顾"><a href="#JNG战队发展历程回顾" class="headerlink" title="JNG战队发展历程回顾"></a>JNG战队发展历程回顾</h3><h4 id="JNG初次相遇"><a href="#JNG初次相遇" class="headerlink" title="JNG初次相遇"></a>JNG初次相遇</h4><p>很久很久以前，这支战队的几个骚年游荡在这样一个空旷的平原上</p>
<p><img src="/2020/04/18/PUBG-JNG/1.jpg" alt="IMG_0814"></p>
<p>这个寒假的某一天，他们在飞机上相遇，并开启了他们相识到并肩作战的征程</p>
<p><img src="/2020/04/18/PUBG-JNG/2.jpg" alt="IMG_0815"></p>
<h4 id="睡衣战队红极一时"><a href="#睡衣战队红极一时" class="headerlink" title="睡衣战队红极一时"></a>睡衣战队红极一时</h4><p>在他们相遇不久，便迎来了队伍的第一次胜利</p>
<p><img src="/2020/04/18/PUBG-JNG/3.jpg" alt="IMG_0823"></p>
<p>当时他们采取的是著名的车轮战，即3辆装甲车并驾齐驱，纵横四海的战术</p>
<p><img src="/2020/04/18/PUBG-JNG/4.jpg" alt="IMG_0822"></p>
<h4 id="各种模式吃鸡常态化"><a href="#各种模式吃鸡常态化" class="headerlink" title="各种模式吃鸡常态化"></a>各种模式吃鸡常态化</h4><p>在经历了短短几天的磨合后，这几个小伙子已经将吃鸡常态化</p>
<p>普通模式</p>
<p><img src="/2020/04/18/PUBG-JNG/5.jpg" alt="IMG_0863"></p>
<p><img src="/2020/04/18/PUBG-JNG/20.jpg" alt></p>
<p>特种兵模式</p>
<p><img src="/2020/04/18/PUBG-JNG/6.jpg" alt="IMG_0833"></p>
<p>一日两鸡已是正常</p>
<p><img src="/2020/04/18/PUBG-JNG/7.jpg" alt="IMG_0838"></p>
<p><img src="/2020/04/18/PUBG-JNG/8.jpg" alt="IMG_0852"></p>
<h4 id="雪地扔雷，对手一片哀嚎"><a href="#雪地扔雷，对手一片哀嚎" class="headerlink" title="雪地扔雷，对手一片哀嚎"></a>雪地扔雷，对手一片哀嚎</h4><p><img src="/2020/04/18/PUBG-JNG/9.jpg" alt="IMG_0858"></p>
<p><img src="/2020/04/18/PUBG-JNG/10.jpg" alt="IMG_0869"></p>
<p><img src="/2020/04/18/PUBG-JNG/11.jpg" alt="IMG_0871"></p>
<p><img src="/2020/04/18/PUBG-JNG/12.jpg" alt="IMG_0903"></p>
<h4 id="最后一次征战雪地"><a href="#最后一次征战雪地" class="headerlink" title="最后一次征战雪地"></a>最后一次征战雪地</h4><p>在一次极寒模式对决中，几个小伙子竟然连锅端掉了一个满编RMB玩家。在这之后，光子工作室终于对他们下手了，出于人道主义，并不能直接限制玩家们参与游戏，于是乎，默默地移除了他们最擅长的极寒模式，他们再也不用落地寻找暖宝宝了，再也听不到系统提示：“暴风雪还有60秒到达，打开背包，利用打火机生火取暖”。但系统为了其余玩家的游戏体验，只能如此。</p>
<p><img src="/2020/04/18/PUBG-JNG/13.jpg" alt="IMG_0909"></p>
<h4 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h4><p>性感小wei在线比心</p>
<p><img src="/2020/04/18/PUBG-JNG/14.jpg" alt="IMG_0834"></p>
<h3 id="JNG-建队"><a href="#JNG-建队" class="headerlink" title="JNG 建队"></a>JNG 建队</h3><p>终于，在2020年4月17日，这支战队正式成立了</p>
<p><img src="/2020/04/18/PUBG-JNG/15.jpg" alt="IMG_0855"></p>
<p>属于JNG（Jining Gaming）的时刻已经来临</p>
<p><img src="/2020/04/18/PUBG-JNG/16.jpg" alt></p>
<p>今晚，请锁定和平精英，关注这支战队！</p>
<p><img src="/2020/04/18/PUBG-JNG/21.jpg" alt></p>
<p>建队首鸡</p>
<p><img src="/2020/04/18/PUBG-JNG/18.jpg" alt></p>
<p><img src="/2020/04/18/PUBG-JNG/19.jpg" alt></p>
<p>一支穿云箭，千军万马来相见</p>
<p><img src="/2020/04/18/PUBG-JNG/22.jpg" alt></p>
<p>雪地彩蛋</p>
<p><img src="/2020/04/18/PUBG-JNG/23.jpg" alt></p>
]]></content>
      <tags>
        <tag>game-for-peace</tag>
        <tag>JNG</tag>
      </tags>
  </entry>
  <entry>
    <title>TimeCrypt</title>
    <url>/2020/07/22/TimeCrypt/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th>序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://www.usenix.org/system/files/nsdi20-paper-burkhalter.pdf" target="_blank" rel="noopener">TimeCrypt</a></td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">1. <a href="https://people.inf.ethz.ch/burlukas/" target="_blank" rel="noopener">Lukas Burkhalter</a> Distributed Systems Group at ETH Zurich 苏黎世联邦理工学院分布式系统组研究助理；2. Sylvia Ratnasamy  Berkeley associate professor；3. Anwar Hithnawi is a researcher at the NetSys Lab at UC Berkeley, USA；4. Hossein Shafagh is a researcher at the Distributed Systems Group at ETH Zurich.</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">时间序列流数据加密，用户访问控制</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">同态加密，密码学，时间序列</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文目的是构建一个对时间序列数据更细粒度的访问控制策略，可以实现数据的端到端共享，数据所有者可以对访问权限加以约束。</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:center">补充介绍</td>
<td style="text-align:center"><a href="https://timecrypt.io/" target="_blank" rel="noopener">https://timecrypt.io/</a></td>
</tr>
<tr>
<td>7</td>
<td style="text-align:center">开源代码</td>
<td style="text-align:center"><a href="https://github.com/TimeCrypt/timecrypt" target="_blank" rel="noopener">https://github.com/TimeCrypt/timecrypt</a></td>
</tr>
<tr>
<td>8</td>
<td style="text-align:center">同态加密</td>
<td style="text-align:center"><a href="https://web.archive.org/web/20130704120108/http://www.cs.ut.ee/~lipmaa/crypto/link/public/homomorphic.php" target="_blank" rel="noopener">https://web.archive.org/web/20130704120108/http://www.cs.ut.ee/~lipmaa/crypto/link/public/homomorphic.php</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>&emsp; &emsp; 许多的设备都可以在云端存储一些时间序列信息，在云环境中，许多的服务都可以获取到这些时间序列信息，这是对用户隐私的一种侵犯。而且随着物联网的到来，更加速了这些数据的生成。目前，人们提高了对隐私数据的重视程度，致力于保护这些数据的机密性。</p>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>本文是发表在NSDI‘20的一篇文章，目的是构建一个针对时序数据加密并且能够进行访问控制的系统。数据的加密与解密过程都存在与客户端，因此发送给服务器端（云平台）的数据都默认是加密的，数据加密防止了云平台对用户传输数据的窥探。</p>
<h3 id="Background-Time-Series-Data"><a href="#Background-Time-Series-Data" class="headerlink" title="Background-Time Series Data"></a>Background-Time Series Data</h3><ol>
<li><p>时间序列数据应用广泛：个人健康、农业、交通运输和智慧城市等</p>
</li>
<li><p>时间序列数据特征：</p>
<p>a.只追加，产生频率高，存储占用多 </p>
<p>b.高吞吐、需要可扩展 </p>
<p>c.查询通常是基于时间范围考虑，满足用户在不同的时间粒度进行查询</p>
</li>
<li><p>对时间序列数据的操作：</p>
<p>a.查询通常用于汇总、统计 </p>
<p>b.通常这些时间数据由机器产生且是大量连续的，数据价值随着时间的推移递减，一般最近的数据要比较早的数据价值高，因此要对较早的数据进行聚合操作。</p>
</li>
</ol>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>&emsp; 许多的设备都可以在云端存储一些时间序列信息，在云环境中，许多的服务都可以获取到这些时间序列信息，这是对用户隐私的一种侵犯。而且随着物联网的到来，更加速了这些数据的生成。目前，人们提高了对隐私数据的重视程度，致力于保护这些数据的机密性。</p>
<h3 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h3><p>数据端到端的加密通常：不信任云供应商的安全性，因此在客户端对数据进行加密，传输密文到云中进行存储，客户端读取数据时进行解密。</p>
<p>刚提到的是时间序列数据产生频率很高，数据量很大，它所需要的高吞吐低延时的查询，在对数据加密之后可以实现吗？</p>
<h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>为了达到这个目的，本文面临的挑战是：数据的可扩展性以及与用户的交互性。</p>
<p>当前的时序数据库所提供的仅仅是数据追加操作以及在指定时间范围内的查询操作。因为对数据加密的代价是比较高的，所以为了满足挑战1，要在数据加密的同时对时序数据库大量数据进行高吞吐的写入，以及对指定时间的数据查询。</p>
<p>另一个挑战是安全共享</p>
<p>拿个人的健康数据举例子，个人的医生可能想看到个人每小时的平均心率数据，运动时可能想看下运动过程每分钟的平均心率，这就需要个人的数据以不同的时间间隔共享给指定的用户，同时在云端的存储是加密的。这就要求有选择的共享个人时序数据。</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>宏观来看TimeCrypt有两个角色，一个是Client端，一个是Server端，后者是非可信的，仅仅用于存储以及索引数据。</p>
<p>其中Client可以分为Data Producer和 Data Consumer，后者需要从前者得到访问权限才可以对数据在指定范文内以指定的时间间隔进行解密。</p>
<p>在这个系统中，将时序数据库中的分块压缩和数据序列化等操作放在了Client端，这样更改之后server端仅仅对加密的数据进行存储以及满足Client Consumer查询操作。Writer（Producer）这个角色以最小的时间间隔将收集到的数据打包源源不断的发送给Server端。</p>
<h3 id="Writing-Stream"><a href="#Writing-Stream" class="headerlink" title="Writing Stream"></a>Writing Stream</h3><p>细节部分可以看到Writer（Producer）以最小的时间间隔将收集到的数据打包源源不断的发送给Server端。</p>
<p>因为对时间序列数据的操作中提到过，对这种数据进行的查询通常是统计学上的一些操作，比如取平均值、加和、计数等等。因此在Client中首先对数据在基本单位时间内进行初步的计算，并将这些计算的结果打包发送给Server端进行存储。那么，如何满足不同时间间隔的查询呢？本文将不同的时间间隔命名为分辨率，在不同分辨率的查询结果是不同时间间隔的统计结果。</p>
<p>作者就想：能不能在Server端对这些数据进行一步聚合操作，就直接等价于对明文数据进行了一步聚合操作呢？</p>
<p>上文提到，他们18年就是在同态加密上做的一个工作。因此，他们是有这个技术积累的。同态加密就是一种加密形式，在密文上的计算解密后与明文上的执行一致。这样可以不危及数据隐私，同时对数据进行计算。但是呢，目前的同态加密手段基本都是非对称的加密，这种加密虽然保证了数据的安全性，但是代价是十分昂贵的。比如对8bytes数据进行加密<sup><a href="#fn_describe" id="reffn_describe">describe</a></sup>，产生的密文是明文的96倍，两段明文加密的代价是1028倍，这显然不适合于源源不断产生的大量的时序数据。因此需要对该方法进行改进，使得能满足对时序数据的加密与查询需求。</p>
<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>作者分析了很多现存的时序数据库的访问控制策略，这些访问控制粒度很粗糙，只是在数据库接口设置控制机制，要么用户可以访问全部数据，要么拒绝访问。</p>
<p>但是考虑到，医生想查看患者每小时的心率数据、健身教练想查看每分钟的心率数据这些情形，需要一个很细粒度的访问策略，同时对数据进行保护。</p>
<p>本文的目标是：将之前时序数据库中对数据的分享机制进行访问控制，实现更细粒度的访问。</p>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p><img src="/2020/07/22/TimeCrypt/Tree.png" style="zoom:40%;"></p>
<p>构建一个适合时间序列数据的加密方式，其中秘钥的分发采用将 $K_i$与 $K_{i+1}$ 以正值与负值分发给第$i$条明文用于加密，由于时间序列数据是连续的，因此在解密过程只获得收尾两个秘钥即可对此区间的所有数据进行解密。同时数据所有者对不同的client分发不同分辨率数据的秘钥，即可对数据实现访问控制。</p>
<p><img src="/2020/07/22/TimeCrypt/KeyStream.png" style="zoom:40%;"></p>
<p><img src="/2020/07/22/TimeCrypt/KeyTree.png" style="zoom:40%;"></p>
<p>本文提到的秘钥分发过程采用二叉树形式，在设置秘钥的过程中，将树的高度设置为一个很大的值，因此，存储在叶子节点的秘钥的数量基本接近无限大，这对时间序列的数据处理是有效的。同时在分发密钥时，对相应的节点进行派发，由于秘钥的单向性，也能够对用户的访问权限加以限制。</p>
<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2020/07/22/TimeCrypt/Evaluation.png" style="zoom:40%;"></p>
<p>在实验结果中可以看到，采用新形势的秘钥分发策略，系统的吞吐提升明显。对比实验的后两者是没有改进的同态加密策略。</p>
<p><img src="/2020/07/22/TimeCrypt/EvaluationLatency.png" style="zoom:40%;"></p>
<p>在实验结果中看到对不同分辨率的数据进行查询的时间延迟都是在秒级以内，是可以接受的。</p>
<h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><p>同态加密（HE）是一种加密形式，允许对密文进行计算，生成加密结果，加密后的结果与操作结果相匹配，就好像它们是在明文上执行一样。使用这样的工具，可以在不危及数据隐私的情况下外包存储或计算。</p>
<p>一般的加密方案关注的都是<strong>数据存储安全</strong>。即，我要给其他人发个加密的东西，或者要在计算机或者其他服务器上存一个东西，我要对数据进行加密后在发送或者存储。没有密钥的用户，不可能从加密结果中得到有关原始数据的任何信息。只有拥有密钥的用户才能够正确解密，得到原始的内容。我们注意到，这个过程中<strong>用户是不能对加密结果做任何操作的</strong>，只能进行存储、传输。对加密结果做任何操作，都将会导致错误的解密，甚至解密失败。</p>
<p>同态加密方案最有趣的地方在于，其关注的是<strong>数据处理安全</strong>。同态加密提供了一种<strong>对加密数据进行处理的功能</strong>。也就是说，其他人可以对加密数据进行处理，但是处理过程不会泄露任何原始内容。同时，拥有密钥的用户对处理过的数据进行解密后，得到的正好是处理后的结果。</p>
<p>允许人们对密文进行特定形式的代数运算得到仍然是加密的结果，将其解密所得到的结果与对明文进行同样的运算结果一样。换言之，这项技术令人们可以在加密的数据中进行诸如检索、比较等操作，得出正确的结果，而在整个处理过程中无需对数据进行解密。其意义在于，真正从根本上解决将数据及其操作委托给第三方时的保密问题，例如对于各种云计算的应用。</p>
<p>同态加密几乎就是为云计算而量身打造的！如果一个用户想要处理一个数据，但是他的计算机计算能力较弱。这个用户可以使用云计算来帮助他进行处理而得到结果。但是如果直接将数据交给云，无法保证安全性。于是，他可以使用同态加密，然后让云来对加密数据进行直接处理，并将处理结果返回给他。这样一来：</p>
<ul>
<li>用户向云服务商付款，得到了处理的结果；</li>
<li>云服务商挣到了费用，并在不知道用户数据的前提下正确处理了数据；</li>
</ul>
<p>优点：</p>
<ul>
<li>不必对每一个密文解密后再计算而花费高昂的计算代价。</li>
<li>可以实现无密钥方对密文的计算，密文计算无须经过密钥方，既可以减少通信代价，又可以转移计算任务。</li>
<li>第三方为明文未知，提高了信息的安全性。</li>
<li>对密文计算后解密的结果与明文进行同样运算的结果一致，保证了运算的正确性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>同态加密技术目前的难度在于效率,效率一词包含两个方面，一个是加密数据的处理速度，一个是这个加密方案的数据存储量。</li>
<li>满足同态加密的算法并不容易实现。</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="http://www.vontroy.com/2018/01/25/homomorphic-encryption-survey/" target="_blank" rel="noopener">http://www.vontroy.com/2018/01/25/homomorphic-encryption-survey/</a></p>
<p>[2] <a href="https://zh.wikipedia.org/wiki/同态加密" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86</a></p>
<p>[3] <a href="https://www.zhihu.com/question/27645858/answer/37598506" target="_blank" rel="noopener">https://www.zhihu.com/question/27645858/answer/37598506</a></p>
<blockquote id="fn_cassandra">
<sup>cassandra</sup>. <strong>Apache Cassandra</strong>（社区内一般简称为C*）是一套开源分布式<a href="https://zh.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener">NoSQL</a>数据库系统。它最初由<a href="https://zh.wikipedia.org/wiki/Facebook" target="_blank" rel="noopener">Facebook</a>开发，用于改善电子邮件系统的搜索性能的简单格式数据，集<a href="https://zh.wikipedia.org/wiki/Google" target="_blank" rel="noopener">Google</a> <a href="https://zh.wikipedia.org/wiki/BigTable" target="_blank" rel="noopener">BigTable</a>的数据模型与<a href="https://zh.wikipedia.org/wiki/Amazon" target="_blank" rel="noopener">Amazon</a> <a href="https://zh.wikipedia.org/w/index.php?title=Dynamo&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">Dynamo</a>的完全分布式架构于一身。Facebook于2008将 Cassandra 开源，此后，由于Cassandra良好的<a href="https://zh.wikipedia.org/wiki/可扩展性" target="_blank" rel="noopener">可扩展性</a>和性能，被 Apple<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-1" target="_blank" rel="noopener">[1]</a>, Comcast<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-2" target="_blank" rel="noopener">[2]</a>,Instagram<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-3" target="_blank" rel="noopener">[3]</a>, Spotify<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-4" target="_blank" rel="noopener">[4]</a>, eBay<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-5" target="_blank" rel="noopener">[5]</a>, Rackspace<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-6" target="_blank" rel="noopener">[6]</a>, Netflix<a href="https://zh.wikipedia.org/wiki/Cassandra#cite_note-7" target="_blank" rel="noopener">[7]</a>等知名网站所采用，成为了一种流行的分布式结构化数据存储方案。<a href="#reffn_cassandra" title="Jump back to footnote [cassandra] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_describe">
<sup>describe</sup>. 加密过程是将明文对等加密，如果明文的长度低于256字节，则扩充为256字节长度之后再对其进行加密，由于本文的思想是对最小时间间隔的数据打包发送至云平台进行存储，因此在此间隔产生的数据大小是固定的，如果采用加密方式，则自然会增加加密的代价。同时传统的秘钥分发方式，解密过程也会有很高的延迟以及较大的IO.<a href="#reffn_describe" title="Jump back to footnote [describe] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>paper</category>
        <category>NSDI</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>The outline of Outlier</title>
    <url>/2020/07/14/The-outline-of-Outlier/</url>
    <content><![CDATA[<h3 id="The-Outline-of-Outlier"><a href="#The-Outline-of-Outlier" class="headerlink" title="The Outline of Outlier"></a>The Outline of Outlier</h3><h3 id="0-Abstract"><a href="#0-Abstract" class="headerlink" title="0 Abstract"></a>0 Abstract</h3><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h3><ol>
<li>指出虚拟化的多租户云平台优点；</li>
<li>hypervisor对于云平台很重要；</li>
</ol>
<h3 id="2-Background"><a href="#2-Background" class="headerlink" title="2 Background"></a>2 Background</h3><h4 id="2-1-Quick-View-of-Xen-Hypervisor"><a href="#2-1-Quick-View-of-Xen-Hypervisor" class="headerlink" title="2.1 Quick View  of Xen Hypervisor"></a>2.1 Quick View  of Xen Hypervisor</h4><h4 id="2-2-Dynamic-Root-of-Trust"><a href="#2-2-Dynamic-Root-of-Trust" class="headerlink" title="2.2 Dynamic Root of Trust"></a>2.2 Dynamic Root of Trust</h4><h4 id="2-3-Byzantine-Fault-Tolerance"><a href="#2-3-Byzantine-Fault-Tolerance" class="headerlink" title="2.3 Byzantine Fault Tolerance"></a>2.3 Byzantine Fault Tolerance</h4><h3 id="3-Overview"><a href="#3-Overview" class="headerlink" title="3 Overview"></a>3 Overview</h3><h4 id="3-1-Threat-Model-and-Assumptions"><a href="#3-1-Threat-Model-and-Assumptions" class="headerlink" title="3.1 Threat Model and Assumptions"></a>3.1 Threat Model and Assumptions</h4><h4 id="3-2-Goals"><a href="#3-2-Goals" class="headerlink" title="3.2 Goals"></a>3.2 Goals</h4><h4 id="3-3-Design-and-Approaches"><a href="#3-3-Design-and-Approaches" class="headerlink" title="3.3 Design and Approaches"></a>3.3 Design and Approaches</h4><h3 id="4-Implementation"><a href="#4-Implementation" class="headerlink" title="4 Implementation"></a>4 Implementation</h3><h4 id="4-1-Co-protocol"><a href="#4-1-Co-protocol" class="headerlink" title="4.1 Co-protocol"></a>4.1 Co-protocol</h4><h4 id="4-2-Checker"><a href="#4-2-Checker" class="headerlink" title="4.2 Checker"></a>4.2 Checker</h4><h3 id="5-Security-Analysis"><a href="#5-Security-Analysis" class="headerlink" title="5 Security Analysis"></a>5 Security Analysis</h3><h4 id="5-1-Theorems-in-the-Co-protocol"><a href="#5-1-Theorems-in-the-Co-protocol" class="headerlink" title="5.1 Theorems in the Co-protocol"></a>5.1 Theorems in the Co-protocol</h4><h4 id="5-2-Subverting-Outlier"><a href="#5-2-Subverting-Outlier" class="headerlink" title="5.2 Subverting Outlier"></a>5.2 Subverting Outlier</h4><h4 id="5-3-Attacking-Hypervisor-Code-Integrity"><a href="#5-3-Attacking-Hypervisor-Code-Integrity" class="headerlink" title="5.3 Attacking Hypervisor Code Integrity"></a>5.3 Attacking Hypervisor Code Integrity</h4><h4 id="5-4-Limitations-and-Future-Work"><a href="#5-4-Limitations-and-Future-Work" class="headerlink" title="5.4 Limitations and Future Work"></a>5.4 Limitations and Future Work</h4><h3 id="6-Evaluation"><a href="#6-Evaluation" class="headerlink" title="6 Evaluation"></a>6 Evaluation</h3><h4 id="6-1-CPU-Overhead"><a href="#6-1-CPU-Overhead" class="headerlink" title="6.1 CPU Overhead"></a>6.1 CPU Overhead</h4><h4 id="6-2-Network-Overhead"><a href="#6-2-Network-Overhead" class="headerlink" title="6.2 Network Overhead"></a>6.2 Network Overhead</h4><h4 id="6-3-Detection-Time"><a href="#6-3-Detection-Time" class="headerlink" title="6.3 Detection Time"></a>6.3 Detection Time</h4><h3 id="7-Related-Work"><a href="#7-Related-Work" class="headerlink" title="7 Related Work"></a>7 Related Work</h3><h3 id="8-Conclusion"><a href="#8-Conclusion" class="headerlink" title="8 Conclusion"></a>8 Conclusion</h3>]]></content>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen log 1 服务器部署Debian9+Xen4.11记录</title>
    <url>/2020/07/17/Xen-log-1-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Debian9-Xen4-11%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="服务器网络部署"><a href="#服务器网络部署" class="headerlink" title="服务器网络部署"></a>服务器网络部署</h3><p>目前遇到的这个问题可能不是普遍试用，但是在操作过程中的确遇到过。</p>
<h4 id="网络接口设置"><a href="#网络接口设置" class="headerlink" title="网络接口设置"></a>网络接口设置</h4><p>目前，该服务器预设网络接口4个，但是，仔细查验后发现，只有一个网络接口连接了网线，因此如果没有恰当的设置后，会出现机器ping 不通网络的问题。</p>
<p><strong>解决方法</strong></p>
<p>在安装系统过程中，记录下四个网口的名称，如果安装完系统后，ping网关不成功的话，说明网口设置有问题，需要修改，否则不需要。</p>
<p>网口配置文件 /etc/network/interfaces</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The primary network interface</span><br><span class="line">allow-hotplug XXXX</span><br><span class="line">iface XXXX inet static</span><br></pre></td></tr></table></figure>
<p>上述的XXXX为目标网口名称，更改为接入网线的口即可</p>
<p>重启，ping网关，如果ping通，则OK</p>
<h4 id="Ping-www-baidu-com"><a href="#Ping-www-baidu-com" class="headerlink" title="Ping www.baidu.com"></a>Ping www.baidu.com</h4><p>测试ping www.baidu.com失败</p>
<p>可能是网关设置问题, /etc/resolv.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加 namesever 8.8.8.8</span><br></pre></td></tr></table></figure>
<p>修改完，再测试下，ok</p>
<h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>这里使用合适的国内源，进行挂载</p>
<p>清华源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;help&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>
<p>修改 /etc/apt/sources.list  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-updates main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-backports main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-updates main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-backports main non-free contrib</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-security&#x2F; stretch&#x2F;updates main non-free</span><br><span class="line">contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-security&#x2F; stretch&#x2F;updates main non-free</span><br><span class="line">contrib</span><br></pre></td></tr></table></figure>
<p>更新操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>
<h3 id="部署Xen4-11"><a href="#部署Xen4-11" class="headerlink" title="部署Xen4.11"></a>部署Xen4.11</h3><h4 id="配置依赖环境"><a href="#配置依赖环境" class="headerlink" title="配置依赖环境"></a>配置依赖环境</h4><p>install the <em>build-essential</em> package:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install build-essential</span><br></pre></td></tr></table></figure>
<p>install these additional debs:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install bcc bin86 gawk bridge-utils iproute libcurl3 libcurl4-openssl-dev bzip2 transfig tgif </span><br><span class="line"># apt-get install texinfo texlive-latex-base texlive-latex-recommended texlive-fonts-extra texlive-fonts-recommended pciutils-dev mercurial</span><br><span class="line"># apt-get install make gcc libc6-dev zlib1g-dev python python-dev python-twisted libncurses5-dev patch libvncserver-dev libsdl-dev </span><br><span class="line"># apt-get install iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml ocaml-findlib libx11-dev bison flex xz-utils libyajl-dev</span><br><span class="line"># apt-get install gettext libpixman-1-dev libaio-dev markdown pandoc</span><br></pre></td></tr></table></figure>
<p>under Debian :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get build-dep xen</span><br></pre></td></tr></table></figure>
<p>failed to install (不安装的话，暂时没啥影响)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get module-init-tools libjpeg62-dev</span><br></pre></td></tr></table></figure>
<h4 id="下载Xen"><a href="#下载Xen" class="headerlink" title="下载Xen"></a>下载Xen</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;xenbits.xen.org&#x2F;xen.git</span><br></pre></td></tr></table></figure>
<p>or </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b stable-4.11 git:&#x2F;&#x2F;xenbits.xen.org&#x2F;xen.git</span><br></pre></td></tr></table></figure>
<h4 id="安装Xen"><a href="#安装Xen" class="headerlink" title="安装Xen"></a>安装Xen</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd xen</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make xen -j8</span><br><span class="line">make tools -j8</span><br><span class="line">make install-xen</span><br><span class="line">make install-tools</span><br><span class="line"># dpkg-divert --divert &#x2F;etc&#x2F;grub.d&#x2F;08_linux_xen --rename &#x2F;etc&#x2F;grub.d&#x2F;20_linux_xen (这句没执行)</span><br></pre></td></tr></table></figure>
<p>更新grub (此时重启电脑会出现 xen hypervisor 信息)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>此时，开机时应当记录下机器默认的开机顺序，方便后续设置系统重启进入带有hypervisor的系统</p>
<h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service xendomains start</span><br><span class="line">sudo service xencommons start or restart</span><br><span class="line">sudo update-rc.d xencommons defaults 19 18</span><br><span class="line">sudo update-rc.d xendomains defaults 21 20</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xl list 或 xentop</span><br></pre></td></tr></table></figure>
<p>当出现 domain0 信息说明部署成功</p>
<h3 id="再次设置-grub"><a href="#再次设置-grub" class="headerlink" title="再次设置 grub"></a>再次设置 grub</h3><p>根据首次重启后开机顺序，确定xen hypervisor的启动序号 n</p>
<p>注意，序号从0开始计数，记录从上到下应当为0,1,2，$\cdots$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入 &#x2F;etc&#x2F;default&#x2F;grub 文件</span><br><span class="line">更改 GRUB_DEFAULT &#x3D; x 为 GRUB_DEFAULT &#x3D; n</span><br><span class="line">更新内容</span><br><span class="line">update-grub</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<hr>
<p>此文档记录了在集群上部署xen的方法，目的是为后面的分布式检测做准备。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Debian</tag>
        <tag>Xen log</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen log 2 Add a new Hypercall</title>
    <url>/2020/07/19/Xen-log-2-Add-a-new-Hypercall/</url>
    <content><![CDATA[<p>当前使用的xen版本为Xen-4.11</p>
<h3 id="修改Xen文件"><a href="#修改Xen文件" class="headerlink" title="修改Xen文件"></a>修改Xen文件</h3><p>在Xen-4.11中，仅对hypercall.c hypercall.h文件进行修改即可实现用户添加hypercall</p>
<p>当前xen源码的顶级目录为Xen</p>
<h4 id="修改xen-h"><a href="#修改xen-h" class="headerlink" title="修改xen.h"></a>修改xen.h</h4><p>目标文件位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Xen&#x2F;xen&#x2F;include&#x2F;public&#x2F;xen.h</span><br></pre></td></tr></table></figure>
<p>39号调用是给用户预留的，可以使用自己的hypercall替换掉预定义hypercall</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __HYPERVISOR_tmem_op                 38</span></span><br><span class="line">+ <span class="meta">#<span class="meta-keyword">define</span> __HYPERVISOR_Alice_op                39</span></span><br></pre></td></tr></table></figure>
<h4 id="修改hypercall-h"><a href="#修改hypercall-h" class="headerlink" title="修改hypercall.h"></a>修改hypercall.h</h4><p>目标文件位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Xen&#x2F;xen&#x2F;include&#x2F;xen&#x2F;hypercall.h</span><br></pre></td></tr></table></figure>
<p>添加内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">extern</span> <span class="keyword">int</span></span><br><span class="line">  do_Alice_op(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure>
<h4 id="修改hypercall-c"><a href="#修改hypercall-c" class="headerlink" title="修改hypercall.c"></a>修改hypercall.c</h4><p>目标文件位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Xen&#x2F;xen&#x2F;arch&#x2F;x86&#x2F;pv&#x2F;hypercall.c</span><br></pre></td></tr></table></figure>
<p>添加内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  COMPAT_CALL(callback_op),</span><br><span class="line">+ HYPERCALL(Alice_op),</span><br></pre></td></tr></table></figure>
<p>目标文件位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Xen&#x2F;xen&#x2F;arch&#x2F;x86&#x2F;hypercall.c</span><br></pre></td></tr></table></figure>
<p>添加内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  ARGS(arcg_1, <span class="number">1</span>),</span><br><span class="line">+ ARGS(Alice_op, <span class="number">0</span>), <span class="comment">// 这里0 对应do_Alice_op(void) 函数中参数个数</span></span><br></pre></td></tr></table></figure>
<h4 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h4><p>hypercal如果是共用功能的话，可以放在 Xen/xen/common 下的函数中实现</p>
<p>为了打印输出方便，测试函数放在了mm.c中实现</p>
<p>目标文件位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Xen&#x2F;xen&#x2F;arch&#x2F;x86&#x2F;mm.c</span><br></pre></td></tr></table></figure>
<p>添加内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">+ <span class="function"><span class="keyword">int</span> <span class="title">do_Alice_op</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	printk(<span class="string">"Alice Hypercall!\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="重新编译xen"><a href="#重新编译xen" class="headerlink" title="重新编译xen"></a>重新编译xen</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make xen -j8</span><br><span class="line">make tools -j8</span><br><span class="line">make install-xen</span><br><span class="line">make install-tools</span><br><span class="line">update-grub</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启之后测试下添加的hypercall能不能正常被调用</p>
<p>采用privcmd工具实现</p>
<p><strong>编写privcmd.c文件</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;xenctrl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;xen/sys/privcmd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd, ret;</span><br><span class="line">        <span class="keyword">char</span> * message;</span><br><span class="line">        <span class="keyword">privcmd_hypercall_t</span> alice_op=&#123;</span><br><span class="line">                __HYPERVISOR_Alice_op,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        fd = <span class="built_in">open</span>(<span class="string">"/proc/xen/privcmd"</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">"can't open /proc/xen/privcmd"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"privcmd's fd = %d\n"</span>, fd);</span><br><span class="line">        &#125;</span><br><span class="line">        ret = ioctl(fd, IOCTL_PRIVCMD_HYPERCALL, &amp;alice_op);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -o test privcmd.c</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;test</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privcmd&#39;s fd &#x3D; 3</span><br><span class="line">ret &#x3D; 0</span><br></pre></td></tr></table></figure>
<p>注：如果ioctl()函数返回值为-1，说明出错</p>
<p>查看日志信息</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xl dm</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(XEN) Bogus DMIBAR 0xfed18001 on 0000:00:00.0</span><br><span class="line">(XEN) Alice Hypercall!</span><br></pre></td></tr></table></figure>
<p>当看到自定义输出的信息时，说明此hypercall调用正常！</p>
<p>现在，按照此方法就可以调用hypecall了~</p>
]]></content>
      <tags>
        <tag>Hypervisor</tag>
        <tag>Linux</tag>
        <tag>Xen log</tag>
        <tag>Virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen log 3 Using Serial Debug Xen</title>
    <url>/2020/10/09/Xen-log-3-Using-Serial-Debug-Xen/</url>
    <content><![CDATA[<p>注：本文的配置是在<a href="https://wiki.xenproject.org/wiki/Xen_Serial_Console" target="_blank" rel="noopener">官网</a>指导下进行的，因为在配置过程中遇到一点问题，记录下配置过程。</p>
<p>Xen的log信息是打印在内存中的，读取打印信息需要<code>xl dm</code> 进行查看，如果在查看之前xen崩溃的话，是读取不到任何信息的，通过串口的方式可以将数据实时的打印出来，方便调试。</p>
<p>这里使用的是usb转rs232.</p>
<h3 id="配置读取设备"><a href="#配置读取设备" class="headerlink" title="配置读取设备"></a>配置读取设备</h3><p>在读取设备和Xen机器上配置<code>minicom</code> 用于测试串口。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Ubuntu dmesg | grep tty</span><br></pre></td></tr></table></figure>
<p>输出信息如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[    0.094791] printk: console [tty0] enabled</span><br><span class="line">[    0.757835] 00:02: ttyS0 at I/O 0x3f8 (irq = 4, base_baud = 115200) is a 16550A</span><br><span class="line">[    0.779505] 0000:00:16.3: ttyS4 at I/O 0xf060 (irq = 19, base_baud = 115200) is a 16550A</span><br><span class="line">[    2.825408] usb 1-13: pl2303 converter now attached to ttyUSB0</span><br><span class="line">[ 3435.257916] pl2303 ttyUSB0: pl2303 converter now disconnected from ttyUSB0</span><br><span class="line">[ 3437.386713] usb 1-14: pl2303 converter now attached to ttyUSB0</span><br><span class="line">[13860.597447] pl2303 ttyUSB0: pl2303_set_control_lines - failed: -19</span><br><span class="line">[13860.597451] pl2303 ttyUSB0: error sending <span class="built_in">break</span> = -19</span><br><span class="line">[13860.597584] pl2303 ttyUSB0: pl2303 converter now disconnected from ttyUSB0</span><br><span class="line">[13863.385826] usb 1-8: pl2303 converter now attached to ttyUSB0</span><br></pre></td></tr></table></figure>
<p>于是设置默认串口为 <code>ttyUSB0</code> ,使用<code>minicom -s</code> 进入<code>serial prot setup</code> 进行设置</p>
<p><img src="/2020/10/09/Xen-log-3-Using-Serial-Debug-Xen/xen-3.png" width="500px" height="300px"> </p>
<p>(配置完没有截图，取自 [2] )，配置好读取设备后，静置，备用。</p>
<h3 id="配置Xen-设备"><a href="#配置Xen-设备" class="headerlink" title="配置Xen 设备"></a>配置Xen 设备</h3><p>读取Xen设备信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dmesg | grep tty</span><br></pre></td></tr></table></figure>
<p>输出信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">console [tty0] enabled</span><br><span class="line">ttyS0 at I/O 0x3f8 (irq = 4, base_baud = 115200) is a 16550A</span><br><span class="line">ttyS4 at I/O 0xc0c0 (irq = 16, base_baud = 115200) is a XR16850</span><br><span class="line">ttyS5 at I/O 0xc0c8 (irq = 16, base_baud = 115200) is a XR16850</span><br></pre></td></tr></table></figure>
<p>这里看到 tty0 、ttyS0  、 ttyS4 、ttyS5 （如果没有输出全部信息的话，执行下面的命令查看）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /proc/tty/driver/serial</span><br></pre></td></tr></table></figure>
<p>输出信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">serinfo:1.0 driver revision:</span><br><span class="line">0: uart:16550A port:000003F8 irq:4 tx:0 rx:0</span><br><span class="line">1: uart:unknown port:000002F8 irq:3</span><br><span class="line">2: uart:unknown port:000003E8 irq:4</span><br><span class="line">3: uart:unknown port:000002E8 irq:3</span><br><span class="line">4: uart:XR16850 port:0000C0C0 irq:16 tx:0 rx:0</span><br><span class="line">5: uart:XR16850 port:0000C0C8 irq:16 tx:0 rx:0 CTS|DTR|DSR|CD|RI</span><br></pre></td></tr></table></figure>
<p>可以确定，Xen设备的串口是<code>ttyS5</code> 物理地址为 <code>0xc0c8</code> </p>
<h4 id="测试串口通讯情况"><a href="#测试串口通讯情况" class="headerlink" title="测试串口通讯情况"></a>测试串口通讯情况</h4><p>在Xen设备的<code>minicom</code> 上设置默认的端口为<code>ttyS5</code> 看两台机器是否能够正常通讯，即，在读取设备输入，在Xen设备上可以输出相应内容，反之亦然。</p>
<h4 id="修改Grub文件"><a href="#修改Grub文件" class="headerlink" title="修改Grub文件"></a>修改Grub文件</h4><p>在<code>/etc/default/grub</code>文件中 添加如下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This can guarantee sync output when using `printk`</span></span><br><span class="line">GRUB_CMDLINE_XEN=<span class="string">"loglvl=all guest_loglvl=all sync_console console_to_ring com1=115200,8n1,0x3080 console=com1,vga com0_mem=4096"</span></span><br><span class="line"></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"console=tty0 console=ttyS5,115200n8"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"console=hvc0 earlyprintk=xen"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>sync_console</code>: 保证输出是同步的，以防一些内容在xen crash之前打不出来</li>
<li><code>console_to_ring</code>: 将Guest的log同步到dom0中打印输出.</li>
<li><code>console=com1,vga</code>: 将终端连到com1上，这样我们就可以通过串口输入用户名密码登陆</li>
</ul>
<p>输入 <code>sudo update-grub</code> 更新grub文件，重启</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在自定义<a href="https://ykma.gitee.io/2020/07/19/Xen-log-2-Add-a-new-Hypercall/">Hypercall</a> 后，执行<code>privcmd.c</code> 文件会在读取设备上看到相应的log信息，这里不放图了。</p>
<h3 id="踩坑指南"><a href="#踩坑指南" class="headerlink" title="踩坑指南"></a>踩坑指南</h3><p>我刚配置串口的时候，采用Ubuntu18读取日志信息，Debian9编译Xen，两台机器通信正常，<code>reboot</code> Xen设备后会打印开机日志，随后便是一通乱码，不输出用户自定义log信息。调整两台设备的编码格式、语言（en.utf-8）等均未果，至今没有解决这个bug</p>
<p>感受一下乱码：分别是正常读取与16进制读取的结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">�`�f���f�����`�f���f���怀�`�f���f����~x�~~x�~�`�f���f���怀�`�f��~怀</span><br><span class="line"></span><br><span class="line">�`�f���f枞f�~x��枘�����f��ff��~��~fx�f��~������~��~��~��fx�</span><br><span class="line"></span><br><span class="line">06 fe 60 e6 66 fe 06 f8 00 f8 66 fe 00 f8 e6 80 06 fe 60 e6 66 fe 06 f8 00 f8 6</span><br></pre></td></tr></table></figure>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://wiki.xenproject.org/wiki/Xen_Serial_Console" target="_blank" rel="noopener">https://wiki.xenproject.org/wiki/Xen_Serial_Console</a><br>[2] <a href="** https://silentming.net/blog/2016/09/18/xen-log-5-debug-xen/**">Xen Log 5-Debug Xen on Physical Machine</a><br>[3] <a href="https://xenbits.xen.org/docs/unstable/misc/xen-command-line.html" target="_blank" rel="noopener">https://xenbits.xen.org/docs/unstable/misc/xen-command-line.html</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Xen log</tag>
        <tag>Virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen虚拟化技术完全导读</title>
    <url>/2020/07/19/Xen%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AE%8C%E5%85%A8%E5%AF%BC%E8%AF%BB/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>云虚拟化安全攻防实践</title>
    <url>/2020/07/19/%E4%BA%91%E8%99%9A%E6%8B%9F%E5%8C%96%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>写在前面：此次阅读，目的是补充一下对虚拟化安全的了解，可能思考不是很透彻，在此记录一下，方便后面补充学习。</p>
<h3 id="认识-Hypervisor"><a href="#认识-Hypervisor" class="headerlink" title="认识 Hypervisor"></a>认识 Hypervisor</h3><p><a href="https://zh.wikipedia.org/wiki/Hypervisor#类型_I：原生或裸机_hypervisor" target="_blank" rel="noopener">Hypervisor 分类</a></p>
<h4 id="云计算起源"><a href="#云计算起源" class="headerlink" title="云计算起源"></a>云计算起源</h4><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><h4 id="Hypervisor-分类"><a href="#Hypervisor-分类" class="headerlink" title="Hypervisor 分类"></a>Hypervisor 分类</h4><h4 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h4><h3 id="Docker-容器安全"><a href="#Docker-容器安全" class="headerlink" title="Docker 容器安全"></a>Docker 容器安全</h3><h3 id="QEMU-与-KVM-安全"><a href="#QEMU-与-KVM-安全" class="headerlink" title="QEMU 与 KVM 安全"></a>QEMU 与 KVM 安全</h3><h3 id="Xen-安全"><a href="#Xen-安全" class="headerlink" title="Xen 安全"></a>Xen 安全</h3><h3 id="Hyper-v-安全"><a href="#Hyper-v-安全" class="headerlink" title="Hyper-v 安全"></a>Hyper-v 安全</h3><h3 id="Hypervisor-漏洞防御技术"><a href="#Hypervisor-漏洞防御技术" class="headerlink" title="Hypervisor 漏洞防御技术"></a>Hypervisor 漏洞防御技术</h3>]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen log 0 Ubuntu18源码安装Xen4.11</title>
    <url>/2020/05/22/Xen-log-0-Ubuntu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/</url>
    <content><![CDATA[<p>在部署Xen的时候采用的是Ubuntu18.04(英文版) + Xen4.11</p>
<p>由于安装Ubuntu后，使用国外的源比较慢，修改为国内源，这样速度快很多。</p>
<h3 id="Ubuntu换源"><a href="#Ubuntu换源" class="headerlink" title="Ubuntu换源"></a>Ubuntu换源</h3><p>我采用的是修改阿里源为Ubuntu18.04的源</p>
<p><strong>备份 sources.list</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>
<p><strong>添加阿里源</strong></p>
<p>在<strong>/etc/apt/sources.list</strong>文件前添加如下条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p><strong>更新源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p><strong>For Ubuntu 18.04:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential</span><br><span class="line">apt-get install bcc bin86 gawk bridge-utils iproute2 libcurl4 libcurl4-openssl-dev bzip2 module-init-tools transfig tgif</span><br><span class="line">apt-get install texinfo texlive-latex-base texlive-latex-recommended texlive-fonts-extra texlive-fonts-recommended pciutils-dev mercurial</span><br><span class="line">apt-get install make gcc libc6-dev zlib1g-dev python python-dev python-twisted libncurses5-dev patch libvncserver-dev libsdl-dev libjpeg-dev</span><br><span class="line">apt-get install libnl-route-3-200 libnl-3-dev libnl-cli-3-dev libnl-genl-3-dev libnl-route-3-dev</span><br><span class="line">apt-get install iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml ocaml-findlib libx11-dev bison flex xz-utils libyajl-dev</span><br><span class="line">apt-get install gettext libpixman-1-dev libaio-dev markdown pandoc</span><br><span class="line"> </span><br><span class="line">apt-get install libc6-dev-i386</span><br><span class="line">apt-get install lzma lzma-dev liblzma-dev</span><br><span class="line">apt-get install libsystemd-dev</span><br></pre></td></tr></table></figure>
<h3 id="下载Xen4-11源码"><a href="#下载Xen4-11源码" class="headerlink" title="下载Xen4.11源码"></a>下载Xen4.11源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;xenbits.xen.org&#x2F;xen.git</span><br><span class="line">cd xen</span><br><span class="line">git checkout origin&#x2F;stable-4.11</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b stable-4.11 git://xenbits.xen.org/xen.git</span><br></pre></td></tr></table></figure>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>解压之后进入Xen目录下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --<span class="built_in">enable</span>-systemd</span><br><span class="line">make dist // 也可以使用 make world(same like make clean &amp;&amp; make dist).</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>上两步make过程会等很久(使用 make dist -j8 可以加速，开启8个线程操作)</p>
<p>ps：若在<code>make install</code> 时遇到error，可以先对下面的<code>xen-tools</code> 进行make.</p>
<p><strong>可能会遇到的问题</strong></p>
<p>如果遇到error信息如下，预编译器不识别<strong>sizeof</strong> 函数导致</p>
<p><img src="/2020/05/22/Xen-log-0-Ubuntu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/1.png" width="500px" height="300px"></p>
<p>解决方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITS_PER_LONG           (sizeof (unsigned long) * BITS_PER_BYTE)</span></span><br><span class="line">改成</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITS_PER_LONG           (__SIZEOF_LONG__ * BITS_PER_BYTE)</span></span><br></pre></td></tr></table></figure>
<p>解决完问题后，重复安装过程。</p>
<h3 id="Post-Install"><a href="#Post-Install" class="headerlink" title="Post-Install"></a>Post-Install</h3><p><strong>Reload dynamic libraries:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ldconfig</span><br></pre></td></tr></table></figure>
<h3 id="Grube-Settings"><a href="#Grube-Settings" class="headerlink" title="Grube-Settings"></a>Grube-Settings</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;default&#x2F;grub.d</span><br></pre></td></tr></table></figure>
<p><strong>Create /etc/default/grub.d/xen.cfg:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit &#x2F;etc&#x2F;default&#x2F;grub.d&#x2F;xen.cfg</span><br></pre></td></tr></table></figure>
<p><strong>在打开的文本中添加下面内容</strong></p>
<p>Be careful! The last settings depends on your system-language! </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_DISABLE_OS_PROBER&#x3D;true</span><br><span class="line">GRUB_CMDLINE_XEN_DEFAULT&#x3D;&quot;dom0_mem&#x3D;2560M,max:2560M&quot;</span><br><span class="line">GRUB_DEFAULT&#x3D;&quot;Ubuntu GNU&#x2F;Linux, with Xen-Hypervisor&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Update grub:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p><strong>删除xendomains</strong></p>
<p>当前版本有一个小bug，需要删除一个xendomains文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;etc&#x2F;init.d&#x2F;xendomains</span><br></pre></td></tr></table></figure>
<h3 id="安装-xen-tools"><a href="#安装-xen-tools" class="headerlink" title="安装 xen-tools"></a>安装 xen-tools</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install lvm2 debootstrap libconfig-inifiles-perl libdata-validate-domain-perl libdata-validate-ip-perl libdata-validate-uri-perl libfile-slurp-perl libfile-which-perl libsort-versions-perl libterm-ui-perl libtext-template-perl openssh-client perl debian-archive-keyring rinse libtest-notabs-perl</span><br></pre></td></tr></table></figure>
<h4 id="Download-and-make"><a href="#Download-and-make" class="headerlink" title="Download and make"></a>Download and make</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xen-tools&#x2F;xen-tools.git</span><br><span class="line">cd xen-tools</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="开启xen-services"><a href="#开启xen-services" class="headerlink" title="开启xen services"></a>开启xen services</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable xen-qemu-dom0-disk-backend.service</span><br><span class="line">systemctl enable xen-init-dom0.service</span><br><span class="line">systemctl enable xenconsoled.service</span><br><span class="line">systemctl enable xenstored.service</span><br><span class="line">systemctl enable xendomains.service</span><br><span class="line">systemctl enable xen-watchdog.service</span><br></pre></td></tr></table></figure>
<h3 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h3><p>重启选择带有xen-hypervisor 4.11 启动</p>
<p><strong>安装成功与否测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xentop</span><br></pre></td></tr></table></figure>
<p>如果出现下图的domain0则说明安装成功</p>
<p><img src="/2020/05/22/Xen-log-0-Ubuntu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/2.jpg" width="500px" height="100px"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="www.baudi.com">Build Xen for ubuntu</a></p>
<p>[2] <a href="https://wiki.xenproject.org/wiki/Compiling_Xen_From_Source" target="_blank" rel="noopener">Compiling Xen From Source</a></p>
<p>[3] <a href="https://www.linuxidc.com/Linux/2018-08/153709.htm" target="_blank" rel="noopener">Ubuntu 18.04修改默认源为国内源</a></p>
<p>[4] <a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/105982709" target="_blank" rel="noopener">qemu 安装  error</a></p>
]]></content>
      <tags>
        <tag>Xen log</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Xen log modify 脚本简化操作</title>
    <url>/2020/08/05/Xen-log-modify-%E8%84%9A%E6%9C%AC%E7%AE%80%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>目标用户ID与ip: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root:101.101.101.10</span><br></pre></td></tr></table></figure>
<p>第一个脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">scp test.txt root@<span class="number">101.101</span><span class="number">.101</span><span class="number">.10</span>:/home/</span><br></pre></td></tr></table></figure>
<h4 id="执行权限"><a href="#执行权限" class="headerlink" title="执行权限"></a>执行权限</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chmod +x ./test.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure>
<h4 id="自动输入密码"><a href="#自动输入密码" class="headerlink" title="自动输入密码"></a>自动输入密码</h4><p>免密登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub user@ip</span><br></pre></td></tr></table></figure>
<h4 id="获取当前目录"><a href="#获取当前目录" class="headerlink" title="获取当前目录"></a>获取当前目录</h4><p>获取当前目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workdir=$(cd $(dirname $0); pwd)</span><br></pre></td></tr></table></figure>
<h3 id="修改文件实战"><a href="#修改文件实战" class="headerlink" title="修改文件实战"></a>修改文件实战</h3><h4 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h4><blockquote>
<p>脚本所在目录 /xen-modify/</p>
<p>其中 <code>*.sh</code> 文件是要执行的脚本文件，<code>*.c *.h</code> 是在本地（最终文件是要覆盖在服务器上的）修改后的文件。</p>
<p>└──xen<br>└── xen-modify<br>   │    ├── backup.sh<br>   │    ├── hypercall.h<br>   │    ├── install-lib.sh<br>   │    ├── install-xen.sh<br>   │    ├── mm.c<br>   │    ├── move.sh<br>   │    ├── privcmd.c<br>   │    ├── pv<br>   │    │  └── hypercall.c<br>   │    ├── x86<br>   │    │  └── hypercall.c<br>   │    └── xen.h</p>
</blockquote>
<h4 id="backup-sh"><a href="#backup-sh" class="headerlink" title="backup.sh"></a>backup.sh</h4><blockquote>
<p>​        backup的目的是备份即将被修改的文件，目标文件的位置在xen文件夹内，<code>backup.sh</code> 文件在<code>xen-modify</code> 文件夹内，在获得当前目录后，需要依次进入目标文件所在目录，对文件进行备份。<br>​        因为是对原始文件进行备份，所以在执行此操作时，仅在首次备份时执行，以后不执行。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workdir=$(cd $(dirname $0); pwd)</span><br><span class="line">cd $&#123;workdir&#125;/../xen/xen/include/public/</span><br><span class="line">cp xen.h xen-backup.h</span><br><span class="line"></span><br><span class="line">cd $&#123;workdir&#125;/../xen/xen/arch/x86/</span><br><span class="line">cp hypercall.c hypercall-backup.c</span><br><span class="line"></span><br><span class="line">cd $&#123;workdir&#125;/../xen/xen/arch/x86/pv/</span><br><span class="line">cp hypercall.c hypercall-backup.c</span><br><span class="line"></span><br><span class="line">cd $&#123;workdir&#125;/../xen/xen/include/xen/</span><br><span class="line">cp hypercall.h hypercall-backup.h</span><br><span class="line"></span><br><span class="line">cd $&#123;workdir&#125;/../xen/xen/arch/x86/</span><br><span class="line">cp mm.c mm-backup.c</span><br></pre></td></tr></table></figure>
<h4 id="install-xen-sh"><a href="#install-xen-sh" class="headerlink" title="install-xen.sh"></a>install-xen.sh</h4><blockquote>
<p>这里只需要进入<code>xen</code> 目录一次就可以进行操作，所以直接使用 <code>cd ../xen</code> 进入目标目录。</p>
<p>这一步是在编译<code>xen</code> 源码的时候进行的。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../xen</span><br><span class="line">./configure</span><br><span class="line">make xen -j8</span><br><span class="line">make tools -j8</span><br><span class="line">make install-xen</span><br><span class="line">make install-tools</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<h4 id="install-lib-sh"><a href="#install-lib-sh" class="headerlink" title="install-lib.sh"></a>install-lib.sh</h4><blockquote>
<p>搭建 <code>xen</code> 的依赖。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential -y</span><br><span class="line">apt-get install bcc bin86 gawk bridge-utils iproute libcurl3 libcurl4-openssl-dev bzip2 transfig tgif  -y</span><br><span class="line">apt-get install texinfo texlive-latex-base texlive-latex-recommended texlive-fonts-extra texlive-fonts-recommended pciutils-dev mercurial -y</span><br><span class="line">apt-get install make gcc libc6-dev zlib1g-dev python python-dev python-twisted libncurses5-dev patch libvncserver-dev libsdl-dev -y</span><br><span class="line">apt-get install iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml ocaml-findlib libx11-dev bison flex xz-utils libyajl-dev -y</span><br><span class="line">apt-get install gettext libpixman-1-dev libaio-dev markdown pandoc -y</span><br><span class="line">apt-get build-dep xen -y</span><br></pre></td></tr></table></figure>
<h4 id="move-sh"><a href="#move-sh" class="headerlink" title="move.sh"></a>move.sh</h4><blockquote>
<p>将<code>xen-modify</code> 文件夹下的文件依次覆盖原始文件。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workdir=$(cd $(dirname $0); pwd)</span><br><span class="line"></span><br><span class="line">cp xen.h /$&#123;workdir&#125;/../xen/xen/include/public/</span><br><span class="line">cp x86/hypercall.c /$&#123;workdir&#125;/../xen/xen/arch/x86/</span><br><span class="line">cp pv/hypercall.c /$&#123;workdir&#125;/../xen/xen/arch/x86/pv/</span><br><span class="line">cp hypercall.h /$&#123;workdir&#125;/../xen/xen/include/xen/</span><br><span class="line">cp mm.c /$&#123;workdir&#125;/../xen/xen/arch/x86/</span><br></pre></td></tr></table></figure>
<hr>
<p>modify log</p>
<p>​    2020年8月5日      创建<br>​    2020年9月30日    增加<code>xen</code> 的脚本命令</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Xen log</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>安全计算</title>
    <url>/2020/08/15/%E5%AE%89%E5%85%A8%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h3 id="什么是安全计算"><a href="#什么是安全计算" class="headerlink" title="什么是安全计算"></a>什么是安全计算</h3><h4 id="安全计算"><a href="#安全计算" class="headerlink" title="安全计算"></a>安全计算</h4><p>安全多方计算，Secure Multi-party Computation（SMC）在保护数据安全的前提下实现多方计算，即，多个参与者将各自的数据凑在一起，并在这个大数据集上进行一定的计算，并得到最后的结果。</p>
<h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><h5 id="1-基于噪音"><a href="#1-基于噪音" class="headerlink" title="1.基于噪音"></a>1.基于噪音</h5><p>差分隐私（differential privacy）对计算过程利用噪声干扰，让原始数据淹没在噪音中，使得在引入噪声的数据中心无法推断出原始数据。（例如一张马赛克图片，无法推断出具体细节）</p>
<p>优点：效率高<br>缺点：得到的结果不够准确</p>
<h5 id="2-非噪音法"><a href="#2-非噪音法" class="headerlink" title="2.非噪音法"></a>2.非噪音法</h5><p>（这种方式一般通过密码学方法将数据编码或者加密，得到一些奇怪的数字，而且这些数字有一些性质，比如看上去很随机，但是保留了原始数据的线性关系，或者在打乱顺序的数据中心能够发现其与原始数据的映射关系。）</p>
<p>a.混淆电路（Garbled Circuit）</p>
<p>b.同态加密（Homomorphic Encryption）</p>
<p>c.秘钥分享（Secret Sharing）</p>
<p>以上提到的三种方式一般在源头将数据加密，计算操作看到的数据是密文，只要特定的假设条件满足，这类方法在计算过程中是不会泄露原始信息的。</p>
<p>优点：不会对计算过程添加干扰，因此得到的是准确值，且运用密码学理论，保障安全性<br>缺点：由于运用很多密码学方法，整个过程的计算量、通讯量很大，对于一些复杂的任务（训练几十个上百层的CNN）短时间内很难完成。</p>
<h3 id="差分隐私"><a href="#差分隐私" class="headerlink" title="差分隐私"></a>差分隐私</h3><h3 id="混淆电路"><a href="#混淆电路" class="headerlink" title="混淆电路"></a>混淆电路</h3><h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><h3 id="秘钥分享"><a href="#秘钥分享" class="headerlink" title="秘钥分享"></a>秘钥分享</h3>]]></content>
      <tags>
        <tag>Homomorphic</tag>
      </tags>
  </entry>
  <entry>
    <title>本科毕业游记</title>
    <url>/2020/07/16/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>当自己满怀负面情绪的时候，出去走走吧</p>
<p>18年毕业季，对我来说，可能用诸事不顺形容更加贴切。这里不想再回顾那个至暗时刻了~略过500字</p>
<p>在提交了本科毕业论文之后，跟舍友选择了去旅游，去闲逛。回忆起来，真的挺感谢那次远足。在游玩的时候，有时内心会有一种很强烈的声音在表达：世间如此美好，请继续相信并热爱美好的事情。其实当别人跟你在一起生活了很长时间之后，你的一举一动背后所掩盖的事实都会多多少少的被察觉吧，或悲或喜。非常感谢舍友们对自己的包容与尊重，如果当时真的在某些言语或行为上伤害过你们，真的很抱歉，记住一个人的好总好过记住一个人的坏。</p>
<p>现在想想，那次旅行是自己成长最迅速的一段时光。懂得了很多，也体会了很多。初到上海时的激动掩盖了自己内心的伤楚，甚至创下了迄今为止单日步数记录。是初到上海的下里巴人，第一次感受到了什么叫繁华。交大与复旦的学子，让我感受到这个城市在文化上的包容与开放。深入灵隐感受那里的绝美景色，站在苏堤眺望西湖两岸，数次跨越钱塘江大桥，亲自挤一挤杭州的地铁也让自己对杭州有了深刻的印象。在绍兴的一间民宿鼓起勇气跟老外谈天侃地，这睡前的卧谈也给自己增加了不少自信心。英语说的烂，到底是谁遭罪？苏州、绍兴的旅途，亲身体会到了什么是江南水乡，那种只会出现在电视画面上的景色，竟然就在自己眼前，脚下，所泛小舟之旁。也许电子设备能够记录下景色，但无法转达自己身临其境的感受。最后一站，品过南京大排档后，跟高中同学去了当时梦寐以求的南京大学，涉足在南大的各个角落，跟南大学子一起篮球，仿佛获得一天的南大身份体验卡。夜幕降临，远去之时，梦也该醒了~</p>
<p>这次的旅途过后，大家都在匆匆忙忙准备毕业的时候，我选择了再战名校。虽然这时显得跟整个学校的节奏不符，但比起之前浑浑噩噩的生活，这种逐梦并筑梦的日子更能让人铭记，更能拨动生命中响亮的音符。毕业论文答辩结束，导师惊讶的问我怎么没在考研光荣榜上看到我的名字，我不知道该如何面对这样一个始终对我抱有最大希望的老师；离校前一个月，准备租房子；离校前三周，准备6级考试；离校前两周，买下了全新备考资料，参加了6级考试，并见到了大三对我印象深刻（不听她讲课却能考近满分成绩的坏学生）的专业课老师，想对她说声对不起，老师，在你课上不是故意气你的；离校前一周，拿到了双证，见到了导员，真的很想对她说声谢谢，老师再见，但终未说出口。离校前3天，我花光了3个月的积蓄，算是买醉吧，那一段时间，是我四年里第一次跟这么多同学侃侃而谈，有的甚至是四年来第一次交流，原来那时的我在他们眼里还不算差，现在想想已经够欣慰了。6月24号，与母校彻底再见了~</p>
<p>其实二战也没有想得那么复杂，干就完了。但真正难的是做出那个决定，鼓起勇气面对未知的挑战。</p>
<p>我始终怀念并感激当年出去撒欢的自己</p>
<p>2020年7月16日01:27:26 于济宁</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>博士学长有话说</title>
    <url>/2020/04/22/%E5%8D%9A%E5%A3%AB%E5%AD%A6%E9%95%BF%E6%9C%89%E8%AF%9D%E8%AF%B4/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hello,welcome,please input the password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1b16e90030d91775c67fff0c64376e1adc72b3ccf16f52afec472d3d8df2a40f">44c8f92312f791d29699ba43ff42e648e9fa79b21ee4766c9acf0d26939412c79fde9f6a68c68773ec79f6bbd3d70d1e7162aea39893be6ccf46c02c959d95643bdec9e4084cb7574e34842c8786cdec82f0133ec7597c022bf4afbf3d23b45bf64908ca7fe7086de24f37469058b5fe6974bbb76c70b11e6c3c2c7637d6926a8e1b3f0eaaf008004de62ac5a4c5fa95b574ef3d5368d2e885d696cb18e4b9f316e86ac8decfdcfa74b973c79ccd197864383c2d409d5dc5089ad35fbb452a052b520fc33647a5a81162bfb330114f86f881d2e7e5ebbfddd0b6234608f229c97e78d6975787de78df0f0b4a6ef6d50157d584bad495dc4e06e577b002a424625edc17fa5bf727bf18ccce6841e80890e7d579747117e583e6f108f18ae523ceb950c9816848be80ebb3e458ac93ecaf4cc9ec5f728bb8767533a1f4976f3a24919de098dbe952e1a662cd191eadf382f7d8fcba9e546cae100e7ea363c4680b2584c95a22243c8565f91e113702b4ee443b22bb66e46aa4ca0e5b272014db1fcc6491df3e1742f540a818620b143a0dca8ebd6a426e6654beba3745302f165483bb33f25c8876595091e6ff557393a568477869f58b69a7fffd81e770bae4fb44eac9702621483a97a8cfbe9b666e5f47c2cc41becc477f37faf8c05ff9cd75dd4f4938c7ec35fa0e6f28768529a37f4c49f56c9cbbc6a425494a7688dc71a1550e7e757da2aa909947e35a753eb7d15b47d3cd6ea067ec3646429f7e0746a51aae0bbf119cf6b82ec67896bd3171ffa6eb18613635273e81f67d115e1fe93b853dc7120c8c72cb9a83ffb29f3b61bc470d4aca13eff6f897cd9c72c7f0758af4dc3171f37dd2392224b59e5e5519c624f2cf6b9e51964de2f10ee481c6877e382686aa919b10bb59393b731e2ab5ebec8dbc0e15f3ec51e5f622a92b646235e7bfa16a0a534b4771d540e8e39a89ed271e4dca3a783e3ecc31def3a680b654145e1f0b47cfbd8ff7b727864588244eff0645221688400bfed7fab9d992f5d4bb36029f172d26118923235ecedf58fb6a21728fde95e0a8aab5c1670d6883d1ab3fd650ae84b3b3788a4474e70e383697a86630899c3337a02456983a999dd65911c7c11f2e2c83699b4703b5a9e8349d98d98c6a08df5b92320668e8b0db3fbfe1d56760d46589201e0457cf5bdc01b0315844dcfca9de8713313e016381ca49d52d452affa3bf407177e1a754f0159275ac3c9a7b39363943d67335bee16cf6918229ff1ebf12a7f1d7c7ed4052a816f74a53b7b5bab82f5870c66ca314e67e8d4757aaa8046a11f6aeddd6f5e8e73c527ce28a9858980d2e87dc6d7f4acce57380a8127c5da47b6193ccf062e25928d1924674a180cc33de639a04c513d7aa9384cb6a0a2a26fd8c244f48eb71fc227e4743733f5dc69df65b6fda757e7226d8585cb834394ff192ac71247cd08bf1616599fd29e224ad34a09e7d299a95016630ea1ad0cf432900ba3c29be728496fa03a63c437b6aa489581a3cb7426b1bff26a43bd275ecad2194fb42a7d6138715f5b65e03128464c3c5a8e37eb3e7dedee0eeb8a6397db7ef4feb63d847eeda4fc85a8b31f8a2356f00ba321faf4373db0c506372a0b5d9283fe587d0a98f016217e6687b434085b4579298e6f1820041b78e4d1447efa8650df72738f04541733000da5fa7184b9c7a1f6487d1c814c2a4666bb4d1496d97b5a2cad81653fb406faabb579d9648371b00c7a94893c17edc2013cb8dcbb74da811a2a1fe755558f70a703913c262192532501e5785ed9807ef5a2e01414e846aa26eb9fbf4194bc2a5448445c5e0120376754343d2dbdc3c2465520829535f6e1d56d26da037baf53508d9a75227b0ba651f5765400b41957a449f10a9dfb0a746bd6faf300ab6642fefaf4cf5dbbc56d2734a2db0a247696e51646a3ee979f62f987362d150fff8e39c055ea1c4f37f320bca5c529195e76e6804349596f8cf2c2caae3f52342728f2230129c2ade9f5d6e2fa3cc5148fbc2a02b53fbba35ab051897cb39abf5a4f5850dd2d4d16b6d7245c01b32da3911bcec1b6b57109f5b7edbf57744fb9fc03854675df9c51b3c8cdea58e00ef731bab37d30631370edf452f778ed6d9a870f593712a855ef6eb53dffe053a84a1a828f7c2e84679bf37c1931bef3fbb6911f0beaab48db2a18b49868ace725683ae091a9891817e220a1bb6cbf71d2b661d63c991c11b0f208ff194e37adb39afe1dddea6ca853c39a1e01820a711a41a4a5465f9efac2477a3a72da7fc15d2246dd92636ec1146719996b020438064905a2c7e5c79bfd52e8ead5f001fc7ebbfcec0c4e2a593bf5b0a1eeacf158c07a43447ad2951b50f78b6b1bec41ba695214ae32545e7b8f63ee841b32a2f052500a22afe1500f4c742ca3cf62fa42f6a5f7010a5e15b7b3df3637760e2baf3a77cf270c02feacc0dccc6ac945f72452668e73a728338cb1d68e37e8979840888a041dbcbb65835b5508d8f2dc0e9acf1063e55e7e3c6e01017cea5674c9314a4e2df48f29a2e41a6fe3844f22fb34c4c000cf33f02dea61bba4e49849e85e4d8a7aa3fda0f584ccdccdcbf6ec9d1b33ab1cdd94a8ab56e9752e74ccc2700aa5d0623f12b4e5717c5fe37b89e470d5ccb425920450a1a24e47262cc7fe92cdd5a2f73e42686fd8cbb72b02a0b957ee56f4cceff38b159b682371d5d56243f97fc8aa18d9c7b09cb10d0deed680b2fdac6c35fc3b3a8940c177e94932ce97e64505e4ffe9887a35fb6647f69bceb89b61c0a1695bfacbee7469e629a6441344d07ff4c704793c451b1a4fed26f95bfc3509cac24c5550d3b1fd65e4c2308cf40e4d9a62fbd340169eb8f818c74179ba4ec3e110701dcfa359f90e9b38ca80554d1ef30098a1810140b09b6ad501b8f31b430c16b6bc328345c34318e1effa3421b880944b363b04f97e9ceea0065e49c9b751b6914213d8d3f0d80cd12299aaf99b8583f261acfce84f495294967809140bb4b4555fc15134803e3240e41f3016c7f22d7aeff27c35a374d19e0e71762c32db03b3228fa8e934b406ac27ca4d40dab25944e5add5d6cabc5c253b20e52dcbc45fd42770242360ccf37334c05a12d645443831604c8881c52d7fac315614f2f5b37624fd461da5cc9dcbd32bf4209b8e71c86b9b35ac1d3a2544000b67f9516d934273fb33b05516464128204f4de5dcb5c768005defad687512bb5883c0b4dc03bcb030f24f4bafe0172ad33f78575228c347a57445fce25dd9047539a380be0e61d53156168ab24b7a6ca661e5aa3a3cbb3b618d442150f011edfc0b4cb9f3d6d8f0cccc2c2a64786bd4d82bf02b4370a53f05b24c338f1e7c483370ed68683c4f9f0d45c46c645f9c316d00663050fa2b75483fe368b558d0109ef66975e652045c7e76e080a42d1a7efeeea57f0fcf11a383a2b7753e21bb4b2a47036f38bc15f04e9f615b9363c7ba230e9017a341d7353b850ba2ecf295d9ae85c68fa83064f5da2a0f2e80adbc8579d9e9a749489f494e85886d6998fe6f0588e8b3d5710bdf052d2e8618261e0900d98e806d364750b5721c681c625208b9c8bafc82de6f703037111a385bbe4e02d92734e5be8368629b908da342a4c780c64197822d9fa0e4ce67f064f76acde85288775717d0d23762f8b33a556c60c3655c105b2c09dc5a0ac4ecd18dd47ccb043e3ab0914d5bf39aabd0c4daf1d2f23039aa54b4458fcc06b841719c3e237ef29a0c267258915b2c9cbbc5c31541fe780624b3406f0d0b42d5cb2d9535bbfcf798291337ef64ee3e556ec413d1e8087bfa02c79386d583137c20095f162c7739efc4df384939c7f87952c763f19463fce23bbfb951c491a733676af9bff3abfca76d9f62b7b124a5431d919535688045d9c6807231714d7f8f4dbffdc37a8600ce4a60aa8e070b3e1b11e76213b697e28279e9da53b3a0cbd159d0aae54cc006a113e8d9020dd15cac1354e411f87339a0bb537a21df398dfefddbf6da46c76dbd4d9d0e86aa286aff3781b959a4ac109e8020187b34b70b2eeb49e21161e4dee91e78943918a23ca7dc3927fc8ccc0b5226829a531876c2d5d62bcf9784df3db34516529d97abd44e2f2b5ecdf828ca5bf3fade6874954db69610a6f6981b4064734b770c05bdc5c275da0a0b939e9a9f3a88d91c6c1c3e3cc506a6c6d332d2cb65d36a768800265723a9e6af1dec15dc568326ebdf82434d56ac46889f2628737a4f274bed1bd26b20a9e81f848355410517d513c83a7208ea6e2c9d76841b331021124186aa17f4c41bdf4dcdb66c489dc50f9da069cf2ddc6d423d60827cdbabf334b2dffe0001315e9df505c6ba6ca2baf40bf03ade6bbd9c7067a36718f9e20da2b3a8a33c9e46b953092c0d815995e95de05f066be0b9afa63b514375c5209ef52642c3927dfa5cf577521781210211c63b7cd3918b56512200927c39559775ba7193d85acaaece5b35c61c63bc3266bce5cc81c13b3abefea91bb8cc05c826ce62fe6ae2d0c6bdf07402faaed5c055c14b652eeac59ea3c7015dba809a326a751f31219ba6049fbaab70e96c021060cc3f5319cad2e225bd1101355bdde8a469b0aababd85ba806b19d0043818d8ba64dc5ff9872d892a50d248030426d3d52c10284138cd052326a4c1ae67245f3d6fdebc9aadbb955bd587365e894b843c42ff9218bb479bee777cefe65a10d3db71d4dda1f0b22cc7b763f903c27cbab7ededba3a046a91315757805790ca441bc9b77c41e7a35bf9bbbd764f92577d8fb75710aec350a7f8145e55dacead6807c451a8082bc35d17ce14bbcdbe9fcf03db4a372966471ec2be9afa1e4769f6865642eee82decd974efc21e4ae0a52497e39a8f0598d5fb3b65aa4f83bbdf2b8b5f963732c9815c4d05b22dec90cbd592b08a8d210687f634236bcc6ca7b25f162c55bc49230a72298e5ab725cb1298198e248a55c76b33afe138e7013427a3d497b978f2f5559ba63b7d5511c6ad041f5a45451350cf77b2077a6e56a02d01dae7d6db22fd0085f17de66f19c779eb73ef6da4c7198f3f49d1c0ef94ee781cbf9482dde971228b2ae49a6fb65ad08ba31dacdb570c617eb7690e276a2c615f20840020ccf085906d5208fcdb79af322cf558641d6d39a0c243e4fe7f0ecd5fce77494efd114a2f99078bf7bfdec52a658649a844e50c1674c909f9e34fcbf973af1bc30609e1c8f76d268b80ca7c200127fc52093ccf42abe3e51e3cb0178b1ad0f2484cffcae0320b0523752284cdda47a912c0ab781fefad7c84187684d26e7a2bc4947ec5b3b7c03f437be23395225d0655d31bab1810b38c6088e24b9388375d0a30845a2f266540f01b09eb7f7a2ba90629d137254f4bb84ebc8c7bf7a36ec397f4284414d8a2712c03aa2382cdc7eca5c82559d96760521f90c0e2e0470def1c20ffe9480e92563acdd1d3b858202eb09214fff38113a350158fcb8723626c3b218b9b0e0156ed0a7b8dc2ae4f7249974506ce8fac58dab21f321980896388775250c27a5a3c51cf760d5932784ab7215f08fa7a223224d286c8687cbdd96c107873c393a4b63fba56e860b50bacc0c59bb7709a2fcc6330e3ed7f61bf5ac559d08f7d4158698d0a53255ba11e9242c2e53b525deb9d1a7357937d07be5cb800d50f84d9146fdb1dc9ec69e6aa6e29e0d3b53df49324844bf9658d244593bf084b71ee7f786a57df6e6cadfcd9c1a565f92fd5147ca1c6374100658d46ee9e96b7ffcafd738ad4eb7cab30c857ebace08795ada0514afe44089367d3e5a334dfec8f48692c5197f80400c05a80e5b3ada74630a5085a19a18e0a60887482021c4a0fa07a03c940b96beae0f6faa3da9f1f1f25c2bf1d331d21617ae47dceec65cbf1fd58516474f3a46c3247bbf370410d283fcf0f5698fffb9eeeed5b06e6984e63f03f71df29cc6e4b50df720e0602306f949dd6030ee4f4368151b5da8b0fd85d4cb611fc8c6e141d412a425baf56d79404f171e19158c1453a37de987ccfbb6c88de9202cd2eb00c1c067429cf5fc49bc3f80a8e41f90081ea328456aee1943999546d93c8c67ad93572d98ed67ab266a2b7eba78ffa2cefd793429306e6a55480bb297ba2a03efbac0a1211fa03fa9e70bda0c4569e1cc4b6025b96654e7ea9a1d645fa13e65975f97a4dfa2399a5531710b6cef7785fcb102d2c8ea7bf8b145d45ebd9ba23f959fdfd904b4d4a7f01d16cdbede831221f9157923e812b5ca467a7b721f09772fe8312d97405e04414ea4f2b46536723a00766faa5bc93e20be98c32c1fb5ece090b3f0f1c5dcf902c33a7a321fb83f878a8099b6bfc18da3fe92f0e08856062b6aa99ef17090bd817c76d308981ba035dcc6ea5e3a5a11ccdaf357b3ba0a3a71f2a9eba277a5bc85b78079ce801ac1794331bf389c0ea731dc8b5df2af601bfacd0bc0286c267aa5d336bf1e2b1604fb84318278d5bda935410cf73460e9bde2168c8a99ee54e34d8041d49434703576d9eaa6397e98a8874e39ca15b4648cdc15572399c2d6b9a6f5590ad3ca644bdbd8252cbd45016d6a9024a587993d50155e70d222c43a68462ce649b81631b437490344a028263cbaee3e69bc8a86e142ef5672b3e6e5f81fe99278d16ddb7463e7e239bdb419d28dee81a09339bb27e8e15c52f8a861bc5828c8f8c05a87a3feb77309aa2fd4699d32708ad3371389195fd69fc1daca849c489d78b6bddd0c46278c03fa1aa68dfda0fe628691a3ac9cf84898934ce497b08b368f321fd8d43979f659db3d2456e93f0318e9d3fd42b82f0fca8fc66905dd8054573da762b821fe6bc63155045fefed9a09925da70b01c2b7c65675fd8c9d60692d183dd4718759fb95d7a2eb6fddeb76a081f1421b4b7481d7b955f271f9dbab7b2569daa774cdc7ea27c69d29e1fc52cdb4eb28fb34aafe82a41649d87514f58b66c575b249cf0b2c9da18b329f6c12a588a007f48a8f71a8181034495f7c7ed17a4920077b50589eea596b11ad6bd3eba477bf66d81d4da0002674f83537f08041850c2587b66cf50a45c1fe8a9556786de49ab2d0721964ff460f16e91c425e6ea27051e470c20b3fdc0850e9c19a8f4a1c1c137aaba5718a6672abcbcac722038a0572a4fbdf1690bc9b24704c7eccd9bd351bd73ecca619660d879ce7045a80df370e4b3e5133387ac73cd1c3e78ad544872787d7ee0d08af411eb7726d188a84e73967435fd3e9543ec63212a1c4b338f596be230528d6ba2e0d029c1cd7752bf75825c4d1fbb970dc6301876a327cc46fa09b78ff04f855b65565cac6bde31337f37829003a4a6cfe678871d0dd72cbd2894b7de21e75b73f87c3f49522c797197131d741ee18f4ae0d0909c7af12cb7d4a749301f2435e2911865bc7baef5f889ec4dbea96063c0d8fd05e71367bbf7153322e3bdb3df9ea414d5d1dd59924b18ebcffcb21522486a1ede0dbf5178192d163735ad3b8988f7b3acf1c19f2cdc47b89dccdbc5ed93c7b958f063eeee02a53481ef694e8c96b67ec38bd674d4fca3e2b74d615d6af7d8efd2e6dffee16948d450c4a6fa0b63ba1db240230331b219a7a2eb7d11977da0517ce86dbbfe64e3969b44db65461627b23e3f1ec467d53dfa3687fabe7bac06ee820d107a5db39f89c2ce8951861f1b33826fa54f26fd013cde0861e995acba9c2f6841248d166825a47b40b8e9ca91a13748cc836d455df74821f08138f54bf7b2083574db5d2ab80022304260b90fa842ff4ac0439c23a28a1490cd8bcf0e884f38264ba7bbe7053a9d40af4f7c3d7b9dda8bfd1b0b79dc1ef3d54ff1523b9f4fbcb5095f188a50e2c1d78f5e054e33b6c2bd0741a4980c4c2d703c347a701be48f65a7dc4c07ca1439a69cf27395b83e5aea8946133715c361f434089f8bf4616b260cdfb32adc026e8cb7a1980dabdf3c18c42bc39bb8f1c83fe099d41cb3183415166258244a759529881c18f4b8593570f14c5395e1a83e1cc4e43af42e52fde1d9bdb995edb6888263bdb4da02e4fd868c0ce0edf3a8a5937de36e6522b35999490d8fdad3b42fd833fa36a0f61bd6e5a5722723dde437183305f93eb327a7344046001a546d75e3356aa6b49c731c48672d4271b1c0fd13b83330de5304b3a1261ba6822938fe0c63bf33bd5bccd342faf52f9b7e77c0c9d7df91cf6eea5ae4500eda71fcaeb5d10eb6907ead874fcebf221db8a9adece3ce4ad39329f952393ec9e6ea3a37099c5cebd7e3a70f5f75ceaf41ebfd88f40301e8a0a843262e9e701d48a514171f3169c98b2611ca445f2e28bc88cbfe2cbb546fb9e28d4af1827b743ff9de5f040436d0727762fd370607f9bd7229fd6225d5012b60e0fc2f23d1fce9c142d6a70e701970d8915dc3ece6fc513df3a1ed10e4fda74e5569421a178a3fbdcd6d9b163382577d0227fa201d33676d9a91aefed41d6ff7a6025a3e240d922e0086365206937586a553eea43c6da9a89359a07cbd3d9b98aa2cbb931befaca8630ca175bc7c107dcfef0192ebd97090d047e814014a0bda12da2fa853cbc5340116081c74c6208503c0b751c10f73b56c8f3d77b4b41c64956ac595b30f295aca8a7443246755a7fdd82fbe6d3f3d4da4a8c5c34b4caa639984b67ab2c377947748804e78cb3779d180b86123daa405886474b2e5b36f7191369145faeb0d15926045028939deb7b88840839643139f9d74a95d600a2ed6d86dea73215a3fcf2e13ee924e6e850025b76f229d4efb21a3aa6feaec7d4074a02a0256c9ad9c04e15a190fe2a0ede854c1976586e30034d706ddaf4a5741d2c5452398b0f2832939e0b81e62b1b8dfd712ecabb71ae57fd6f9f37364d65f68ca6848c5d0cc85430ff8c82fe48efd13589c8102a182206ac3c778086257bf9a1349a9f797a36937956cfa019756402bb594387b5a112d539f0f39c63565f1638c9308bca8a8014cf8329a6b135d430c5786242f3dad99a0deebae78d706b71692b619caa184fdd0cd760b4c18e40eae6187f037aac091fa25e6d836a5cbfef4f06f7c37d7a450889ee0f01b746bbfbb01ff4257aa986c9eef304740355d8191263ef6feb747e595502fd19656abb8127b486adbad5fd16f0e46b9cb85a25ac2c220bbb2b50c991fbec1313db716f844880cb27f6de6714f7b0fa1e1de965b4696351b374a8539acab916d0a239dd17cce091fb76ef314bd353e619fdf3051d111bb64fb95cd48ab0707b5f6d80535b09c26e07273a858e84c7cf2bb6602ee2ad6e06ba35d3287aafd455b36263a74f4e0b5bf923f5546af4a29236fc4b9d21d6fe2660d4291fed5202722d34a1438b35ef3c6cfa621492489a9bba4770afa5711708117754b8710d5d50015e8d4b4466245d06261c535d274dc5f29d46b2730f06479f9f665a36aacfb78e71e66bc15f1be915aa1ae13ccdf64d95243da41ae990a741e2649535354f4113a732bfc971524b6ed555612ba2f967da825cdcec88d94b5fd33201ee607b0fb5fdc40e553ca2b50655baff7de1b5b351029b4f7eb1991aec75668bd22db06d8a8da2a287357304f8defe56764f3532ac3e19e83a7e4b573b92508d6c58441f562492950c2d4a12d1dcd593cc83bae820bd561573addfe4f2c8feedff84934b2ac574cc31e1f1cfb2bfd1b50adf228e1b27fc1625e74b2affb1f3fbd57ff26b325c5fb3cef53f0b3f427fae3275166ed4fd43d5af498ee3511d06e1cbeff42cb8b4ebda2db5a4f09a1f16c5ea1a40e29a7192c07a9a2bf34dcedbd9998f8b62720a77cdd39662d8a8e4a71e2eb88d3b993de0a9e77e125b1e96f6068acbe3bd2fc1e39615a668bfa493a67204e4236f6231ca1f7bf0fef0dc0ccd9ac7378b5e1ea00b7ba42e6d965fed006780e8660010f4db4e9d769266310cb9e0c3cae0710995906fdd2fe6894736f4b602df768cdfbaa145e9e00db0c60e7dbd620911a8eeb5b6220546691727a9f730693f341dbd69183f2a1d066b54da41239f542db24ed118ea4866b272d2610e8b36ff5f92d63eb449303af08ddae7f4c67e1eb983eff49c979f1d8cd83a1744e3c021b6e544c2dc79597a6abfe8ef3a9a4618083039a065af577fe73f38b4f4af181f6c6137c7995116cffc3a97a52c8fcc744ecf348229c5998b369f68265f29ecefcf283e1772ad6b494df9cf9d080a45d25d45fa73091eb938dd6ac5dfe0de8f553f8ade3b529e12ffbd3970e7ddb8b9f91c1b52f26f32b9ef1804a177ba4d82387b2f04a70a4693ecb9c181dd088290abf7497ec731f933abadb62f8da4a1a9313ba167889548c62fcec534b0661cd5a3daef64d22185e280b5ff3c5cf1acaa5fe5dec22996b5f84bfa86f6a7489864338ada0fd55d6daf901cbcf4579900b3bf9011b87984f2ab63421f522151871b8e1ca5845fc5549ab4d9db8fce12552238df5f451b8a11fa12e6e90434cd861dc39896995881898b6e07e63954254b7f6cc61a268684a15291354564239f9eaa1282bbb33f06216aa87ff7fbcd2a8337bf156afb9e4a48c2e5f9817c6ac3a9bb15e10ffff20505af08e4b54315d0eb2a118cb099726f77bc407d935936500a8ceb47f400f4cb4e8ba9d6c226a96b7216af1c4b7788a43a05e2864c6c0a287e90c136787e977b20103a17f8c9ec5111f48aef5156561387ee40e6f3e9f109ab4cd27ea84371439055c718e487726adca4a9671bf534c49adcd62ffcbbdf3bd2d8742a74e0d0ea419905864d644108d2f2eebe630a81e15508c934dae92cefa5139dc946df46036a1e4d771d8962a50e142393c4b48c4892ef1c0d55045293eb382a501b47f13f17f29b831c2e3b4cf478c5e4b7d7d35c16ead60bbd85c336ec71b0d44ca85fa26c780a9bc0b6f992c5dada74b0f8b6624bf03533a5340d3984bd68173ad8f5ffe55828ab94771b4af082dfa173f4388e65faa3c063dbd48a94bceeba03e1d3b2660451e0f145d57b0b636497ffbbe89a2d2abf21a55feafa3394bb6995ef79cfc279aebeb8d7187bb247cffeeac6a60126818fff1e234dbbdbfd09f8ecbeadbf67d906801c24d0147093f52ecbc2dd1025814d471cf63f6e4709c1368616197d0e91b8e8bd241c3d6a768f8f1655b4ba90a53bdd1e73674f5b537f2bd18fadd669137cf8a3776ebd29e57e61af584694d3d64d4a40750b6133aefeea32b49d2320ceca0efa7eb004a73bc0846ccb319b39a6d326a1cec13b83e15fa4d67556cb5ab10328b208da2bfe3a47de3841c060e7c05024dec4fa945fdd20f3b0a6f5b68fd942ff8910b5459124a67c0ebdfe28f991527cf0953a8c0369807e75112ad36d7a8b310b148fc833bd0cd13457c379f90037a195835a4f65076474de232d4d61d6ec83d416dd81a379402d0827d46d3c01d6fd44f18a042d6d453a03a85dc042be01d90f174e23014883d305404c880d10a8f3e7d58e3207ac32cb39a34644e1b63b7c6613c78362f2c59311a5e2af01ce3821027c42b56f85e6817271c11c9f0578347e0adaea8e584f47da53770c87c270ea94abb2e29610885a0232fb68a6c07349e38f03442dbd952fa83716c07c63c1409148701146aca157349cfc947dc5aca62521b6c9e08a5214a1c10a201e32325d79a1e1c1cdc25888e900b9a4a7e19839b1723af8d670fc432f2f80e5a40f640a7b7c5a602ea99637bfa1001daed0c22ae30e8ef095ec850dfeef4662dd3bb3ce6602bd0a9b9e32a318e99fabbad98a33d3848803894cce5d347530dc98dcda85e60e666708c481a57ff2707af1fec81690855e27a962179a438a6e0617c887bb704d3dcd3168e9439fca7835a5afe7f90f161590b8b722153e700ed5a3c2c6429cae73e5e42b044fae04735a023e19431aa1e427759d59334594008ee2290c01f436e363647096cdbbea58bdd8efa51e650e50dd1dd246479f964f574425693d102b10313bc384d43c4ecec854ff956e5d083b64a5fa66a7632535b6cacff6a24b9e8ef9d0831e92700a92820848ee26a54a46669eafd4549ade2eb60c7f02e68d37ee5a2e00fe5995fdb555067c60ba13eb7ec33db6df3709801d3ecaa86610a898ed695f57e64aca</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>泉城济南</title>
    <url>/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/</url>
    <content><![CDATA[<h3 id="泉城济南"><a href="#泉城济南" class="headerlink" title="泉城济南"></a>泉城济南</h3><p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-7.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-8.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-2.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-3.jpg" width="500px" height="350px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-4.jpg" width="500px" height="390px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-5.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-6.jpg" width="500px" height="400px"></p>
]]></content>
      <tags>
        <tag>picture</tag>
      </tags>
  </entry>
  <entry>
    <title>RAMBleed Reading Bits in Memory Without Accessing Them</title>
    <url>/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://rambleed.com/docs/20190603-rambleed-web.pdf" target="_blank" rel="noopener">RAMBleed Reading Bits in Memory Without Accessing Them</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">University of Michigan;Graz University of Technology;University of Adelaide and Data61</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">Rowhammer attack,Bit Flips</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">Microarchitecture attacks</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文利用DRAM中临位的比特反转(bit flips)所得到的信息，推断出内存中的数据项，并依次读取目标信息。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">扩展信息</td>
<td style="text-align:center"><a href="https://rambleed.com/" target="_blank" rel="noopener">RAMBleed</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="Rowhammer-Attack"><a href="#Rowhammer-Attack" class="headerlink" title="Rowhammer Attack"></a>Rowhammer Attack</h3><p>&emsp;&emsp;Rowhammer比特翻转攻击是指利用临近内存单元之间电子的互相影响，在足够多的访问次数后让某个单元的值从1变成0，反之亦然。这种攻击可以在不访问目标内存区域的前提下使其产生数据错误。 这次的攻击与操作系统和软件无关，纯粹是硬件上的漏洞导致的。</p>
<p>&emsp;&emsp;这是个特别针对Memory的攻击技术，但不是缓冲区破坏或溢出攻击。一般的计算机Memory介质中，每个存储单元（晶体管+电容器）存放1bit数据，这个比特位要么是0，要么是1——存储单元中充满电子表示1，清空表示0。内存就是由上亿这样的存储单元构成的，数据也因此得以存储。</p>
<p>&emsp;&emsp;不过电容器会泄露，一个电容器充满电子后，只需要几毫秒就会泄露殆尽。这就要求CPU（内存控制器）对电容进行充电，让“1”这个值能够保持住。整个过程是由内存控制器先读取电容器中的值，然后再把数据写回去。这种刷新操作，每秒会执行几千次。</p>
<p>&emsp;&emsp;内存容量正在大幅度上涨，所以存储比特位的电容器也就越来越小，排列越来越近。要防止相邻的电容之间相互干扰，难度也就变得更大。如果能够快速、反复访问一排电容，相邻行的电容更容易产生干扰错误和所谓的“比特位翻转”，也就是0变成1。</p>
<p>&emsp;&emsp;其实正常的数据读写一般是不会发生比特位翻转的，可是如果对某些行进行<strong>反复读写</strong>，问题就有可能产生。2014年卡内基梅陇大学的研究人员层发表过一篇论文，题为《无访问情况下的内存比特位翻转——DRAM干扰行错误的试验研究》，其本质是通过机器码指令CLFUSH或Cache Line Flush，强制进行这种比特位的读取和更新。据说利用这种方式，可引起大量比特位翻转。</p>
<p>&emsp;&emsp;利用比特位翻转，很多事情都可以做，比如说执行未经授权的代码。这就是所谓的Rowhammer。这是一种颠覆人类对安全认知的攻击技术，软件层面几乎解决无望。先前已经有研究人员演示，如何用Rowhammer来进行提权，以及打破安全沙盒。</p>
<p>&emsp;&emsp;不过看原理就知道，这种攻击实在有够理想化，存在诸多不确定性，因为攻击者根本无法精准控制比特位如何翻转。比如说，这种攻击对数据所在的内存位置首先就有要求，这样才能实施内存翻转：但敏感数据存储在这些位置的几率可能并不算高。</p>
<h3 id="RAMBleed概况"><a href="#RAMBleed概况" class="headerlink" title="RAMBleed概况"></a>RAMBleed概况</h3><p>&emsp;&emsp;该攻击<strong>基于位翻转漏洞Rowhammer</strong>，可绕过ECC机制，允许黑客使用普通用户权限从OpenSSH服务器中提取签名密钥。黑客通过观察Rowhammer引发的位翻转，<strong>可推断出附近DRAM行中的值，</strong>进而读取其它进程中的物理内存。</p>
<h3 id="获取物理地址"><a href="#获取物理地址" class="headerlink" title="获取物理地址"></a>获取物理地址</h3><p>&emsp;&emsp;该攻击的重点是获取到虚拟地址到物理地址之间的映射。</p>
<h4 id="伙伴算法"><a href="#伙伴算法" class="headerlink" title="伙伴算法"></a>伙伴算法</h4><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/buddy-memory-allocation.jpg" width="500px" height="300px"></p>
<p>首先我们假设我们一个内存块有1024K，当我们需要给A分配70K内存的时候，</p>
<ol>
<li>我们发现1024K的一半大于70K，然后我们就把1024K的内存分成两半，一半512K。</li>
<li>然后我们发现512K的一半仍然大于70K，于是我们再把512K的内存再分成两半，一半是128K。</li>
<li>此时，我们发现128K的一半小于70K，于是我们就分配为A分配128K的内存。</li>
</ol>
<p>&emsp;后面的，B，C，D都这样，而释放内存时，则会把相邻的块一步一步地合并起来（合并也必需按分裂的逆操作进行合并）。</p>
<p>&emsp;&emsp;论文<a href="http://export.arxiv.org/pdf/1511.08756" target="_blank" rel="noopener">DRAMA</a>中提到只要获得了物理上连续的$2MiB$空间，采用反向工程即可获取低22位物理空间地址。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片13.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;基于Linux内存的伙伴分配算法，分配空间大小为$4KiB*2^N$，此处取$N = 10$,即分配$4MiB$空间，并将此 $4MiB$ 物理空间分裂为两个 $2MiB$ 的物理空间，通过$MMap$系统调用，消耗掉前面低于$2MiB$的存储空间，最后剩余的空间一定是一个连续的 $2MiB$ 的物理空间。</p>
<h3 id="内存风水逆转"><a href="#内存风水逆转" class="headerlink" title="内存风水逆转"></a>内存风水逆转</h3><p>&emsp;&emsp;针对Rowhammer的内存位置限制，有人开发出一种名为 <a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_razavi.pdf" target="_blank" rel="noopener">Flip Feng Shui</a>（风水翻转）的攻击技术，这本质上也是Rowhammer。这种攻击就是篡改deduplication操作——deduplication在云端主机中应用得很常见，这种技术可让两个或者更多虚拟主机共享特定的数据块，起到节约内存资源的作用。</p>
<p>&emsp;&emsp;Flip Feng Shui在<strong>物理内存</strong>上做手脚，可致加密密钥和其他敏感数据存储到<strong>内存特定的位置</strong>——这些位置就很容易受Rowhammer的影响了。所以才叫风水翻转，就是让数据在内存中的“风水”位置变更好，Rowhammer攻击变得更可靠。</p>
<h3 id="RAMBleed攻击"><a href="#RAMBleed攻击" class="headerlink" title="RAMBleed攻击"></a>RAMBleed攻击</h3><h4 id="比特翻转"><a href="#比特翻转" class="headerlink" title="比特翻转"></a>比特翻转</h4><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片11.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;本文提到，在$Row1$与$Row3$加载相同的目标内容，并对其进行锤击操作，即Rowhammer攻击，则会使得$Row2$中对应的比特位发生比特翻转。经过试验证明，当$Row3-Row2-Row1$ 存储内容为$0-1-0$时，此时在Rowhammer攻击下很有可能发生比特翻转，而当$Row3-Row2-Row1$ 存储内容为$1-1-1$时，此时在Rowhammer攻击下发生比特翻转的可能性很小，因此，基于两种概率大小的不同，可以判断出目标信息中存储的绝大多数信息内容。其中$Row2$中存储的是已知内容。</p>
<h4 id="Frame-Feng-Shui"><a href="#Frame-Feng-Shui" class="headerlink" title="Frame Feng Shui"></a>Frame Feng Shui</h4><p>&emsp;&emsp;上文提到，Feng Shui可以将目标信息加载到指定的存储空间中。如下图所示，红色部分存储目标信息，$A0,A1,A2$ 存储攻击者内容，因此根据比特翻转是否发生，则<strong>很有可能</strong>推断出指定比特位存储的信息。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片17.jpg" width="600px" height="450px"></p>
<h4 id="RAMBleed-on-ECC-Memory"><a href="#RAMBleed-on-ECC-Memory" class="headerlink" title="RAMBleed on ECC Memory"></a>RAMBleed on ECC Memory</h4><p>&emsp;&emsp;ECC Memory指的是Error-Correcting Code Memory，DRAM的纠错机制。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片21.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;在<a href="https://www.computer.org/csdl/pds/api/csdl/proceedings/download-article/19skfwyNp5e/pdf?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjc2RsX2FwaSIsImF1ZCI6ImNzZGxfYXBpX2Rvd25sb2FkX3Rva2VuIiwic3ViIjoiYW5vbnltb3VzQGNvbXB1dGVyLm9yZyIsImVtYWlsIjoiYW5vbnltb3VzQGNvbXB1dGVyLm9yZyIsImV4cCI6MTU5MjMxODY5OX0.uN4RLcw4bjEbBeqINhfDoXY7dyJM2-GWgE90zZJt2y4" target="_blank" rel="noopener">ECCPloit</a>这篇论文中指出，比特纠错所产生的时间延迟是十分明显的，这种情况下可根据纠错产生的时间延迟判断是否发生了比特翻转。</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片19.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;相对来说，采用了ECC纠错的方式，获取到的结果更可信，而没有采取比特纠错方式获取的结果是在一定程度上可信的。本文通过实验测得，通过Feng Shui方式，成功将目标信息加载到指定存储位置也是有一定概率的，文中提到这个概率在83%， 通过Rowhammer攻击获取到比特翻转成功的概率为82%，因此，最终获取到目标信息的量在68%。由于此攻击针对的是秘钥信息，获取的秘钥信息量在27%以上，就可成功破解，因此，68%的信息量足以支持对秘钥的破译。综上，此方式是行得通的。</p>
<p>&emsp;&emsp;本文的目的，旨在阐述这种攻击方式的行之有效，因此并未对其产生的额外代价、时间成本考虑在内。</p>
<p>&emsp;&emsp;研究人员已向英特尔、AMD、OpenSSH、微软、苹果和红帽通报了调查结果，本论文发表在2020年5月举行的第41届IEEE安全和隐私研讨会。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://blog.csdn.net/wojiuguowei/article/details/79377228" target="_blank" rel="noopener">伙伴分配器的一个极简实现</a></p>
<p>[2] <a href="https://www.freebuf.com/column/133871.html" target="_blank" rel="noopener">神乎其神的Rowhammer</a></p>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>System Security</tag>
        <tag>Rowhammer attack</tag>
      </tags>
  </entry>
  <entry>
    <title>求最大间隔分离超平面</title>
    <url>/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/</url>
    <content><![CDATA[<p>在利用向量机进行最大间隔分离超平面和分类决策函数的求解时，解题过程如下</p>
<h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/1.png" width="500px" height="500px"></p>
<p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/2.png" width="500px" height="500px"></p>
<p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/3.png" width="500px" height="500px"></p>
<p>​                            <img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/4.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/5.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/6.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/7.png" width="500px" height="500px"><br>以本次作业为例：<br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/8.png" alt></p>
<ul>
<li><p>Q: 已知正例点$x_1=(1,2)^T，x_2=(2,3)^T，x_3=(3,3)^T$，负例点$x_4=(2,1)^T，x_5=(3,2)^T$，试求最大间隔分离超平面和分类决策函数，并找出哪些点是支持向量</p>
</li>
<li><p>解： $x_1=(1,2)^T，x_2=(2,3)^T，x_3=(3,3)^T​$,负例点  $x_4=(2,1)^T，x_5=(3,2)^T​$<br>​        $y_1=y_2=y_3=1,y_4=y_5=-1​$</p>
<p>计算目标函数得：</p>
<script type="math/tex; mode=display">\sum\limits_{i=1}^5\sum\limits_{j=1}^5\lambda_i\lambda_jy_iy_jx_i^Tx_j \\ = 5\lambda_1^2 + 13\lambda_2^2 + 18\lambda_3^2 + 5\lambda_4^2 + 13\lambda_5^2 + 16\lambda_1\lambda_2 + 18\lambda_1\lambda_3 - 8 \lambda_1\lambda_4 - \\14\lambda_1\lambda_5 + 30\lambda_2\lambda_3 - 14\lambda_2\lambda_4 - 24\lambda_2\lambda_5 - 18\lambda_3\lambda_4 - 30\lambda_3\lambda_5 + 16\lambda_4\lambda_5​</script><p>构造并求解约束最优化问题</p>
<p>​                                           $\min\limits_{\lambda} \frac{1}{2}\sum\limits_{i=1}^5\sum\limits_{j=1}^5\lambda_i\lambda_jy_iy_jx_i^Tx_j - \sum\limits_{i=1}^5\lambda_i​$</p>
<p>​                                             <script type="math/tex">s.t. \sum\limits_{i=1}^5 \lambda_iy_i = 0 ​</script></p>
<p>​                                             即 $\lambda_1 + \lambda_2 + \lambda_3 - \lambda_4 - \lambda5 = 0​$ </p>
<p>​                                             $\lambda_i\geq 0 ,i=1,2,3,4,5$</p>
<p>将  $\lambda_5 = \lambda_1 + \lambda_2 + \lambda_3 - \lambda_4​$ 带入目标函数并记为</p>
<p>​            $S(\lambda_1,\lambda_2,\lambda_3,\lambda_4) = 2\lambda_1^2+\lambda_2^2+\frac{1}{2}\lambda_3^2+\lambda_4^2+2\lambda_1\lambda_2 - \\ 2\lambda_1\lambda_4 + \lambda_2\lambda_3 + \lambda_3\lambda_4 -2\lambda_1 - 2\lambda_2 - 2\lambda_3 $</p>
<p>对$\lambda_1,\lambda_2,\lambda_3,\lambda_4​$求偏导数，并令为0:</p>
<p>​                                       <script type="math/tex">\frac{\partial S}{\partial \lambda_1} = 4\lambda_1 + 2\lambda_2 - 2\lambda_4 - 2  = 0</script></p>
<p>​                                        <script type="math/tex">\frac{\partial S}{\partial \lambda_2} = 2\lambda_1 + 2\lambda_2 + \lambda_3 - 2  = 0​</script></p>
<p>​                                        <script type="math/tex">\frac{\partial S}{\partial \lambda_3} = \lambda_2 + \lambda_3 + \lambda_4 - 2  = 0</script></p>
<p>​                    <script type="math/tex">\frac{\partial S}{\partial \lambda_4} = -2\lambda_1 + \lambda_3 + 2\lambda_4  = 0</script></p>
<p>令系数矩阵为A,增广矩阵分别为</p>
<p>​                      <script type="math/tex">A = \left[\begin{array} {rrrr}4 & 2 & 0 & -2 \\ 2 & 2 & 1 & 0 \\ 0 & 1 & 1 & 1\\ -2 & 0 & 1 & 2\end{array}\right]，\\ \overline{A} = \left[\begin{array} {cccr|r}4 & 2 & 0 & -2 & 2\\ 2 & 2 & 1 & 0 & 2 \\ 0 & 1 & 1 & 1 & 2\\ -2 & 0 & 1 & 2 & 0\end{array}\right]</script></p>
<p>因为A与增广矩阵$\overline{A}​$的秩不相同，故线性方程组无解，则满足约束条件的最小值在边界取得</p>
<p>当$\lambda_3 = 0​$ 时，S 在 $\lambda_1 = \lambda_4 = 1, \lambda_2 = \lambda_3 = 0​$取最小，$\lambda_5 = \lambda_1 + \lambda_2 + \lambda_3 - \lambda_4 = 0 ​$</p>
<p>计算得 </p>
<p>​                           $w^* = \sum\limits_{i=1}^5\lambda_iy_ix_i = (-1, 2)​$</p>
<p>​                            $b^* = y_j - \sum\limits_{i=1}^5\lambda_iy_ix_i^Tx_j  = -2$</p>
<p>因此分离超平面为 $-x^{(1)} + 2x^{(2)} -2= 0$</p>
<p>分类决策函数为   $f(x) = sign(-x^{(1)} + 2x^{(2)} -2)$</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/9.jpg" width="500px" height="500px"></p>
<p>5个坐标点为$x_1 = (1,2)^T,x_2 = (2,3)^T, x_3 = (3,3)^T, x_4 = (2,1)^T, x_5 = (3,2)^T$</p>
</li>
</ul>
<p>构造约束最优化问题：</p>
<script type="math/tex; mode=display">\min\limits_{w,b} \frac{1}{2}(w_1^2 + w_2^2)​</script><p>$\left. \begin{matrix} w_1 + 2w_2 + b \geq 1 \\ 2w_1 + 3w_2 + b \geq 1 \\ 3w_1 + 3w_2 + b \geq 1 \\ -2w_1 - w_2 - b \geq 1 \\ -3w_1 - 2w_2 - b \geq 1 \end{matrix} \right\}  \Rightarrow \left. \begin{matrix} w_1 \leq -1 \\ w_2 \geq 2 \end{matrix} \right\} \Rightarrow w^*= (-1,2)^T 处取得最小值​$</p>
<p>带入$w_1 = -1和w_2=2​$得</p>
<p>$\left\{ \begin{matrix} 3 + b \geq 1 \\ 4 + b \geq 1 \\ 3 + b \geq 1 \\  -b \geq 1 \\ -1 - b \geq 1 \end{matrix} \right. \Rightarrow \left\{ \begin{matrix} b \geq -2 \\ b \leq -2\end{matrix}\right. \Rightarrow b = -2$</p>
<p> 因此分离超平面为 $-x^{(1)} + 2x^{(2)} -2= 0​$</p>
<p>  分类决策函数为   $f(x) = sign(-x^{(1)} + 2x^{(2)} -2)$</p>
]]></content>
      <tags>
        <tag>homework</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机 系统与进程的通用平台</title>
    <url>/2020/07/17/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B3%BB%E7%BB%9F%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E7%94%A8%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情期间小确幸</title>
    <url>/2020/07/14/%E7%96%AB%E6%83%85%E6%9C%9F%E9%97%B4%E5%B0%8F%E7%A1%AE%E5%B9%B8/</url>
    <content><![CDATA[<p>&emsp;&emsp;与不完美的自己和解，事情正在变得越来越好。</p>
<p>&emsp;&emsp;中午终于完成了之前一直未完成的实验环境部署，可能是最近最令人兴奋的事情了。可能这里引用《士兵突击》老白的一句话比较合适：进步大源于起点低！哎，对于自己而言这终归是一个不小的成功吗，王老师说过的，一个个的小成功就会汇集成一个大的成功，自信同样如此。跟自己和解，接受自己的不完美，慢慢的在通往自己所希望的未来之路上就会更加的自信去面对生活中的未知挑战。多给自己一些正向的加持。</p>
<p>&emsp;&emsp;由于疫情原因，高中同学很多都没有返校，有的正在忙着准备硕士、博士研究生复试，有的在忙着准备网上答辩，不管怎样，希望结局都会让你们满意，冲吧。跟着一帮积极向上的同学在一起奋斗，是一件多么令人兴奋的事情啊。</p>
<p>&emsp;&emsp;下半年开学，理想的状态下，大哥来到了华东理工大学读博士，这样在上海就不再是孤零零的一个人了，有三个同学（一个在航天院工作）在上海待着，想想都让人兴奋。以后舍友出去玩，我也可以不再独守空房了。每个月出去聚一聚，上海，你可真给了人不少的期许呢。</p>
<p>&emsp;&emsp;武汉之旅  18年本科毕业的时候，想过最后一站去武汉，但是种种原因，必须割舍武汉之旅，明年，武汉就有高中同学了，约起，重拾武汉之行。</p>
<p>&emsp;&emsp;这次疫情的严峻程度，远远超过很多人的想象。想着，忙完这段时间，高中同学们可以一起约着去北湖或者微山湖一起游玩，高中毕业之后，除了泰山之旅，我们好像很少在夏天聚呢。</p>
<p>&emsp;&emsp;还有就是，自己的米6重生了，换上了心心念的新电池，果然续航上了一个档次。</p>
<p>&emsp;&emsp;最后还要说一下，还有好多事情没有提上日程，尤其是科研上的内容，要抓紧时间啊，冲！</p>
<p> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 疫情期间于济宁</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2020年5月13日</p>
<hr>
<p>补充更新：2020年5月20日</p>
<p>史上一个大喜的日子</p>
<p>两位初高中同学考上他们心仪学校的研究生了❀</p>
<p>北京交通大学</p>
<p>中南财经政法大学</p>
<p>补充更新：2020年6月26日</p>
<p>大哥收到华东理工大学的博士研究生录取通知❀</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>[转载]博士学历真的很重要吗</title>
    <url>/2020/04/19/%E8%BD%AC%E8%BD%BD-%E5%8D%9A%E5%A3%AB%E5%AD%A6%E5%8E%86%E7%9C%9F%E7%9A%84%E5%BE%88%E9%87%8D%E8%A6%81%E5%90%97/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hello,welcome,please input the password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="73cb661a25324537faf9dddd316a123cc645bc9ef07602af426b3e22d8299756"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
</search>
