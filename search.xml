<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</title>
    <url>/2020/05/15/Amazon-Aurora-Design-Considerations-for-High%20Throughput%20Cloud-Native%20Relational%20Databases/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://dl.acm.org/doi/epdf/10.1145/3035918.3056101" target="_blank" rel="noopener">Aurora</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Amazon</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">分布式数据库</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">致力于构建一个分布式数据库</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>研究背景</p>
</li>
<li><p>解决问题</p>
</li>
<li><p>解决方法与步骤</p>
</li>
<li><p>试验评价</p>
</li>
<li><p>相关工作</p>
<hr>
<h3 id="研究背景-为什么出现Aurora？"><a href="#研究背景-为什么出现Aurora？" class="headerlink" title="研究背景 为什么出现Aurora？"></a>研究背景 为什么出现Aurora？</h3></li>
</ul>
<p>&emsp; &emsp; Aurora是亚马逊云服务AWS中的关系型数据库服务，主要面向OLTP场景。 <strong>Aurora</strong>基本设计理念是在云上环境下，数据库的最大瓶颈不再是计算或者存储资源，而是网络，因此基于一套存储计算分离架构，将日志处理下推到分布式存储层，通过架构上的优化来解决网络瓶颈。 </p>
<p>&emsp; &emsp; 在云上环境下，存储计算分离作为解决系统弹性和伸缩性的方案越来越普遍。广义来说，任何数据库，底下文件系统挂一个分布式存储，即可以认为做到了存储计算分离。通过存储计算分离，可以透明添加存储节点，剔除故障节点，进行故障切换，扩展存储空间等。在这个背景下，IO不再成为数据库的瓶颈，因为IO压力可以打散在多个存储节点上，反而是<strong>网络成为瓶颈</strong>，因为数据库实例与所有存储节点的交互都需要通过网络，尤其是为了提升数据库性能，数据库实例与存储节点可能是并行交互的，这进一步加重了网络压力。</p>
<p>&emsp; &emsp; 传统数据库中的IO操作是需要同步执行的，当需要进行IO等待时，这往往会导致线程上下文切换，影响数据库性能。比如IO读操作，当需要访问一个数据页时，如果在缓冲池没有命中，则需要进行磁盘IO，那么读线程需要等待IO完成才能继续其它操作，同时这种动作可能会进一步引发刷脏页等。另外一个我们熟悉场景是事务提交操作(IO写操作)，事务提交成功返回前一定要等待事务对应日志刷盘才能返回，由于事务是串行提交，因此其它事务也必须同步等待这个事务提交。 <strong>传统数据库中的两阶段事务尤其不适合与分布式云环境，因为二阶段提交协议对系统中参与的节点和网络要求很高，自身容错能力有限，这点与大规模分布式云环境中，软件和硬件故障是常态的特征是矛盾的。</strong></p>
<p>&emsp; &emsp; 本文介绍的Aurora是一个云上环境全新的数据库服务可以很好的解决上述传统数据库遇到的问题。 <strong>它基于存储计算分离的架构，并将回放日志部分下推到分布式存储层，存储节点与数据库实例(计算节点)松耦合，并包含部分计算功能。</strong> Aurora体系下的数据库实例仍然包含了大部分核心功能，比如查询处理，事务，锁，缓存管理，访问接口和undo日志管理等；但redo日志相关的功能已经下推到存储层，包括日志处理，故障恢复，备份还原等。</p>
<h3 id="Aurora的系统架构"><a href="#Aurora的系统架构" class="headerlink" title="Aurora的系统架构"></a>Aurora的系统架构</h3><h3 id="存储系统的设计"><a href="#存储系统的设计" class="headerlink" title="存储系统的设计"></a>存储系统的设计</h3><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp; &emsp;Aurora诞生的原因是在弹性伸缩的云环境下，传统的高吞吐<strong>OLTP</strong>数据库既不能保证可用性，又不能保证持久性。 <strong>Aurora</strong>的关键点在于将传统数据库中的存储与计算分离，具体而言，将日志部分下推到一个独立的分布式存储服务层。由于这种分离架构下，所有IO操作都是通过网络，网络将成为最大的瓶颈，因此Aurora集中精力优化网络以便提高系统吞吐能力。Aurora依靠Quorum模型，在性能影响可控的前提下，解决云环境下的各种异常错误。在Aurora中，日志处理技术减少了I/O写放大，异步提交协议避免了同步等待，同时分离的存储服务层还避免了离线故障恢复和检查点操作。</p>
<p>&emsp; &emsp;Aurora相对于传统数据库有三大优势，首先，底层数据库存储是一个分布式存储服务，可以轻松应对故障；其次，数据库实例往底层存储层只写redo日志，因此数据库实例与存储节点之间的网络压力大大减小，这为提升数据库性能提供了保障；第三，将部分核心功能(故障恢复，备份还原)下推到存储层，这些任务可以在后台不间歇地异步执行，并且不影响前台用户任务。</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>SIGMOD</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Lares:An Architecture for Secure Active Monitoring Using Virtualization</title>
    <url>/2020/05/03/Lares-An-Architecture-for-Secure-Active-Monitoring-Using-Virtualization/</url>
    <content><![CDATA[<h3 id="Prevention-VS-Detection"><a href="#Prevention-VS-Detection" class="headerlink" title="Prevention VS Detection"></a>Prevention VS Detection</h3><p>Prevention侧重于阻止，即在攻击前拦截攻击，如阻止一个恶意驱动的加载。Detection侧重于检测，即在攻击成功后，检测是否发生过攻击。Prevention类的虚拟机监控又称Active Monitoring（主动监控），典型的有Lares。Detection类的虚拟机监控又称Passive Monitoring（被动监控），典型的有VICTOR。</p>
<ul>
<li><strong>Active Monitoring（Synchronous）</strong></li>
</ul>
<p>主动监控一般采用同步机制，即事件发生时进行拦截。所以主动监控适合于监控发生频率较低的事件，如进程的创建。对发生频率较高的事件进行拦截，如拦截线程的切换，则会带来较大的性能损耗，尤其是当这类事件会引起陷入hypervisor的时候。</p>
<ul>
<li><strong>Passive Monitoring （Asynchronous）</strong></li>
</ul>
<p>被动监控一般采用异步机制，即事件发生后进行检测，如周期性的扫描内存。发生频率较高的事件可通过这种方式进行检测。然而这种方法需要权衡性能和风险，确定一个合适的检测周期。过于频繁的检测会带来较大的性能损耗，而周期间隔较大又可能遗漏攻击行为（攻击行为发生在两次检测之间）。</p>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>虚拟化安全</tag>
      </tags>
  </entry>
  <entry>
    <title>PCA图像压缩</title>
    <url>/2020/05/20/PCA%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>本文是《数据科学与工程算法基础》的一个大作业</p>
]]></content>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>The first blog</title>
    <url>/2020/04/18/The-first-blog/</url>
    <content><![CDATA[<h3 id="The-first-bolg"><a href="#The-first-bolg" class="headerlink" title="The first bolg"></a>The first bolg</h3><p>Hello，this is my first bolg of github.io.</p>
<p>I tried for about 12 hours to set up this simple website, right now, the author(me) still feel awsome.</p>
<p>I have written some technology blogs in <a href="https://www.cnblogs.com/Robin5/" target="_blank" rel="noopener">Robin5</a>.</p>
<p>Seize the time and face the bright future！</p>
<p>I will work harder and harder!</p>
<p>Witness me in github.io</p>
]]></content>
      <tags>
        <tag>英文</tag>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Ununtu18源码安装Xen4.11</title>
    <url>/2020/05/22/Ununtu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/</url>
    <content><![CDATA[<p>在部署Xen的时候采用的是Ubuntu18.04(英文版) + Xen4.11</p>
<p>由于安装Ubuntu后，使用国外的源比较慢，修改为国内源，这样速度快很多。</p>
<h3 id="Ubuntu换源"><a href="#Ubuntu换源" class="headerlink" title="Ubuntu换源"></a>Ubuntu换源</h3><p>我采用的是修改阿里源为Ubuntu18.04的源</p>
<p><strong>备份 sources.list</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>
<p><strong>添加阿里源</strong></p>
<p>在<strong>/etc/apt/sources.list</strong>文件前添加如下条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p><strong>更新源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p><strong>For Ubuntu 18.04:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential</span><br><span class="line">apt-get install bcc bin86 gawk bridge-utils iproute2 libcurl4 libcurl4-openssl-dev bzip2 module-init-tools transfig tgif</span><br><span class="line">apt-get install texinfo texlive-latex-base texlive-latex-recommended texlive-fonts-extra texlive-fonts-recommended pciutils-dev mercurial</span><br><span class="line">apt-get install make gcc libc6-dev zlib1g-dev python python-dev python-twisted libncurses5-dev patch libvncserver-dev libsdl-dev libjpeg-dev</span><br><span class="line">apt-get install libnl-route-3-200 libnl-3-dev libnl-cli-3-dev libnl-genl-3-dev libnl-route-3-dev</span><br><span class="line">apt-get install iasl libbz2-dev e2fslibs-dev git-core uuid-dev ocaml ocaml-findlib libx11-dev bison flex xz-utils libyajl-dev</span><br><span class="line">apt-get install gettext libpixman-1-dev libaio-dev markdown pandoc</span><br><span class="line"> </span><br><span class="line">apt-get install libc6-dev-i386</span><br><span class="line">apt-get install lzma lzma-dev liblzma-dev</span><br><span class="line">apt-get install libsystemd-dev</span><br></pre></td></tr></table></figure>
<h3 id="下载Xen4-11源码"><a href="#下载Xen4-11源码" class="headerlink" title="下载Xen4.11源码"></a>下载Xen4.11源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;xenbits.xen.org&#x2F;xen.git</span><br><span class="line">cd xen</span><br><span class="line">git checkout origin&#x2F;stable-4.11</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b stable-4.11 git:&#x2F;&#x2F;xenbits.xen.org&#x2F;xen.git</span><br></pre></td></tr></table></figure>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>解压之后进入Xen目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --enable-systemd</span><br><span class="line">make dist &#x2F;&#x2F; 也可以使用 make world(same like make clean &amp;&amp; make dist).</span><br><span class="line">mkae install</span><br></pre></td></tr></table></figure>
<p>上两步make过程会等很久(使用 make dist -j8 可以加速，开启8个线程操作)</p>
<p><strong>可能会遇到的问题</strong></p>
<p>如果遇到error信息如下，预编译器不识别<strong>sizeof</strong> 函数导致</p>
<p><img src="/2020/05/22/Ununtu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/1.png" alt></p>
<p>解决方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITS_PER_LONG           (sizeof (unsigned long) * BITS_PER_BYTE)</span></span><br><span class="line">改成</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITS_PER_LONG           (__SIZEOF_LONG__ * BITS_PER_BYTE)</span></span><br></pre></td></tr></table></figure>
<p>解决完问题后，重复安装过程。</p>
<h3 id="Post-Install"><a href="#Post-Install" class="headerlink" title="Post-Install"></a>Post-Install</h3><p><strong>Reload dynamic libraries:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ldconfig</span><br></pre></td></tr></table></figure>
<h3 id="Grube-Settings"><a href="#Grube-Settings" class="headerlink" title="Grube-Settings"></a>Grube-Settings</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;default&#x2F;grub.d</span><br></pre></td></tr></table></figure>
<p><strong>Create /etc/default/grub.d/xen.cfg:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit &#x2F;etc&#x2F;default&#x2F;grub.d&#x2F;xen.cfg</span><br></pre></td></tr></table></figure>
<p><strong>在打开的文本中添加下面内容</strong></p>
<p>Be careful! The last settings depends on your system-language! </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_DISABLE_OS_PROBER&#x3D;true</span><br><span class="line">GRUB_CMDLINE_XEN_DEFAULT&#x3D;&quot;dom0_mem&#x3D;2560M,max:2560M&quot;</span><br><span class="line">GRUB_DEFAULT&#x3D;&quot;Ubuntu GNU&#x2F;Linux, with Xen-Hypervisor&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Update grub:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p><strong>删除xendomains</strong></p>
<p>当前版本有一个小bug，需要删除一个xendomains文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;etc&#x2F;init.d&#x2F;xendomains</span><br></pre></td></tr></table></figure>
<h3 id="安装-xen-tools"><a href="#安装-xen-tools" class="headerlink" title="安装 xen-tools"></a>安装 xen-tools</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install lvm2 debootstrap libconfig-inifiles-perl libdata-validate-domain-perl libdata-validate-ip-perl libdata-validate-uri-perl libfile-slurp-perl libfile-which-perl libsort-versions-perl libterm-ui-perl libtext-template-perl openssh-client perl debian-archive-keyring rinse libtest-notabs-perl</span><br></pre></td></tr></table></figure>
<h4 id="Download-and-make"><a href="#Download-and-make" class="headerlink" title="Download and make"></a>Download and make</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xen-tools&#x2F;xen-tools.git</span><br><span class="line">cd xen-tools</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="开启xen-services"><a href="#开启xen-services" class="headerlink" title="开启xen services"></a>开启xen services</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable xen-qemu-dom0-disk-backend.service</span><br><span class="line">systemctl enable xen-init-dom0.service</span><br><span class="line">systemctl enable xenconsoled.service</span><br><span class="line">systemctl enable xenstored.service</span><br><span class="line">systemctl enable xendomains.service</span><br><span class="line">systemctl enable xen-watchdog.service</span><br></pre></td></tr></table></figure>
<h3 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h3><p>重启选择带有xen-hypervisor 4.11 启动</p>
<p><strong>安装成功与否测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xentop</span><br></pre></td></tr></table></figure>
<p>如果出现下图的domain0则说明安装成功</p>
<p><img src="/2020/05/22/Ununtu18%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Xen4-11/2.jpg" alt></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="www.baudi.com">Build Xen for ubuntu</a></p>
<p>[2] <a href="https://wiki.xenproject.org/wiki/Compiling_Xen_From_Source" target="_blank" rel="noopener">Compiling Xen From Source</a></p>
<p>[3] <a href="https://www.linuxidc.com/Linux/2018-08/153709.htm" target="_blank" rel="noopener">Ubuntu 18.04修改默认源为国内源</a></p>
<p>[4] <a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/105982709" target="_blank" rel="noopener">qemu 安装  error</a></p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>PUBG JNG</title>
    <url>/2020/04/18/PUBG-JNG/</url>
    <content><![CDATA[<h3 id="JNG战队发展历程回顾"><a href="#JNG战队发展历程回顾" class="headerlink" title="JNG战队发展历程回顾"></a>JNG战队发展历程回顾</h3><h4 id="JNG初次相遇"><a href="#JNG初次相遇" class="headerlink" title="JNG初次相遇"></a>JNG初次相遇</h4><p>很久很久以前，这支战队的几个骚年游荡在这样一个空旷的平原上</p>
<p><img src="/2020/04/18/PUBG-JNG/1.jpg" alt="IMG_0814"></p>
<p>这个寒假的某一天，他们在飞机上相遇，并开启了他们相识到并肩作战的征程</p>
<p><img src="/2020/04/18/PUBG-JNG/2.jpg" alt="IMG_0815"></p>
<h4 id="睡衣战队红极一时"><a href="#睡衣战队红极一时" class="headerlink" title="睡衣战队红极一时"></a>睡衣战队红极一时</h4><p>在他们相遇不久，便迎来了队伍的第一次胜利</p>
<p><img src="/2020/04/18/PUBG-JNG/3.jpg" alt="IMG_0823"></p>
<p>当时他们采取的是著名的车轮战，即3辆装甲车并驾齐驱，纵横四海的战术</p>
<p><img src="/2020/04/18/PUBG-JNG/4.jpg" alt="IMG_0822"></p>
<h4 id="各种模式吃鸡常态化"><a href="#各种模式吃鸡常态化" class="headerlink" title="各种模式吃鸡常态化"></a>各种模式吃鸡常态化</h4><p>在经历了短短几天的磨合后，这几个小伙子已经将吃鸡常态化</p>
<p>普通模式</p>
<p><img src="/2020/04/18/PUBG-JNG/5.jpg" alt="IMG_0863"></p>
<p><img src="/2020/04/18/PUBG-JNG/20.jpg" alt></p>
<p>特种兵模式</p>
<p><img src="/2020/04/18/PUBG-JNG/6.jpg" alt="IMG_0833"></p>
<p>一日两鸡已是正常</p>
<p><img src="/2020/04/18/PUBG-JNG/7.jpg" alt="IMG_0838"></p>
<p><img src="/2020/04/18/PUBG-JNG/8.jpg" alt="IMG_0852"></p>
<h4 id="雪地扔雷，对手一片哀嚎"><a href="#雪地扔雷，对手一片哀嚎" class="headerlink" title="雪地扔雷，对手一片哀嚎"></a>雪地扔雷，对手一片哀嚎</h4><p><img src="/2020/04/18/PUBG-JNG/9.jpg" alt="IMG_0858"></p>
<p><img src="/2020/04/18/PUBG-JNG/10.jpg" alt="IMG_0869"></p>
<p><img src="/2020/04/18/PUBG-JNG/11.jpg" alt="IMG_0871"></p>
<p><img src="/2020/04/18/PUBG-JNG/12.jpg" alt="IMG_0903"></p>
<h4 id="最后一次征战雪地"><a href="#最后一次征战雪地" class="headerlink" title="最后一次征战雪地"></a>最后一次征战雪地</h4><p>在一次极寒模式对决中，几个小伙子竟然连锅端掉了一个满编RMB玩家。在这之后，光子工作室终于对他们下手了，出于人道主义，并不能直接限制玩家们参与游戏，于是乎，默默地移除了他们最擅长的极寒模式，他们再也不用落地寻找暖宝宝了，再也听不到系统提示：“暴风雪还有60秒到达，打开背包，利用打火机生火取暖”。但系统为了其余玩家的游戏体验，只能如此。</p>
<p><img src="/2020/04/18/PUBG-JNG/13.jpg" alt="IMG_0909"></p>
<h4 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h4><p>性感小wei在线比心</p>
<p><img src="/2020/04/18/PUBG-JNG/14.jpg" alt="IMG_0834"></p>
<h3 id="JNG-建队"><a href="#JNG-建队" class="headerlink" title="JNG 建队"></a>JNG 建队</h3><p>终于，在2020年4月17日，这支战队正式成立了</p>
<p><img src="/2020/04/18/PUBG-JNG/15.jpg" alt="IMG_0855"></p>
<p>属于JNG（Jining Gaming）的时刻已经来临</p>
<p><img src="/2020/04/18/PUBG-JNG/16.jpg" alt></p>
<p>今晚，请锁定和平精英，关注这支战队！</p>
<p><img src="/2020/04/18/PUBG-JNG/21.jpg" alt></p>
<p>建队首鸡</p>
<p><img src="/2020/04/18/PUBG-JNG/18.jpg" alt></p>
<p><img src="/2020/04/18/PUBG-JNG/19.jpg" alt></p>
<p>一支穿云箭，千军万马来相见</p>
<p><img src="/2020/04/18/PUBG-JNG/22.jpg" alt></p>
<p>雪地彩蛋</p>
<p><img src="/2020/04/18/PUBG-JNG/23.jpg" alt></p>
]]></content>
      <tags>
        <tag>game-for-peace</tag>
        <tag>JNG</tag>
      </tags>
  </entry>
  <entry>
    <title>SP&#39;15 Last-Level Cache Side-Channel Attacks are Practical</title>
    <url>/2020/05/18/SP-15-Last-Level-Cache-Side-Channel-Attacks-are-Practical/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://mykrobin.github.io/files/docs/CSCA-004-SP2015.pdf" target="_blank" rel="noopener">Last Level Cache Side Channel Attacks are Practical</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">Department of Electrical Engineering, Princeton University</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">side channel attacks</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">security cross VM</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文详细地讲解了跨虚拟机的侧信道攻击</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>side channel attack</tag>
        <tag>cross VM</tag>
        <tag>last level cache</tag>
      </tags>
  </entry>
  <entry>
    <title>RAMBleed Reading Bits in Memory Without Accessing Them</title>
    <url>/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">原文PDF</td>
<td style="text-align:center"><a href="https://rambleed.com/docs/20190603-rambleed-web.pdf" target="_blank" rel="noopener">RAMBleed Reading Bits in Memory Without Accessing Them</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">作者信息</td>
<td style="text-align:center">University of Michigan;Graz University of Technology;University of Adelaide and Data61</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">核心内容</td>
<td style="text-align:center">Rowhammer attack,Bit Flips</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">研究领域</td>
<td style="text-align:center">Microarchitecture attacks</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">全文总览</td>
<td style="text-align:center">本文利用DRAM中临位的比特反转(bit flips)所得到的信息，推断出内存中的数据项，并依次读取目标信息。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">扩展信息</td>
<td style="text-align:center"><a href="https://rambleed.com/" target="_blank" rel="noopener">RAMBleed</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="Rowhammer-Attack"><a href="#Rowhammer-Attack" class="headerlink" title="Rowhammer Attack"></a>Rowhammer Attack</h3><p>&emsp;&emsp;Rowhammer比特翻转攻击是指利用临近内存单元之间电子的互相影响，在足够多的访问次数后让某个单元的值从1变成0，反之亦然。这种攻击可以在不访问目标内存区域的前提下使其产生数据错误。 这次的攻击与操作系统和软件无关，纯粹是硬件上的漏洞导致的。</p>
<p>&emsp;&emsp;这是个特别针对Memory的攻击技术，但不是缓冲区破坏或溢出攻击。一般的计算机Memory介质中，每个存储单元（晶体管+电容器）存放1bit数据，这个比特位要么是0，要么是1——存储单元中充满电子表示1，清空表示0。内存就是由上亿这样的存储单元构成的，数据也因此得以存储。</p>
<p>&emsp;&emsp;不过电容器会泄露，一个电容器充满电子后，只需要几毫秒就会泄露殆尽。这就要求CPU（内存控制器）对电容进行充电，让“1”这个值能够保持住。整个过程是由内存控制器先读取电容器中的值，然后再把数据写回去。这种刷新操作，每秒会执行几千次。</p>
<p>&emsp;&emsp;内存容量正在大幅度上涨，所以存储比特位的电容器也就越来越小，排列越来越近。要防止相邻的电容之间相互干扰，难度也就变得更大。如果能够快速、反复访问一排电容，相邻行的电容更容易产生干扰错误和所谓的“比特位翻转”，也就是0变成1。</p>
<p>&emsp;&emsp;其实正常的数据读写一般是不会发生比特位翻转的，可是如果对某些行进行<strong>反复读写</strong>，问题就有可能产生。2014年卡内基梅陇大学的研究人员层发表过一篇论文，题为《无访问情况下的内存比特位翻转——DRAM干扰行错误的试验研究》，其本质是通过机器码指令CLFUSH或Cache Line Flush，强制进行这种比特位的读取和更新。据说利用这种方式，可引起大量比特位翻转。</p>
<p>&emsp;&emsp;利用比特位翻转，很多事情都可以做，比如说执行未经授权的代码。这就是所谓的Rowhammer。这是一种颠覆人类对安全认知的攻击技术，软件层面几乎解决无望。先前已经有研究人员演示，如何用Rowhammer来进行提权，以及打破安全沙盒。</p>
<p>&emsp;&emsp;不过看原理就知道，这种攻击实在有够理想化，存在诸多不确定性，因为攻击者根本无法精准控制比特位如何翻转。比如说，这种攻击对数据所在的内存位置首先就有要求，这样才能实施内存翻转：但敏感数据存储在这些位置的几率可能并不算高。</p>
<h3 id="RAMBleed概况"><a href="#RAMBleed概况" class="headerlink" title="RAMBleed概况"></a>RAMBleed概况</h3><p>&emsp;&emsp;该攻击<strong>基于位翻转漏洞Rowhammer</strong>，可绕过ECC机制，允许黑客使用普通用户权限从OpenSSH服务器中提取签名密钥。黑客通过观察Rowhammer引发的位翻转，<strong>可推断出附近DRAM行中的值，</strong>进而读取其它进程中的物理内存。</p>
<h3 id="获取物理地址"><a href="#获取物理地址" class="headerlink" title="获取物理地址"></a>获取物理地址</h3><p>&emsp;&emsp;该攻击的重点是获取到虚拟地址到物理地址之间的映射。</p>
<h4 id="伙伴算法"><a href="#伙伴算法" class="headerlink" title="伙伴算法"></a>伙伴算法</h4><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/buddy-memory-allocation.jpg" width="500px" height="300px"></p>
<p>首先我们假设我们一个内存块有1024K，当我们需要给A分配70K内存的时候，</p>
<ol>
<li>我们发现1024K的一半大于70K，然后我们就把1024K的内存分成两半，一半512K。</li>
<li>然后我们发现512K的一半仍然大于70K，于是我们再把512K的内存再分成两半，一半是128K。</li>
<li>此时，我们发现128K的一半小于70K，于是我们就分配为A分配128K的内存。</li>
</ol>
<p>&emsp;后面的，B，C，D都这样，而释放内存时，则会把相邻的块一步一步地合并起来（合并也必需按分裂的逆操作进行合并）。</p>
<p>&emsp;&emsp;论文<a href="http://export.arxiv.org/pdf/1511.08756" target="_blank" rel="noopener">DRAMA</a>中提到只要获得了物理上连续的$2MiB$空间，采用反向工程即可获取低22位物理空间地址。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片13.png" width="600px" height="450px"></p>
<p>&emsp;&emsp;基于Linux内存的伙伴分配算法，分配空间大小为$4KiB*2^N$，此处取$N = 10$,即分配$4MiB$空间，并将此 $4MiB$ 物理空间分裂为两个 $2MiB$ 的物理空间，通过$MMap$系统调用，消耗掉前面低于$2MiB$的存储空间，最后剩余的空间一定是一个连续的 $2MiB$ 的物理空间。</p>
<h3 id="内存风水逆转"><a href="#内存风水逆转" class="headerlink" title="内存风水逆转"></a>内存风水逆转</h3><p>&emsp;&emsp;针对Rowhammer的内存位置限制，有人开发出一种名为 <a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_razavi.pdf" target="_blank" rel="noopener">Flip Feng Shui</a>（风水翻转）的攻击技术，这本质上也是Rowhammer。这种攻击就是篡改deduplication操作——deduplication在云端主机中应用得很常见，这种技术可让两个或者更多虚拟主机共享特定的数据块，起到节约内存资源的作用。</p>
<p>&emsp;&emsp;Flip Feng Shui在<strong>物理内存</strong>上做手脚，可致加密密钥和其他敏感数据存储到<strong>内存特定的位置</strong>——这些位置就很容易受Rowhammer的影响了。所以才叫风水翻转，就是让数据在内存中的“风水”位置变更好，Rowhammer攻击变得更可靠。</p>
<h3 id="RAMBleed攻击"><a href="#RAMBleed攻击" class="headerlink" title="RAMBleed攻击"></a>RAMBleed攻击</h3><h4 id="比特翻转"><a href="#比特翻转" class="headerlink" title="比特翻转"></a>比特翻转</h4><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片11.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;本文提到，在$Row1$与$Row3$加载相同的目标内容，并对其进行锤击操作，即Rowhammer攻击，则会使得$Row2$中对应的比特位发生比特翻转。经过试验证明，当$Row3-Row2-Row1$ 存储内容为$0-1-0$时，此时在Rowhammer攻击下很有可能发生比特翻转，而当$Row3-Row2-Row1$ 存储内容为$1-1-1$时，此时在Rowhammer攻击下发生比特翻转的可能性很小，因此，基于两种概率大小的不同，可以判断出目标信息中存储的绝大多数信息内容。其中$Row2$中存储的是已知内容。</p>
<h4 id="Frame-Feng-Shui"><a href="#Frame-Feng-Shui" class="headerlink" title="Frame Feng Shui"></a>Frame Feng Shui</h4><p>&emsp;&emsp;上文提到，Feng Shui可以将目标信息加载到指定的存储空间中。如下图所示，红色部分存储目标信息，$A0,A1,A2$ 存储攻击者内容，因此根据比特翻转是否发生，则<strong>很有可能</strong>推断出指定比特位存储的信息。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片17.jpg" width="600px" height="450px"></p>
<h4 id="RAMBleed-on-ECC-Memory"><a href="#RAMBleed-on-ECC-Memory" class="headerlink" title="RAMBleed on ECC Memory"></a>RAMBleed on ECC Memory</h4><p>&emsp;&emsp;ECC Memory指的是Error-Correcting Code Memory，DRAM的纠错机制。</p>
<p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片21.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;在<a href="https://www.computer.org/csdl/pds/api/csdl/proceedings/download-article/19skfwyNp5e/pdf?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjc2RsX2FwaSIsImF1ZCI6ImNzZGxfYXBpX2Rvd25sb2FkX3Rva2VuIiwic3ViIjoiYW5vbnltb3VzQGNvbXB1dGVyLm9yZyIsImVtYWlsIjoiYW5vbnltb3VzQGNvbXB1dGVyLm9yZyIsImV4cCI6MTU5MjMxODY5OX0.uN4RLcw4bjEbBeqINhfDoXY7dyJM2-GWgE90zZJt2y4" target="_blank" rel="noopener">ECCPloit</a>这篇论文中指出，比特纠错所产生的时间延迟是十分明显的，这种情况下可根据纠错产生的时间延迟判断是否发生了比特翻转。</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p><img src="/2020/06/15/%C2%96%C2%96RAMBleed-Reading-Bits-in-Memory-Without-Accessing-Them/幻灯片19.jpg" width="600px" height="450px"></p>
<p>&emsp;&emsp;相对来说，采用了ECC纠错的方式，获取到的结果更可信，而没有采取比特纠错方式获取的结果是在一定程度上可信的。本文通过实验测得，通过Feng Shui方式，成功将目标信息加载到指定存储位置也是有一定概率的，文中提到这个概率在83%， 通过Rowhammer攻击获取到比特翻转成功的概率为82%，因此，最终获取到目标信息的量在68%。由于此攻击针对的是秘钥信息，获取的秘钥信息量在27%以上，就可成功破解，因此，68%的信息量足以支持对秘钥的破译。综上，此方式是行得通的。</p>
<p>&emsp;&emsp;本文的目的，旨在阐述这种攻击方式的行之有效，因此并未对其产生的额外代价、时间成本考虑在内。</p>
<p>&emsp;&emsp;研究人员已向英特尔、AMD、OpenSSH、微软、苹果和红帽通报了调查结果，本论文发表在2020年5月举行的第41届IEEE安全和隐私研讨会。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://blog.csdn.net/wojiuguowei/article/details/79377228" target="_blank" rel="noopener">伙伴分配器的一个极简实现</a></p>
<p>[2] <a href="https://www.freebuf.com/column/133871.html" target="_blank" rel="noopener">神乎其神的Rowhammer</a></p>
]]></content>
      <categories>
        <category>paper</category>
        <category>Security and Privacy</category>
      </categories>
      <tags>
        <tag>论文解读</tag>
        <tag>System Security</tag>
        <tag>Rowhammer attack</tag>
      </tags>
  </entry>
  <entry>
    <title>求最大间隔分离超平面</title>
    <url>/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/</url>
    <content><![CDATA[<p>在利用向量机进行最大间隔分离超平面和分类决策函数的求解时，解题过程如下</p>
<h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/1.png" width="500px" height="500px"></p>
<p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/2.png" width="500px" height="500px"></p>
<p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/3.png" width="500px" height="500px"></p>
<p>​                            <img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/4.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/5.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/6.png" width="500px" height="500px"><br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/7.png" width="500px" height="500px"><br>以本次作业为例：<br><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/8.png" alt></p>
<ul>
<li><p>Q: 已知正例点$x_1=(1,2)^T，x_2=(2,3)^T，x_3=(3,3)^T$，负例点$x_4=(2,1)^T，x_5=(3,2)^T$，试求最大间隔分离超平面和分类决策函数，并找出哪些点是支持向量</p>
</li>
<li><p>解： $x_1=(1,2)^T，x_2=(2,3)^T，x_3=(3,3)^T​$,负例点  $x_4=(2,1)^T，x_5=(3,2)^T​$<br>​        $y_1=y_2=y_3=1,y_4=y_5=-1​$</p>
<p>计算目标函数得：</p>
<script type="math/tex; mode=display">\sum\limits_{i=1}^5\sum\limits_{j=1}^5\lambda_i\lambda_jy_iy_jx_i^Tx_j \\ = 5\lambda_1^2 + 13\lambda_2^2 + 18\lambda_3^2 + 5\lambda_4^2 + 13\lambda_5^2 + 16\lambda_1\lambda_2 + 18\lambda_1\lambda_3 - 8 \lambda_1\lambda_4 - \\14\lambda_1\lambda_5 + 30\lambda_2\lambda_3 - 14\lambda_2\lambda_4 - 24\lambda_2\lambda_5 - 18\lambda_3\lambda_4 - 30\lambda_3\lambda_5 + 16\lambda_4\lambda_5​</script><p>构造并求解约束最优化问题</p>
<p>​                                           $\min\limits_{\lambda} \frac{1}{2}\sum\limits_{i=1}^5\sum\limits_{j=1}^5\lambda_i\lambda_jy_iy_jx_i^Tx_j - \sum\limits_{i=1}^5\lambda_i​$</p>
<p>​                                             <script type="math/tex">s.t. \sum\limits_{i=1}^5 \lambda_iy_i = 0 ​</script></p>
<p>​                                             即 $\lambda_1 + \lambda_2 + \lambda_3 - \lambda_4 - \lambda5 = 0​$ </p>
<p>​                                             $\lambda_i\geq 0 ,i=1,2,3,4,5$</p>
<p>将  $\lambda_5 = \lambda_1 + \lambda_2 + \lambda_3 - \lambda_4​$ 带入目标函数并记为</p>
<p>​            $S(\lambda_1,\lambda_2,\lambda_3,\lambda_4) = 2\lambda_1^2+\lambda_2^2+\frac{1}{2}\lambda_3^2+\lambda_4^2+2\lambda_1\lambda_2 - \\ 2\lambda_1\lambda_4 + \lambda_2\lambda_3 + \lambda_3\lambda_4 -2\lambda_1 - 2\lambda_2 - 2\lambda_3 $</p>
<p>对$\lambda_1,\lambda_2,\lambda_3,\lambda_4​$求偏导数，并令为0:</p>
<p>​                                       <script type="math/tex">\frac{\partial S}{\partial \lambda_1} = 4\lambda_1 + 2\lambda_2 - 2\lambda_4 - 2  = 0</script></p>
<p>​                                        <script type="math/tex">\frac{\partial S}{\partial \lambda_2} = 2\lambda_1 + 2\lambda_2 + \lambda_3 - 2  = 0​</script></p>
<p>​                                        <script type="math/tex">\frac{\partial S}{\partial \lambda_3} = \lambda_2 + \lambda_3 + \lambda_4 - 2  = 0</script></p>
<p>​                    <script type="math/tex">\frac{\partial S}{\partial \lambda_4} = -2\lambda_1 + \lambda_3 + 2\lambda_4  = 0</script></p>
<p>令系数矩阵为A,增广矩阵分别为</p>
<p>​                      <script type="math/tex">A = \left[\begin{array} {rrrr}4 & 2 & 0 & -2 \\ 2 & 2 & 1 & 0 \\ 0 & 1 & 1 & 1\\ -2 & 0 & 1 & 2\end{array}\right]，\\ \overline{A} = \left[\begin{array} {cccr|r}4 & 2 & 0 & -2 & 2\\ 2 & 2 & 1 & 0 & 2 \\ 0 & 1 & 1 & 1 & 2\\ -2 & 0 & 1 & 2 & 0\end{array}\right]</script></p>
<p>因为A与增广矩阵$\overline{A}​$的秩不相同，故线性方程组无解，则满足约束条件的最小值在边界取得</p>
<p>当$\lambda_3 = 0​$ 时，S 在 $\lambda_1 = \lambda_4 = 1, \lambda_2 = \lambda_3 = 0​$取最小，$\lambda_5 = \lambda_1 + \lambda_2 + \lambda_3 - \lambda_4 = 0 ​$</p>
<p>计算得 </p>
<p>​                           $w^* = \sum\limits_{i=1}^5\lambda_iy_ix_i = (-1, 2)​$</p>
<p>​                            $b^* = y_j - \sum\limits_{i=1}^5\lambda_iy_ix_i^Tx_j  = -2$</p>
<p>因此分离超平面为 $-x^{(1)} + 2x^{(2)} -2= 0$</p>
<p>分类决策函数为   $f(x) = sign(-x^{(1)} + 2x^{(2)} -2)$</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><img src="/2020/04/20/%E6%B1%82%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%94%E5%88%86%E7%A6%BB%E8%B6%85%E5%B9%B3%E9%9D%A2/9.jpg" width="500px" height="500px"></p>
<p>5个坐标点为$x_1 = (1,2)^T,x_2 = (2,3)^T, x_3 = (3,3)^T, x_4 = (2,1)^T, x_5 = (3,2)^T$</p>
</li>
</ul>
<p>构造约束最优化问题：</p>
<script type="math/tex; mode=display">\min\limits_{w,b} \frac{1}{2}(w_1^2 + w_2^2)​</script><p>$\left. \begin{matrix} w_1 + 2w_2 + b \geq 1 \\ 2w_1 + 3w_2 + b \geq 1 \\ 3w_1 + 3w_2 + b \geq 1 \\ -2w_1 - w_2 - b \geq 1 \\ -3w_1 - 2w_2 - b \geq 1 \end{matrix} \right\}  \Rightarrow \left. \begin{matrix} w_1 \leq -1 \\ w_2 \geq 2 \end{matrix} \right\} \Rightarrow w^*= (-1,2)^T 处取得最小值​$</p>
<p>带入$w_1 = -1和w_2=2​$得</p>
<p>$\left\{ \begin{matrix} 3 + b \geq 1 \\ 4 + b \geq 1 \\ 3 + b \geq 1 \\  -b \geq 1 \\ -1 - b \geq 1 \end{matrix} \right. \Rightarrow \left\{ \begin{matrix} b \geq -2 \\ b \leq -2\end{matrix}\right. \Rightarrow b = -2$</p>
<p> 因此分离超平面为 $-x^{(1)} + 2x^{(2)} -2= 0​$</p>
<p>  分类决策函数为   $f(x) = sign(-x^{(1)} + 2x^{(2)} -2)$</p>
]]></content>
      <tags>
        <tag>homework</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>泉城济南</title>
    <url>/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/</url>
    <content><![CDATA[<h3 id="泉城济南"><a href="#泉城济南" class="headerlink" title="泉城济南"></a>泉城济南</h3><p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-7.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-8.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-2.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-3.jpg" width="500px" height="350px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-4.jpg" width="500px" height="390px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-5.jpg" width="500px" height="400px"></p>
<p><img src="/2020/04/22/%E6%B3%89%E5%9F%8E%E6%B5%8E%E5%8D%97/济南-6.jpg" width="500px" height="400px"></p>
]]></content>
      <tags>
        <tag>picture</tag>
      </tags>
  </entry>
  <entry>
    <title>[转载]博士学历真的很重要吗</title>
    <url>/2020/04/19/%E8%BD%AC%E8%BD%BD-%E5%8D%9A%E5%A3%AB%E5%AD%A6%E5%8E%86%E7%9C%9F%E7%9A%84%E5%BE%88%E9%87%8D%E8%A6%81%E5%90%97/</url>
    <content><![CDATA[<h3 id="博士生学历真的很重要吗？"><a href="#博士生学历真的很重要吗？" class="headerlink" title="博士生学历真的很重要吗？"></a>博士生学历真的很重要吗？</h3><p><strong>作者：时间规划局</strong></p>
<p>知乎上有人提了这么一个问题，在问题描述中，题主问道：这个社会硕士，本科学历不就够用了。<strong>怎么还有那么多人想读博士？</strong></p>
<p>其中有个答主没有试图讲道理，而是讲述了自己从在<strong>上海交大</strong>读研到决定读博走上科研之路，再到工作、创业的心路历程，一万两千多字，获得了将近<strong>4万赞</strong>，被网友誉为“<strong>知乎上看到过的最好的回答</strong>”。</p>
<p>用讲道理的方式去说服一个人接受你的观点，通常是很难的，那我就讲讲自己的故事吧，很长，要表达的，都在里面了。</p>
<p>时间拉回到16年前，2004年的第一场雪，比以往来的更早一些。我和师兄、师姐蹲在冷呵呵的实验室里，看着面前那台崭新的机器，嘎吱嘎吱向外喷涂着被融化后的ABS树脂。对于研一的我来说，一切是那么新奇和高端。我们的研究方向是导师的一个教育部课题，基于RE(reverse engineering，逆向工程)和RP(rapid prototyping，快速成型)的机械零部件快速设计制造。</p>
<p>让我万万没想到的是，12年后，也就是2016年左右，这项技术突然火了起来，换了一个叫“3D打印”的名字，变成了可以改变世界的技术，做一份PPT能很快拿到千万级的投资。但这一切都和我无缘了，因为在2005年夏天，师兄带领师姐成功发表了4篇核心期刊论文，而我还没来得及动手，导师的项目就成功结题了。然后他和其他导师合作，拿到了一个牛轰轰的863项目，两千万经费，我的“3D打印”之梦就此破灭，被迫转行。我可是给杨叔子院士写过邮件，和他探讨过RE/RP技术前景，他还鼓励我好好干呢，呜呜，拜拜了。</p>
<p>导师拍着我的肩膀，告诉我不要气馁，能力更大的人要承担更大的科研任务。我感觉他是在忽悠，但我没有证据，只是很惋惜费了我1年时间、足够发表2篇论文的实验数据。那也是我的心血呀，最后我忍痛把数据都送给学院里另一位工程硕士，保障他顺利毕业了，他非常感激我，请我在学校后门吃了一顿酸菜鱼。那个酸菜鱼馆再向北走200米，是宽阔的长江，江里的鱼都很美味，值得我们每个从这里毕业的人，毕生怀念。</p>
<p>日子还要继续，我收拾心情，转向863项目的研究工作。只是当时我还不知道，这个项目，它深刻的改变了我后来的人生。</p>
<p>在2005年，我参与的这个863项目可以说相当前沿和新潮，我负责的那部分研究内容，需要制备高性能、低表面粗糙度、纳米级的磁性薄膜(NiFe、CoFeB之类的)、搭建一套稳定的飞秒激光泵浦-探测(pump-probe)实验平台、编写数据采集软件并借助Matlab进行数据处理和运算，通过研究软磁薄膜与飞秒激光相互作用的超快瞬态动力学效应，为研发面向未来的太赫兹器件奠定坚实的理论与实验基础。这对机械制造及自动化专业的我来说，简直一脸懵，就像刘姥姥进了大观园，太高端太刺激了，又因为自己啥也不懂而感到深深的自卑。在这种自卑感的驱动下，我的苦逼日子开始了，连续一年半的时间，我没有在晚上11点前回过宿舍，一直做的事情只有三件：查文献，做实验，编写Matlab。</p>
<p>有那么3个月的时间，我一直处于抑郁状态，因为辛苦做出来的实验数据，波形上总是有异常的震荡和杂波，我一遍遍的用磁控溅射方法制作薄膜、一遍遍的检查pump-probe平台、一遍遍的检查数据采集软件，最后我崩溃了，因为根本发现不出什么问题，每个环节都好像是正常的。3个多月过去了，我差不多也得上抑郁症了，和女朋友也时不时的吵架，一切都是灰暗的，看不到希望。</p>
<p>那是一个极其偶然的下午，我继续穿着净化服，在洁净室里的激光平台上重复着实验，妄图优化并查找出问题根源。洁净室有一扇封闭的玻璃窗，有个师弟坐在窗外的电脑前勤奋的工作着。我神经兮兮的盯着数据采集界面，祈祷不要悲剧重现，可是震荡和杂波还是如约而至，盘踞在实验数据界面。压抑的实验室里，我分明听到响亮的打脸声，啪啪啪啪，令人头晕目眩，眼冒金星，孤独而绝望，那一刻，我想死的心都有。突然，有人在实验室外大喊师弟的名字，说他女朋友在外面等他，这个有点莽撞的家伙，猛地站起来往外跑，然后悲剧发生了，他一脚踢掉了他那个台式电脑的机箱电源，笨重的CRT显示屏一下熄灭了。师弟大喊一声卧槽，因为他那台电脑是实验室的顶配，里面每天都在不停的运行模拟程序，机箱和显示器都贴了纸条不准关闭，这一关机，跑了7~8天的模拟进程，大部分都毁掉了。我两步走到窗边敲了敲，看着师弟灰白的脸色，他勉强挤出一丝笑容，隔着玻璃大声说“导师估计要砍我了，好几个人都等着我的模拟结果呢”，我满是同情但也不知道怎么安慰他， 目送他慢慢走出去了。我两步走回去，又开始观察实验结果，我发现竟然出现了奇迹，从2分钟前，也就是我走过去看师弟意外关掉电脑的那一刻，数据波形上的震荡和杂波消失了，光滑平顺接近完美，阶跃突变的信号响应也如高台跳水下落般的完美曲线，这就是我苦苦追寻了一年想要的实验结果啊，我激动的要哭了好吗？看着被师弟熄灭的显示器，我恍然大悟，这种CRT的垃圾显示器，后方会产生大量的电磁辐射，一般情况下也没什么影响，但是我的pump-probe实验，需要良好的电磁屏蔽，激光锁相放大、震荡、弱信号采集都受不了CRT显示器的干扰。很快导师把CRT显示器都换成了液晶，把所有的电脑都搬离净化实验室，还给实验室的墙上加装了电磁屏蔽网，同时也给师弟的顶配电脑装了不间断备用电源，防止他再把电脑关掉。</p>
<p>后来的硕士阶段，没有了悬念，我得到了大量完美数据支撑研究结果，科研之路如开挂一般，发了好几篇论文，还在毕业前收到了SCI期刊Physica B的录用通知。尽管当时影响因子只有1不到，但是硕士就发SCI期刊论文，在只会发中文核心期刊和EI会议论文的机械学院，还是引起了很大轰动，导师也觉得挺有面子。</p>
<p>我闭着眼睛就能毕业了，心态轻松惬意，和女朋友也不吵架了。但很快我又遇到了新的困惑，我虽然用实验验证了飞秒激光和磁性薄膜相互作用的超快动力学现象的确存在，但背后存在的物理机制以及它能够应用到哪些具体的方向，我完全想不明白，我也不知道实验结果的理论基础在哪里。我和导师去探讨，他觉得我想太多了，他说这是和基础学科相关的，我只是看到了表面，并没有深入进去。但当时的我，内心经历了科研过程中哥伦布发现新大陆的狂喜，我已经爱上了这种感觉，我想把这背后一切搞明白啊。我想继续纠缠着导师，他又拿到了新的课题，没空理我了，给我丢下一句话，想把理论搞明白，就去读博士吧。</p>
<p>研三的十月份，大家纷纷开始找工作了，那些研究模具、精密加工、电气控制的同学，很快都拿到好几个offer，我唯一的一次面试，是上汽到学校招聘，有个师兄是上汽的中层领导，回来面试我们。轮到面试我的时候，他拿一罐可乐，说“师弟你几分钟可以把这个造型做出来？”，我苦笑了一下，我说Pro/E和CATIA都没学啊，我研究磁性薄膜和飞秒激光去了。师兄笑着说你这个太高端了，我们不需要这么深奥的，然后我就被刷掉了。</p>
<p>这么高端的研究方向，工作肯定是不好找的，面试过这一次，我再也没去面试过了，因为我之前已经查好了，国内有个课题组研究磁性薄膜和MEMS芯片方向，我也和那边打过几次电话交流了，我想要的答案，那些潜在的电磁学机理，在那里可以找到答案。</p>
<p>考试，复试，收到录取通知书，告别硕士的导师，告别硕士生涯，博士阶段就开始了。令我感到很满意的是，这里真的是可以找到答案的地方，课题组的几个牛人，有精通电磁学理论计算的，有精通薄膜制备工艺的，有精通基于薄膜制作MEMS芯片的，真是太爽了，学院里还有一条3英寸的芯片流片线，这下从理论到实验再到具体的芯片产品制造，都齐全了。反正不知道别人是什么感觉，我觉得自己就像进入了阿里巴巴的宝库，我延续了硕士时期的风格，一头扎进实验室里，就不怎么想出来了，像海绵一样吸取养分，向别人不断的请教。在硕士阶段的基础上，我基于NiFe和CoFeB材料的软磁薄膜性能越做越好，我不但会用磁控溅射机，我还学会了用气相沉积设备、外延设备、硅刻蚀设备、离子束溅射与刻蚀设备、光刻机、电镀设备、烧结炉、离子注入掺杂设备、SEM(扫描电子显微镜)、XRD(x射线衍射仪)、VSM(振动样品磁强计)等一系列设备。管理实验室设备的老师，都把我收为关门弟子了， 晚上如果他有事，下班时都把钥匙给我，让我关净化间的水电气，早上再老早过去开实验室。实验室的设备加起来上亿，对我也是真的信任了，这也让我比别人有了更多的时间和自由度去做实验，加速了我的科研进程。</p>
<p>而且我跟着师兄学会了手撕麦克斯韦方程组，我有个100多页的演草纸，上面全是手写的求解麦克斯韦方程的计算过程，我把麦克斯韦方程应用于求解软磁薄膜的高频磁阻变化以及随外界磁场和电场变化的响应曲线，得到的结果可以直接拟合实验结果，相似度非常高，然后就可以用理论计算得出的优化参数去指导实验工作。当时有个磁阻变化率的指标，我可以和全球几个主要的相同研究方向的课题组一决高下，经常是他们做到30%，没多久我40%的结果就发论文了，然后看到他们刊出的65%的论文，我已经做到80%了，后来根据理论模型得到的参数，我不用制备薄膜的方式了，换成磁导率更高的薄带材料，指标竟然可以做到200%以上，导致国外的几个竞争对手很眼红，就赶紧跟着换材料、发论文，和我们进行比赛。我超级享受这样的过程，中间还会和他们互通邮件聊一聊，就好像两个拳手打擂台赛，休息的间隙还在交流你用什么牌子的蛋白粉啊，你平时吃牛肉还是猪肉啊之类的，感觉既好玩又好笑。</p>
<p>2008年暑期，是我论文最高产的时段。我的实验工作进展顺利，手里的数据很丰富，我首先想到的是Physica B，毕竟我是老客户了，我翻出了之前发论文时给主编写过的邮件，追加了一封邮件，大意是我换了新的研究环境，有了新的研究进展，希望能把一些重要的结果在他们论文上分享给全球的同行们，然后我还说，你应该知道，现在北京正在开奥运会，希望你多关注这场盛会并享受体育带来的快乐，然后我把投稿的论文编号也发给他，希望他能关注并处理。没想到，过了不到1天，主编给我回复了一封热情洋溢的邮件，感谢我对他们期刊的关心，并说自己最喜欢看跳水和体操类比赛，讲了几个我不知道的名字的运动员，最关键的是，他说收到我的投稿了，会尽快让同事处理。然后，我的这篇SCI论文从投稿到修改到接受，只用了26天的时间，你说老外不讲私人感情吗？我觉得他们肯定是讲的，毕竟都是人嘛，和你聊的很好，而且你的论文做的工作又不错，加急给你发表了，也就是他们举手之劳的事情。老外也都讲感情，这个发现对我产生了很大影响，我每次投稿都要找个主编或副主编邮件聊聊天，结果2008年的暑假，我搞定了3篇SCI论文。有时正在看中国队的比赛，夺冠热血沸腾的时候，一封邮件提醒弹出来，是SCI核心期刊的论文录用通知，那种美妙的、刺激的、眩晕的愉悦感觉，不做科研的人永远体会不到，也许像吸毒后的感觉。但吸毒是短暂的、要命的，而科研成就带来的愉悦是永恒的、健康的。</p>
<p>这样的日子过了1年多，有一次和导师聊天，他说一直在思索除了单纯的做器件追求性能，他更想把器件具体的应用到某个方向，开拓出一个应用领域，但这几年下来，他一直没找到合适的方向，如果找到了这样的方向，他很想发一篇Applied physics letter的论文，这是他年轻时候的一个小心愿，不过到现在还没实现。我听了心里一哆嗦，这怎么和我最近几个月在实验室里没事瞎琢磨的想法那么一致呢？我也想干这个事啊，我都琢磨了很多具体方案了啊，你不问我都不知道怎么说啊，我努力帮你发个APL圆梦好了啊。再加上我平时也关注娱乐新闻，当时张国荣自杀还没几年，梅艳芳也患了宫颈癌去世了，我因为《胭脂扣》喜欢这两位明星，心里惆怅了很长一段时间。我看了一篇国外的报道，梅艳芳的去世是因为当时对宫颈癌的HPV病毒没法做到早期筛查和分型检测，HPV病毒有很多个亚型，最致命的有6种，每一种对应的治疗手段和用药都要有所区别的，所以不能做到早期筛查会出人命(因为早期的病毒在体液中的浓度含量很低很低)，筛查出来之后，无法做到精确分型，也会因为治疗手段的不太对症而延误治疗。这些事情，我都考虑过很多天了，我一直在想怎么去解决这个问题，今天导师既然主动提起，我立刻满怀激动的和导师谈了2个小时，并把我的具体实验方案和如何检测讲了一遍。</p>
<p>导师听完以后一直笑，可能他也觉得我讲的不错，问我这些想法怎么来的，我说我天天都在考虑这些东西啊，其实他不知道的是，我这2月和搞生物检测的另一个同学谈过几十次了，他说针对HPV每个亚型目前已经有特定的标记物了，每种标记物只认识对应的其中一个亚型，对其他的都熟视无睹，标记物就像触手一样，会紧紧的抓住它认识的那一个亚型的病毒细胞。我内心里喊了一句卧槽，思路来了：我用纳米磁性粒子修饰到病毒细胞表面、用微流体芯片分成不同检测区域、每个区域修饰不同的标记物、每个区域的标记物对应抓取不同的HPV亚型细胞、哪个或哪几个区域细胞抓的多、哪几个区域的纳米磁性粒子就多、我的传感器去检测哪几个区域的磁型号更强，不就可以检测出体液样本中包含哪种或哪几种HPV病毒了吗？而成熟的PCR扩增技术又可以解决早期病毒细胞浓度极低而检测不到的问题，从而解决早期筛查的困扰。怎么做高性能传感器、怎么刻蚀微流体芯片、怎么制作纳米磁性粒子、怎么在微流体芯片检测区域表面修饰标记物、怎么在病毒细胞表面修饰纳米粒子、怎么PCR扩增、怎么处理弱磁检测信号，我和同学两个人一合作，全部都搞定了啊。兴奋，激动，我一下子又找到了硕士阶段哥伦布发现新大陆的感觉，我仔细查过文献，全球的科研圈，压根没有人用我们这种传感器做过这样的研究，这次导师主动找我聊，正好我把想法全盘托出。导师继续微笑着看我，当场批了10万块的预算，让我买各种耗材就开始整了。</p>
<p>2009年，整个一年我都很忙碌，按照之前的思路，各项试验进行的很顺利，我们一气呵成，在APL上刊出了研究成果，主编对我们还美言了一番，感谢选择他的期刊之类的话。反正也不重要了，我已经和导师举杯相庆了，我帮导师完成了课题组发表APL的心愿。导师问我接下来的想法，我说我们的高性能传感器，除了检测HPV，还能检测胃癌、肺癌、前列腺癌等各种标记物能识别的癌症细胞，能早期筛查和分型检测，我要像开挂一样的发表论文了。说干就干，2010年我们又转向胃癌细胞的检测，改进了微流体芯片和传感器结构，顺利发表了两篇更高水平的论文，其中一篇在Biosensor &amp; Bioelectronics上也是快速发表，这个杂志当年影响因子6.5，那时还没现在这么多灌水的，现在影响因子都要破10了，JACS感觉到了压力。其实按照正常的发展路径，我接下来会成为一个科研能手，手握大把高质量论文，顺便申请一堆专利，承担各种国家的研究项目。但人生总是充满了变化，谁又能说的清楚呢，有两件事情的发生，对我接下来的人生方向产生了深远影响。</p>
<p>2010年，发生了两件对我很重要的事，第一件事是学校基本不再留博士毕业生任教了，这让我的导师很遗憾，原本我们计划好让我留校，然后在新领域大干一番，因为3年时间里，我已经以一作身份发了8篇SCI核心期刊，加上和别人合作的，共计14篇论文，影响因子累计40多了，而且手里正在做的实验和相关结果，已经够再发7~8篇高水平论文了，甚至冲一冲Nature materials子刊(材料应用领域的终极神刊，影响因子40)，都是有可能的。用导师的话讲，我一个人可以顶别人一个课题组加起来的成果了，但现在政策变了，我没法留校了，他感觉非常遗憾。他建议我去国外读博后，然后再回来学校，有了国外的经历，就可以满足留校资格了。因为当时那几个和我是竞争对手的课题组，一直追我的进度，而且也在跟着我转向传感器进行生物检测的方向，这三个课题组的负责人都给我写邮件，法国、美国还有西班牙，邀请去做个博士后研究，然后可以考虑留下任教。面对导师的建议和国外几个课题组的邀请，我最终选择了放弃，原因是我不想继续做科研了，我要换个人生方向。</p>
<p>让我产生这种想法的原因，是源于2010年初我参加的一次在线会议，那是一个传感器国际论坛，在新加坡，我因为没有争取到经费支持，没能到现场参加。通过视频，我观看了日本那个叫Mohri的学者，做了关于磁传感器芯片的演讲，这个演讲简直给我留下了巨大的阴影，让我明白了天外有天、人外有人。本来这个叫Mohri的学者，之前也一直在做和我们类似的器件研究，后来我们转向生物检测应用，他们就没有声音了。我因为做了一点生物检测的工作，发了几篇论文，就开始琢磨这个东西应该可以产业化的，但我们搭建的实验平台粗大笨重，信号处理都是PCB板级的电路，高频信号激励是买了一台笨重的阻抗分析仪还有一台信号发生器，整个实验系统满满当当占了半个实验室。但是，这个Mohri教授，沉寂的几年，他竟然找到日本爱知钢铁投资了他，把传感器的敏感单元、信号处理、阻抗匹配、高频信号激励、电磁屏蔽等模块，全部集成化做进了一个2mm<em>2mm的封装芯片里面，然后给日本的手机厂商供货，开始做手机里面的电子罗盘和地磁方位检测了。这个讲座让我整个人是崩溃的，2mm</em>2mm的面积是我的传感器敏感单元的尺寸，而其他的环节，我用了半间实验室的面积，人家却都集成都芯片里面了，而且已经过了研发的阶段，而且已经给手机厂商供货了，而且都申请了很多专利了。虽然单片的性能比我的差一大截，但在手机领域的应用，人家Mohri的产品是够用的，我只能用一大堆笨重的仪器，去做各种生物检测然后刷论文，离实际变成集成化的产品，还差了十万光年距离。我开始怀疑我的研究方向的意义，我从事应用科学研究，就是应该像Mohri一样，把成果变成实实在在的产品，去推动某一个产业的进步，但看着我那一大堆笨重的仪器，又有种深深的无力感，就算再牛，我一个人也搞定不了这件事，这是个系统工程啊。爱知钢铁给Mohri配置了50人的研发团队，涵盖电子、半导体、传感器、芯片封装各个领域的工程师，而我有什么，我就是一个孤单的螳螂，高高举起手臂，却推动不了事业的车轮。</p>
<p>但机会总是留给有准备的人，我08年无意间做的一件事情，在2010年我面临人生抉择时，开始发挥作用了。我之前讲过了，和管实验室的老师关系处的很好，实验室的设备我基本都会使用，机缘巧合下，我认识了一个已经毕业的师兄，他回来学校想做一些实验，关于陶瓷材料掺杂和烧结的东西，那两个破设备几乎都没人用，像垃圾一样丢在那里。听说我会使用，已经毕业的师兄找到我，给了我一些样品，让我帮他做实验，我有实验室的钥匙，晚上10点后，其他人都走了，我一个人留下来，一边制作我的薄膜传感器，一边帮师兄做样品。2008年9~12月，4个月的时间，我做了6个批次的样品，师兄很感激我，请我吃了一顿酸菜鱼(还记得工程硕士的同学也请我吃的酸菜鱼吗？)，然后给我讲了一个非常精彩的故事，他希望我可以沿着这个方向做下去。我看到命运之神向我招手，他手指一个充满挑战的方向，让我冲上去，挑战未知的困难。</p>
<p>师兄给我的样品是一种陶瓷芯片，是非常好的产品方向，07年国家要对机动车实施排放管制，所有汽车都要出厂强制安装，但是当时，全球只有德国、美国、日本三家公司有相关技术储备，中国这一块市场注定被别人垄断。师兄给的样品正是这个方向，他委托我做的样品，经过几家机构的检测，性能相当不错，接下来，要找到一个合适的代工厂伙伴，把这种陶瓷芯片批量化生产，然后在经过集成化的产品封装设计，把信号传输、热保护、抗振动、机械固定等装置与芯片集成起来，做成终端产品，与发动机匹配使用。国外几家公司的技术严密封锁，核心的芯片工艺没有人能够接触得到，也不会对外销售，只能靠自己做出来。我和师兄只做出了初版的芯片产品，还需要优化才能量产，而且后续还牵涉到封装设计和匹配使用，我们对这些一无所知。想了解全套的东西，只有到一家国外一线的汽车公司的发动机部门去工作，还要正好负责这一块产品的开发，那就可以以客户的身份，了解这些东西。但是说起来容易，哪里有那么正好的机会，一个大牌的汽车公司，正好发动机部门有这个新产品开发的职位空缺？</p>
<p>机缘巧合，天赐良机，2010年12月，某一线国际品牌汽车公司，发动机研发部招聘，有个职位专门负责这个新产品的开发，和师兄商量之后，我毫不犹豫的投了简历，干脆利落的被录用了，工资对于刚毕业的博士来说也算不错。不能让我留校，导师为了补偿我，就让我提前毕业了，还帮我争取到了校级优秀毕业生和校级优秀毕业论文，我很感谢他，从他身上学到了很多科学方法和科研精神，让我终生感激。临走时，导师单独和我长谈了一次，他说的一番话，我觉得很好的诠释了博士学位的意义：得到博士学位不是终点，不代表你以后能比别人成功，但博士学位能代表的是，只要你愿意，你可以做好这个世界上几乎所有的、有技术含量的事情。就这样，我告别了博士导师，告别了科研之路，踏上一场未知之旅，但我没有任何犹豫，我要追寻的东西，已经不在校园里了。</p>
<p>2011年开始工作了，工作的前2年，我和刚进入博士阶段一样，每天都在接触和吸收新的东西，由于核心芯片已经做出来了，我很快能理解总成产品的各种技术细节，而且我每天在琢磨的是，如果让我来研发和生产这个产品，我应该如何改进，可以做的更好。工作2年之后，每次到供应商那里，他们都有点怕我了，因为我提出的问题他们已经开始回答不了，他们不敢在我面前有任何的隐瞒和虚假数据，我对产品了解的深度已经超过了他们。到第3年结束，我觉得差不多了，这个职位已经没有更多可以让我学习的东西了，我和师兄商量了一下，计划第4年离开汽车公司，开启属于自己的事业，但在离开之前，还有两件事必须完成：</p>
<p>1、和代工厂一起努力，把我们核心的芯片产品批量生产的一致性和稳定性的问题解决，成品率提升到90%以上；</p>
<p>2、我必须自己组建创业团队，然后去找投资机构，拿到天使轮融资。</p>
<p>第1件是技术上的事，总归是能解决的，我们加班加点、多多搬砖，逐渐能达到量产的标准了，但是第2件事，我又开始懵了，刘姥姥又一次进大观园，完全不知道怎么去做，只有查资料慢慢学着准备。我印象深刻的是有一本电子书，叫《给你一个亿，你能干什么》，里面有一个章节叫商业计划书 (BP) 的21条军规，特别感谢作者查立先生，我按着他讲的内容，一步步操作，最终做出了一份当时自认为很满意、但现在看起来比较垃圾的第一版BP。然后我准备各种资料，学着展示产品和性能测试报告，组建技术/质量/采购/生产管理的团队，向别人描绘市场前景，做财务分析，做盈利预测，做现金流量预算，做SWOT，用了1年的时间，在朋友的介绍下，有两个天使投资人的资金到位了，感谢金主爸爸，可以放开手脚干了。2015年我从公司正式离职，最后的一年感觉挺对不起主管，我经常迟到早退，去筹备自己的事情，但主管还是宽容的忍受了我一年，大概也是因为其他人没法专业而深刻的管理这么多传感器产品吧。临别时，请主管和同事们一起吃了一顿酸菜鱼 (第三顿了)，主管祝我前程似锦，我祝他以后别再有我这么不听话的下属。然后他好像受到了我的启发，在我走后的3个月，也麻溜的离职，跳槽到杭州湾南岸去了，据说工资翻了一倍还多。</p>
<p>2015年，我和师兄的芯片已经可以稳定量产了，我基于前面4年的工作经验并融入很多改进优化，在2016年终于有了完全自己制造出来的总成产品，并趁热打铁申请了一系列专利。2016年又发生了两件影响重大的事情，可能是我在做天使轮融资的时候，讲了太多次BP，导致我的演讲技能大幅提升，讲起项目口才就好的不行。我参加了一个领军人才项目评比，滔滔不绝的向很多专家评委进行介绍，由于产品有独创性，芯片是自主产权，而且市场前景巨大，公司成立一年就开始有销售收入了，项目答辩取得很好的名次，拿了300万政府资助，对创业初期起到了很好的资金补充。当地政府看我这么能讲，产品又好，就怂恿我去参加省里的创新创业大赛，我去了又是一顿讲，拿到了第二名，领导很开心，然后省里市里都给公司奖励，省市的领导接见我，还不停到公司走访，给了很多支持。他们的态度都很诚恳，能看得出对核心技术、对踏踏实实的创业者那种发自内心的尊重和鼓励，以至于我和他们都成了很好的朋友。我们的目标是一致的，都是希望尽快把产业做大，打破垄断格局，我可以收获成功，他们能得到一家成功的企业，带动就业、带动税收、带动人才的聚集。这种良性互动的局面在中国沿海省份已成普遍现象，让更多的技术型企业成长起来，是中国产业结构转型成功必须要做的事。</p>
<p>2016年的第二件大事来了，我记得那天是科技局的一位局长和我约了时间，他说每年科技部都会举办一次全国创新创业大赛，我在省里取得了好名次，他们决定推荐我参加全国创新创业大赛。局长一脸严肃的和我说，已经四年了，他推荐的本地企业，没有一家通过预赛并进入半决赛的，我问大概多少家进行比赛，局长说各省推荐能进入国家赛的，基本是按照每个大的行业1000名，到国家赛的预赛里从1000家企业选出100家进入半决赛，然后半决赛从100家选出10家进入决赛，两轮10进1之后，基本剩下的10家都是非常厉害的企业了，大家再争冠亚军和第三名。我说领导啊，你是不是觉得我比较能吹，才推荐我去参加的，这么残酷的淘汰赛，我也没底啊。领导笑了，说你这样的博士真不多见，技术专家，口才又滔滔不绝，也不紧张，我看好你啊。</p>
<p>说不紧张是假的，当我一个人背着包，坐上去参加大赛的高铁时，心里是惊恐不安的。1000名来自全国各地的人才们，把我丢进去都找不到在哪里，完全不起眼。但我在准备PPT的时候，一直回响着博士导师说的话，一篇论文、一份报告、一个项目，最核心的灵魂在于你把创新性讲清楚，最好的创新性不是你比别人做的好，而是你做了别人根本没做过的事情，开创了一个领域。我的产品，放到世界范围肯定不是原创的东西，因为有3家国外巨头公司已经做出来了，但是放到中国范围内，除了我根本没有人做过啊，我决定从这个角度开始讲。比赛时是10个企业分为一组，PPT讲完第一遍，我以小组第一从1000个企业里杀出来，进入到半决赛；PPT讲完第二遍，我再次以小组第一从100个企业里杀出来，进入到总决赛，这时，只剩下10家企业了。</p>
<p>出人意料的，是总决赛的前一天晚上，在酒店的会议室里，大赛的带队老师，把我们10个企业都召集在一起，说了一些恭喜的话，让我们加油之类的。然后又很严肃的说，你们10位入选者，都是博士学位，国家想在未来的10年内，从本土选拔近万名专家人才，入选“万人计划专家”，这也是没办法的事，国家要转型升级，要科技强国，没有专家人才，都是空谈，而这一万多名“万 人 计划 专家”，就是科技强国的领军者，国家迫切需要你们。这次请你们来开会，就是想告诉大家，你们都是博士，如果明天能进入前三名，科技部有一个大赛通道，把你们推荐到中组部，再经过一轮答辩和评选，就可以入选“万人计划专家”，希望你们把握这个弥足珍贵的机会。老师的一番话讲完，我看了看其余9个家伙，好像眼睛都发红了，身上已经散发出隐隐的杀气，看起来明天要拼命了。不由得心中一寒，也赶紧假装很有杀气的样子，不能在气势上先输给他们。</p>
<p>回想起大家的杀气，我吓得夜里一直睡不着，我总觉得按照之前预赛和半决赛的套路，只讲创新性是不行的，要有一些更打动人的东西。我翻出来几只芯片样品，小小的，拿在手里，那样的不起眼，但又充满了科技感和铜臭味，我盯着它们看了一个小时，我决定，我不再只是强调创新性了，我要讲一个关于芯片的煽情故事。12个小时后，我排在第6顺位出场，听完主持人的转场介绍，我从位置上站起来，伴着场下的掌声上台了，PPT投放在巨大的屏幕上，镁光灯在眼前聚焦，我看不到台下的任何人，我仿佛回到了学校夜晚12点的实验室里，静悄悄的只有我一个人不停的奋斗着。我从口袋里掏出芯片，举在手上，今天，我要给大家讲一个芯片的故事，这个记载了我8年青春回忆的小物件，就这样被我举着，竟然感觉沉甸甸的，我想起了这些年的辛劳、奋斗、挫折、彷徨、希望、喜悦、兴奋、刺激，就在这个时刻，浓缩为8分钟的演讲，与大家分享吧。我已经不记得当时的细节了，只记得自己讲完后，鞠躬致谢，恍惚中看到台下有很多人站了起来，连绵不断的在鼓掌，持续了半分钟还没有停下来。时间定格在10位参赛者都结束了演讲，计分屏上我的名字排在第二位，我揉了揉眼睛，没错，我是总决赛第二名了。</p>
<p>科技部信守了他们的承诺，2年半之后，通过新一轮的答辩和选拔，我入选了中组部国家万 人 计划专家，我会和另外一万多名专家一起，成为国家科技强国、升级转型的领军者，在这个古老的国家伟大复兴的道路上，与国外的竞争对手展开厮杀，最终杀出一条血路，加冕为王。</p>
<p>我和师兄创办的公司，从16年开始到现在，每年的销售额都以2~3倍的速度增长，后续还会增长的更快，公司的估值今年也到了5亿（是估值，不是个人资产）。但我们依然买不起大别墅，不舍得换保时捷，依然加班到夜里12点以后，依然把公司利润的大部分都投入到研发中去，依然出差的时候不舍得住超过400元的酒店，依然像守财奴一样守着投资人新投入的几千万现金不敢乱花，但我们从学院里那个阿里巴巴宝库学到的东西，还有我们可以手撕麦克斯韦方程组的功底，可以让我们再开发出几款市场容量过千亿的科技产品，可以再组建几个团队，再创办几家估值超过5亿的公司，再开拓几个无人涉及的研究领域。</p>
<p>在美丽的丽江古镇，有一座雪山，终年云雾缭绕，即使在最晴朗的日子，阳光也无法穿透云层。传说只有本领非凡、与山齐高者，才能看到云朵以上的风景。世间虽少有非凡之人，但看过者，无不终生称道绝世美景。</p>
<p>不工作的时候，我喜欢叫朋友们一起打王者，一起吃鸡；</p>
<p>我喜欢没事就去逗逗狗，撸撸猫，和小朋友一起到处玩；</p>
<p>我喜欢所有Alan Walker的歌，不开心的时候就一直听；</p>
<p>我和朋友到迪厅蹦迪，吃火锅撸串喝酒，K歌到深夜；</p>
<p>情人节还有结婚纪念日，我给老婆买花买钻戒买LV包；</p>
<p>我到菜场买菜经常被坑，去小区扔垃圾没分好类会被骂。</p>
<p>身边的人，几乎很少知道我上面讲的那些硕士、博士还有创业的事情，我平时展示的，只是我想展示的，那云朵以下、接连地气、炊烟袅袅的风景。而云朵以上的风景，只有与山齐高者才能看到，你没看见，不代表没有。就像你不会手撕麦克斯韦方程组，没看过杨-米尔斯理论的推导过程，你就不知道杨振宁的伟大紧随麦克斯韦之后，薛定谔和霍金与他相比，都是弟弟。你所看到的，只是他82岁那年，与28岁年轻妻子的传闻。</p>
<p>疫情还没爆发的1月初，我去了一位朋友的公司，他是很早就回国的行业专家，在Bell Labs和Siemens待了十几年，办了一家纳斯达克上市的公司，然后回国创业。到公司的时候，他开发的机器人正在惟妙惟肖的讲课，对着摄像头给孩子们网络直播，脸上的表情还可以各种变换，憨态可掬。坐在他的办公室喝茶，桌子上也有个机器人，这位朋友和我聊他在美国的经历，聊自己的最新产品。然后他扶着桌上的机器人，打开一个开关说：“我经常喜欢把机器人比作我们的国家，你看头部的这个处理器代表政治中心，胸部的电池包代表驱动发展的工业动力，双腿是支撑国家的农业基础，手臂代表执法机构，嘴巴代表外交和宣传部门，体内的各种电线电缆代表交通网络，漂亮的衣服、面容和发型代表娱乐业和服务业。”然后他顿了一下，打开机器人的后背开关，里面露出两个像液压挺杆的支撑柱，牢牢支撑着机器人沉重的金属躯体，他指着两根支撑柱说，“搞技术和研发的都在这里了，有了我们，国家可以顶天立地的站着，不用卑躬屈膝，也不需要下跪乞求，我们是脊梁。”</p>
<p>如果让我选出人生中最幸福的两件事，那么第一件，是在大学的图书馆里遇见我孩子的妈妈，而第二件，就是选择读博。</p>
<p>仅以此文，纪念过往。</p>
<p><a href="https://www.zhihu.com/question/366627317/answer/1151278214" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
</search>
